
part2_filter_kernel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003288  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003420  08003420  00004420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003438  08003438  00005028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003438  08003438  00004438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003440  08003440  00005028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003440  08003440  00004440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003444  08003444  00004444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08003448  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000028  08003470  00005028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08003470  000051a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afe3  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f81  00000000  00000000  0001003b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00011fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d8  00000000  00000000  00012b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164a5  00000000  00000000  00013410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edee  00000000  00000000  000298b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b86  00000000  00000000  000386a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2229  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f7c  00000000  00000000  000c226c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000c51e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003408 	.word	0x08003408

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	08003408 	.word	0x08003408

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 ff07 	bl	800131c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f837 	bl	8000580 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000512:	f000 f89d 	bl	8000650 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f97d 	bl	8000814 <MX_GPIO_Init>
  MX_I2C1_Init();
 800051a:	f000 f8b9 	bl	8000690 <MX_I2C1_Init>
  MX_I2S2_Init();
 800051e:	f000 f8e5 	bl	80006ec <MX_I2S2_Init>
  MX_I2S3_Init();
 8000522:	f000 f911 	bl	8000748 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000526:	f000 f93f 	bl	80007a8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // HAL_SuspendTick();

#ifdef OPTIMIZED
  ITM_Port32(30) = 1;
 800052a:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <main+0x70>)
 800052c:	2201      	movs	r2, #1
 800052e:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < TOTAL_IMAGES; i++) {
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	e015      	b.n	8000562 <main+0x5e>
	  optimized_image_filter(raw_data + (i * HEIGHT * WIDTH * CHANNELS),
 8000536:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <main+0x74>)
 8000538:	6819      	ldr	r1, [r3, #0]
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	4613      	mov	r3, r2
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	4413      	add	r3, r2
 8000542:	031b      	lsls	r3, r3, #12
 8000544:	18c8      	adds	r0, r1, r3
 8000546:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <main+0x78>)
 8000548:	6819      	ldr	r1, [r3, #0]
			  	   output_data + (i * HEIGHT * WIDTH * CHANNELS));
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	4613      	mov	r3, r2
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	4413      	add	r3, r2
 8000552:	031b      	lsls	r3, r3, #12
	  optimized_image_filter(raw_data + (i * HEIGHT * WIDTH * CHANNELS),
 8000554:	440b      	add	r3, r1
 8000556:	4619      	mov	r1, r3
 8000558:	f000 fa54 	bl	8000a04 <optimized_image_filter>
  for (int i = 0; i < TOTAL_IMAGES; i++) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3301      	adds	r3, #1
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b04      	cmp	r3, #4
 8000566:	dde6      	ble.n	8000536 <main+0x32>
  }
  ITM_Port32(30) = 2;
 8000568:	4b02      	ldr	r3, [pc, #8]	@ (8000574 <main+0x70>)
 800056a:	2202      	movs	r2, #2
 800056c:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056e:	bf00      	nop
 8000570:	e7fd      	b.n	800056e <main+0x6a>
 8000572:	bf00      	nop
 8000574:	e0000078 	.word	0xe0000078
 8000578:	20000000 	.word	0x20000000
 800057c:	20000004 	.word	0x20000004

08000580 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	@ 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	@ 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 ff0d 	bl	80033ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b27      	ldr	r3, [pc, #156]	@ (8000648 <SystemClock_Config+0xc8>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	4a26      	ldr	r2, [pc, #152]	@ (8000648 <SystemClock_Config+0xc8>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b4:	4b24      	ldr	r3, [pc, #144]	@ (8000648 <SystemClock_Config+0xc8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b21      	ldr	r3, [pc, #132]	@ (800064c <SystemClock_Config+0xcc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a20      	ldr	r2, [pc, #128]	@ (800064c <SystemClock_Config+0xcc>)
 80005ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <SystemClock_Config+0xcc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005f4:	23c0      	movs	r3, #192	@ 0xc0
 80005f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4618      	mov	r0, r3
 8000606:	f002 f873 	bl	80026f0 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000610:	f000 fc8c 	bl	8000f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000614:	230f      	movs	r3, #15
 8000616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000620:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	2103      	movs	r1, #3
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fad5 	bl	8002be0 <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800063c:	f000 fc76 	bl	8000f2c <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3750      	adds	r7, #80	@ 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000656:	463b      	mov	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
 8000664:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000666:	2301      	movs	r3, #1
 8000668:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800066a:	23c8      	movs	r3, #200	@ 0xc8
 800066c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800066e:	2305      	movs	r3, #5
 8000670:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fcbd 	bl	8002ff8 <HAL_RCCEx_PeriphCLKConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000684:	f000 fc52 	bl	8000f2c <Error_Handler>
  }
}
 8000688:	bf00      	nop
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000694:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <MX_I2C1_Init+0x50>)
 8000696:	4a13      	ldr	r2, [pc, #76]	@ (80006e4 <MX_I2C1_Init+0x54>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_I2C1_Init+0x50>)
 800069c:	4a12      	ldr	r2, [pc, #72]	@ (80006e8 <MX_I2C1_Init+0x58>)
 800069e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_I2C1_Init+0x50>)
 80006ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ba:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	@ (80006e0 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <MX_I2C1_Init+0x50>)
 80006ce:	f001 fa2b 	bl	8001b28 <HAL_I2C_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d8:	f000 fc28 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000044 	.word	0x20000044
 80006e4:	40005400 	.word	0x40005400
 80006e8:	000186a0 	.word	0x000186a0

080006ec <MX_I2S2_Init>:
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <MX_I2S2_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	@ (8000740 <MX_I2S2_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_I2S2_Init+0x50>)
 80006f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006fc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_I2S2_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000704:	4b0d      	ldr	r3, [pc, #52]	@ (800073c <MX_I2S2_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_I2S2_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <MX_I2S2_Init+0x50>)
 8000712:	4a0c      	ldr	r2, [pc, #48]	@ (8000744 <MX_I2S2_Init+0x58>)
 8000714:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_I2S2_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <MX_I2S2_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_I2S2_Init+0x50>)
 8000724:	2201      	movs	r2, #1
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	@ (800073c <MX_I2S2_Init+0x50>)
 800072a:	f001 fb41 	bl	8001db0 <HAL_I2S_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 fbfa 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000098 	.word	0x20000098
 8000740:	40003800 	.word	0x40003800
 8000744:	00017700 	.word	0x00017700

08000748 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800074c:	4b13      	ldr	r3, [pc, #76]	@ (800079c <MX_I2S3_Init+0x54>)
 800074e:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <MX_I2S3_Init+0x58>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000752:	4b12      	ldr	r3, [pc, #72]	@ (800079c <MX_I2S3_Init+0x54>)
 8000754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000758:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <MX_I2S3_Init+0x54>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_I2S3_Init+0x54>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <MX_I2S3_Init+0x54>)
 8000768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800076c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_I2S3_Init+0x54>)
 8000770:	4a0c      	ldr	r2, [pc, #48]	@ (80007a4 <MX_I2S3_Init+0x5c>)
 8000772:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_I2S3_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800077a:	4b08      	ldr	r3, [pc, #32]	@ (800079c <MX_I2S3_Init+0x54>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_I2S3_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_I2S3_Init+0x54>)
 8000788:	f001 fb12 	bl	8001db0 <HAL_I2S_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000792:	f000 fbcb 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000e0 	.word	0x200000e0
 80007a0:	40003c00 	.word	0x40003c00
 80007a4:	00017700 	.word	0x00017700

080007a8 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ac:	4b17      	ldr	r3, [pc, #92]	@ (800080c <MX_SPI1_Init+0x64>)
 80007ae:	4a18      	ldr	r2, [pc, #96]	@ (8000810 <MX_SPI1_Init+0x68>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b16      	ldr	r3, [pc, #88]	@ (800080c <MX_SPI1_Init+0x64>)
 80007b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b14      	ldr	r3, [pc, #80]	@ (800080c <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_SPI1_Init+0x64>)
 80007d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_SPI1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <MX_SPI1_Init+0x64>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_SPI1_Init+0x64>)
 80007f4:	220a      	movs	r2, #10
 80007f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_SPI1_Init+0x64>)
 80007fa:	f002 fd4f 	bl	800329c <HAL_SPI_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000804:	f000 fb92 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000128 	.word	0x20000128
 8000810:	40013000 	.word	0x40013000

08000814 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	@ 0x30
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4b70      	ldr	r3, [pc, #448]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a6f      	ldr	r2, [pc, #444]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 8000834:	f043 0310 	orr.w	r3, r3, #16
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b6d      	ldr	r3, [pc, #436]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0310 	and.w	r3, r3, #16
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	4b69      	ldr	r3, [pc, #420]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a68      	ldr	r2, [pc, #416]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b66      	ldr	r3, [pc, #408]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b62      	ldr	r3, [pc, #392]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a61      	ldr	r2, [pc, #388]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b5f      	ldr	r3, [pc, #380]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b5b      	ldr	r3, [pc, #364]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a5a      	ldr	r2, [pc, #360]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b58      	ldr	r3, [pc, #352]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b54      	ldr	r3, [pc, #336]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a53      	ldr	r2, [pc, #332]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b51      	ldr	r3, [pc, #324]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b4d      	ldr	r3, [pc, #308]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a4c      	ldr	r2, [pc, #304]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b4a      	ldr	r3, [pc, #296]	@ (80009f0 <MX_GPIO_Init+0x1dc>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0308 	and.w	r3, r3, #8
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2108      	movs	r1, #8
 80008d6:	4847      	ldr	r0, [pc, #284]	@ (80009f4 <MX_GPIO_Init+0x1e0>)
 80008d8:	f001 f90c 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	4845      	ldr	r0, [pc, #276]	@ (80009f8 <MX_GPIO_Init+0x1e4>)
 80008e2:	f001 f907 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008ec:	4843      	ldr	r0, [pc, #268]	@ (80009fc <MX_GPIO_Init+0x1e8>)
 80008ee:	f001 f901 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80008f2:	2304      	movs	r3, #4
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	483b      	ldr	r0, [pc, #236]	@ (80009f4 <MX_GPIO_Init+0x1e0>)
 8000906:	f000 ff71 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800090a:	2308      	movs	r3, #8
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4834      	ldr	r0, [pc, #208]	@ (80009f4 <MX_GPIO_Init+0x1e0>)
 8000922:	f000 ff63 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin | INT2_Pin | MEMS_INT2_Pin;
 8000926:	2332      	movs	r3, #50	@ 0x32
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800092a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	482e      	ldr	r0, [pc, #184]	@ (80009f4 <MX_GPIO_Init+0x1e0>)
 800093c:	f000 ff56 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000940:	2301      	movs	r3, #1
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4828      	ldr	r0, [pc, #160]	@ (80009f8 <MX_GPIO_Init+0x1e4>)
 8000958:	f000 ff48 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800095c:	2301      	movs	r3, #1
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000960:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4823      	ldr	r0, [pc, #140]	@ (8000a00 <MX_GPIO_Init+0x1ec>)
 8000972:	f000 ff3b 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000976:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	481b      	ldr	r0, [pc, #108]	@ (80009fc <MX_GPIO_Init+0x1e8>)
 8000990:	f000 ff2c 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000994:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4815      	ldr	r0, [pc, #84]	@ (8000a00 <MX_GPIO_Init+0x1ec>)
 80009aa:	f000 ff1f 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 80009ae:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c0:	230a      	movs	r3, #10
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	480d      	ldr	r0, [pc, #52]	@ (8000a00 <MX_GPIO_Init+0x1ec>)
 80009cc:	f000 ff0e 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d0:	2320      	movs	r3, #32
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	@ (80009fc <MX_GPIO_Init+0x1e8>)
 80009e4:	f000 ff02 	bl	80017ec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80009e8:	bf00      	nop
 80009ea:	3730      	adds	r7, #48	@ 0x30
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40020800 	.word	0x40020800
 80009fc:	40020c00 	.word	0x40020c00
 8000a00:	40020000 	.word	0x40020000

08000a04 <optimized_image_filter>:
  }
  HAL_FLASH_Lock();
}

void optimized_image_filter(volatile uint8_t *image_addr, volatile uint8_t *output_addr)
{
 8000a04:	b5b0      	push	{r4, r5, r7, lr}
 8000a06:	f5ad 5d40 	sub.w	sp, sp, #12288	@ 0x3000
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	f843 0c1c 	str.w	r0, [r3, #-28]
 8000a16:	f107 0320 	add.w	r3, r7, #32
 8000a1a:	f843 1c20 	str.w	r1, [r3, #-32]
	uint8_t buffer[WIDTH * HEIGHT * CHANNELS] = {0x00};
 8000a1e:	f107 0320 	add.w	r3, r7, #32
 8000a22:	3b14      	subs	r3, #20
 8000a24:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 fcbf 	bl	80033ae <memset>
  for (int y = 1; y < HEIGHT - 1; y++)
 8000a30:	2301      	movs	r3, #1
 8000a32:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000a36:	f102 021c 	add.w	r2, r2, #28
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	e22b      	b.n	8000e96 <optimized_image_filter+0x492>
  {
    for (int x = 1; x < WIDTH - 1; x++)
 8000a3e:	2301      	movs	r3, #1
 8000a40:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000a44:	f102 0218 	add.w	r2, r2, #24
 8000a48:	6013      	str	r3, [r2, #0]
 8000a4a:	e211      	b.n	8000e70 <optimized_image_filter+0x46c>
    {
      for (int c = 0; c < CHANNELS; c++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000a52:	f102 0214 	add.w	r2, r2, #20
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	e1f7      	b.n	8000e4a <optimized_image_filter+0x446>
      {
        int sum = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000a60:	f102 0210 	add.w	r2, r2, #16
 8000a64:	6013      	str	r3, [r2, #0]

        // Unroll the kernel loops
        sum += (int)(image_addr[((y - 1) * WIDTH + (x - 1)) * CHANNELS + c] * kernel[0][0]);
 8000a66:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000a6a:	f103 031c 	add.w	r3, r3, #28
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3b01      	subs	r3, #1
 8000a72:	019a      	lsls	r2, r3, #6
 8000a74:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000a78:	f103 0318 	add.w	r3, r3, #24
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	441a      	add	r2, r3
 8000a82:	4613      	mov	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	441a      	add	r2, r3
 8000a88:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000a8c:	f103 0314 	add.w	r3, r3, #20
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	461a      	mov	r2, r3
 8000a96:	f107 0320 	add.w	r3, r7, #32
 8000a9a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4bd2      	ldr	r3, [pc, #840]	@ (8000df0 <optimized_image_filter+0x3ec>)
 8000aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aac:	fb02 f303 	mul.w	r3, r2, r3
 8000ab0:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000ab4:	f102 0210 	add.w	r2, r2, #16
 8000ab8:	6812      	ldr	r2, [r2, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000ac0:	f102 0210 	add.w	r2, r2, #16
 8000ac4:	6013      	str	r3, [r2, #0]
        sum += (int)(image_addr[((y - 1) * WIDTH + (x)) * CHANNELS + c] * kernel[0][1]);
 8000ac6:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000aca:	f103 031c 	add.w	r3, r3, #28
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	019a      	lsls	r2, r3, #6
 8000ad4:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000ad8:	f103 0318 	add.w	r3, r3, #24
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	441a      	add	r2, r3
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	441a      	add	r2, r3
 8000ae6:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000aea:	f103 0314 	add.w	r3, r3, #20
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4413      	add	r3, r2
 8000af2:	461a      	mov	r2, r3
 8000af4:	f107 0320 	add.w	r3, r7, #32
 8000af8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000afc:	4413      	add	r3, r2
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	4bba      	ldr	r3, [pc, #744]	@ (8000df0 <optimized_image_filter+0x3ec>)
 8000b06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b0a:	fb02 f303 	mul.w	r3, r2, r3
 8000b0e:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000b12:	f102 0210 	add.w	r2, r2, #16
 8000b16:	6812      	ldr	r2, [r2, #0]
 8000b18:	4413      	add	r3, r2
 8000b1a:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000b1e:	f102 0210 	add.w	r2, r2, #16
 8000b22:	6013      	str	r3, [r2, #0]
        sum += (int)(image_addr[((y - 1) * WIDTH + (x + 1)) * CHANNELS + c] * kernel[0][2]);
 8000b24:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000b28:	f103 031c 	add.w	r3, r3, #28
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	019a      	lsls	r2, r3, #6
 8000b32:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000b36:	f103 0318 	add.w	r3, r3, #24
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	441a      	add	r2, r3
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	441a      	add	r2, r3
 8000b46:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000b4a:	f103 0314 	add.w	r3, r3, #20
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4413      	add	r3, r2
 8000b52:	461a      	mov	r2, r3
 8000b54:	f107 0320 	add.w	r3, r7, #32
 8000b58:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	461a      	mov	r2, r3
 8000b64:	4ba2      	ldr	r3, [pc, #648]	@ (8000df0 <optimized_image_filter+0x3ec>)
 8000b66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b6a:	fb02 f303 	mul.w	r3, r2, r3
 8000b6e:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000b72:	f102 0210 	add.w	r2, r2, #16
 8000b76:	6812      	ldr	r2, [r2, #0]
 8000b78:	4413      	add	r3, r2
 8000b7a:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000b7e:	f102 0210 	add.w	r2, r2, #16
 8000b82:	6013      	str	r3, [r2, #0]

        sum += (int)(image_addr[((y)*WIDTH + (x - 1)) * CHANNELS + c] * kernel[1][0]);
 8000b84:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000b88:	f103 031c 	add.w	r3, r3, #28
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	019a      	lsls	r2, r3, #6
 8000b90:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000b94:	f103 0318 	add.w	r3, r3, #24
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	441a      	add	r2, r3
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	441a      	add	r2, r3
 8000ba4:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000ba8:	f103 0314 	add.w	r3, r3, #20
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	f107 0320 	add.w	r3, r7, #32
 8000bb6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b8b      	ldr	r3, [pc, #556]	@ (8000df0 <optimized_image_filter+0x3ec>)
 8000bc4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000bc8:	fb02 f303 	mul.w	r3, r2, r3
 8000bcc:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000bd0:	f102 0210 	add.w	r2, r2, #16
 8000bd4:	6812      	ldr	r2, [r2, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000bdc:	f102 0210 	add.w	r2, r2, #16
 8000be0:	6013      	str	r3, [r2, #0]
        sum += (int)(image_addr[((y)*WIDTH + (x)) * CHANNELS + c] * kernel[1][1]);
 8000be2:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000be6:	f103 031c 	add.w	r3, r3, #28
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	019a      	lsls	r2, r3, #6
 8000bee:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000bf2:	f103 0318 	add.w	r3, r3, #24
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	441a      	add	r2, r3
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	441a      	add	r2, r3
 8000c00:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000c04:	f103 0314 	add.w	r3, r3, #20
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	f107 0320 	add.w	r3, r7, #32
 8000c12:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000c16:	4413      	add	r3, r2
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b74      	ldr	r3, [pc, #464]	@ (8000df0 <optimized_image_filter+0x3ec>)
 8000c20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c24:	fb02 f303 	mul.w	r3, r2, r3
 8000c28:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000c2c:	f102 0210 	add.w	r2, r2, #16
 8000c30:	6812      	ldr	r2, [r2, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000c38:	f102 0210 	add.w	r2, r2, #16
 8000c3c:	6013      	str	r3, [r2, #0]
        sum += (int)(image_addr[((y)*WIDTH + (x + 1)) * CHANNELS + c] * kernel[1][2]);
 8000c3e:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000c42:	f103 031c 	add.w	r3, r3, #28
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	019a      	lsls	r2, r3, #6
 8000c4a:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000c4e:	f103 0318 	add.w	r3, r3, #24
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	3301      	adds	r3, #1
 8000c56:	441a      	add	r2, r3
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	441a      	add	r2, r3
 8000c5e:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000c62:	f103 0314 	add.w	r3, r3, #20
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4413      	add	r3, r2
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f107 0320 	add.w	r3, r7, #32
 8000c70:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000c74:	4413      	add	r3, r2
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b5c      	ldr	r3, [pc, #368]	@ (8000df0 <optimized_image_filter+0x3ec>)
 8000c7e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c82:	fb02 f303 	mul.w	r3, r2, r3
 8000c86:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000c8a:	f102 0210 	add.w	r2, r2, #16
 8000c8e:	6812      	ldr	r2, [r2, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000c96:	f102 0210 	add.w	r2, r2, #16
 8000c9a:	6013      	str	r3, [r2, #0]

        sum += (int)(image_addr[((y + 1) * WIDTH + (x - 1)) * CHANNELS + c] * kernel[2][0]);
 8000c9c:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000ca0:	f103 031c 	add.w	r3, r3, #28
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	019a      	lsls	r2, r3, #6
 8000caa:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000cae:	f103 0318 	add.w	r3, r3, #24
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	441a      	add	r2, r3
 8000cb8:	4613      	mov	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	441a      	add	r2, r3
 8000cbe:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000cc2:	f103 0314 	add.w	r3, r3, #20
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	461a      	mov	r2, r3
 8000ccc:	f107 0320 	add.w	r3, r7, #32
 8000cd0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b44      	ldr	r3, [pc, #272]	@ (8000df0 <optimized_image_filter+0x3ec>)
 8000cde:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000ce2:	fb02 f303 	mul.w	r3, r2, r3
 8000ce6:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000cea:	f102 0210 	add.w	r2, r2, #16
 8000cee:	6812      	ldr	r2, [r2, #0]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000cf6:	f102 0210 	add.w	r2, r2, #16
 8000cfa:	6013      	str	r3, [r2, #0]
        sum += (int)(image_addr[((y + 1) * WIDTH + (x)) * CHANNELS + c] * kernel[2][1]);
 8000cfc:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000d00:	f103 031c 	add.w	r3, r3, #28
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	3301      	adds	r3, #1
 8000d08:	019a      	lsls	r2, r3, #6
 8000d0a:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000d0e:	f103 0318 	add.w	r3, r3, #24
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	441a      	add	r2, r3
 8000d16:	4613      	mov	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	441a      	add	r2, r3
 8000d1c:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000d20:	f103 0314 	add.w	r3, r3, #20
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	f107 0320 	add.w	r3, r7, #32
 8000d2e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000d32:	4413      	add	r3, r2
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000df0 <optimized_image_filter+0x3ec>)
 8000d3c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000d40:	fb02 f303 	mul.w	r3, r2, r3
 8000d44:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000d48:	f102 0210 	add.w	r2, r2, #16
 8000d4c:	6812      	ldr	r2, [r2, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000d54:	f102 0210 	add.w	r2, r2, #16
 8000d58:	6013      	str	r3, [r2, #0]
        sum += (int)(image_addr[((y + 1) * WIDTH + (x + 1)) * CHANNELS + c] * kernel[2][2]);
 8000d5a:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000d5e:	f103 031c 	add.w	r3, r3, #28
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	019a      	lsls	r2, r3, #6
 8000d68:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000d6c:	f103 0318 	add.w	r3, r3, #24
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	441a      	add	r2, r3
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	441a      	add	r2, r3
 8000d7c:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000d80:	f103 0314 	add.w	r3, r3, #20
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000d92:	4413      	add	r3, r2
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <optimized_image_filter+0x3ec>)
 8000d9c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000da0:	fb02 f303 	mul.w	r3, r2, r3
 8000da4:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000da8:	f102 0210 	add.w	r2, r2, #16
 8000dac:	6812      	ldr	r2, [r2, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000db4:	f102 0210 	add.w	r2, r2, #16
 8000db8:	6013      	str	r3, [r2, #0]

        // Clamp the result to the valid range [0, 255]
        if (sum < 0)
 8000dba:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000dbe:	f103 0310 	add.w	r3, r3, #16
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da05      	bge.n	8000dd4 <optimized_image_filter+0x3d0>
          sum = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000dce:	f102 0210 	add.w	r2, r2, #16
 8000dd2:	6013      	str	r3, [r2, #0]
        if (sum > 255)
 8000dd4:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000dd8:	f103 0310 	add.w	r3, r3, #16
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2bff      	cmp	r3, #255	@ 0xff
 8000de0:	dd08      	ble.n	8000df4 <optimized_image_filter+0x3f0>
          sum = 255;
 8000de2:	23ff      	movs	r3, #255	@ 0xff
 8000de4:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000de8:	f102 0210 	add.w	r2, r2, #16
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e001      	b.n	8000df4 <optimized_image_filter+0x3f0>
 8000df0:	20000008 	.word	0x20000008

        buffer[(y * WIDTH + x) * CHANNELS + c] = (uint8_t)sum;
 8000df4:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000df8:	f103 031c 	add.w	r3, r3, #28
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	019a      	lsls	r2, r3, #6
 8000e00:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000e04:	f103 0318 	add.w	r3, r3, #24
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	441a      	add	r2, r3
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	441a      	add	r2, r3
 8000e12:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000e16:	f103 0314 	add.w	r3, r3, #20
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000e22:	f102 0210 	add.w	r2, r2, #16
 8000e26:	6812      	ldr	r2, [r2, #0]
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	f107 0120 	add.w	r1, r7, #32
 8000e2e:	440b      	add	r3, r1
 8000e30:	f803 2c14 	strb.w	r2, [r3, #-20]
      for (int c = 0; c < CHANNELS; c++)
 8000e34:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000e38:	f103 0314 	add.w	r3, r3, #20
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000e44:	f102 0214 	add.w	r2, r2, #20
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000e4e:	f103 0314 	add.w	r3, r3, #20
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	f77f ae00 	ble.w	8000a5a <optimized_image_filter+0x56>
    for (int x = 1; x < WIDTH - 1; x++)
 8000e5a:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000e5e:	f103 0318 	add.w	r3, r3, #24
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000e6a:	f102 0218 	add.w	r2, r2, #24
 8000e6e:	6013      	str	r3, [r2, #0]
 8000e70:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000e74:	f103 0318 	add.w	r3, r3, #24
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8000e7c:	f77f ade6 	ble.w	8000a4c <optimized_image_filter+0x48>
  for (int y = 1; y < HEIGHT - 1; y++)
 8000e80:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000e84:	f103 031c 	add.w	r3, r3, #28
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000e90:	f102 021c 	add.w	r2, r2, #28
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000e9a:	f103 031c 	add.w	r3, r3, #28
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b3e      	cmp	r3, #62	@ 0x3e
 8000ea2:	f77f adcc 	ble.w	8000a3e <optimized_image_filter+0x3a>

      }
    }
  }
  // After processing the entire image, write the buffer to flash
  HAL_FLASH_Unlock();
 8000ea6:	f000 fbd5 	bl	8001654 <HAL_FLASH_Unlock>
  for (int i = 0; i < sizeof(buffer); i++) {
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000eb0:	f102 020c 	add.w	r2, r2, #12
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	e029      	b.n	8000f0c <optimized_image_filter+0x508>
	  HAL_FLASH_Program_IT(FLASH_TYPEPROGRAM_BYTE, (uint32_t) (output_addr + i), buffer[i]);
 8000eb8:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000ebc:	f103 030c 	add.w	r3, r3, #12
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f107 0220 	add.w	r2, r7, #32
 8000ec6:	f852 2c20 	ldr.w	r2, [r2, #-32]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000ed8:	f103 030c 	add.w	r3, r3, #12
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	3b14      	subs	r3, #20
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	461c      	mov	r4, r3
 8000eea:	4615      	mov	r5, r2
 8000eec:	4622      	mov	r2, r4
 8000eee:	462b      	mov	r3, r5
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f000 fb6b 	bl	80015cc <HAL_FLASH_Program_IT>
  for (int i = 0; i < sizeof(buffer); i++) {
 8000ef6:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000efa:	f103 030c 	add.w	r3, r3, #12
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8000f06:	f102 020c 	add.w	r2, r2, #12
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8000f10:	f103 030c 	add.w	r3, r3, #12
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8000f1a:	d3cd      	bcc.n	8000eb8 <optimized_image_filter+0x4b4>
  }
  HAL_FLASH_Lock();
 8000f1c:	f000 fbbc 	bl	8001698 <HAL_FLASH_Lock>
}
 8000f20:	bf00      	nop
 8000f22:	f507 5740 	add.w	r7, r7, #12288	@ 0x3000
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bdb0      	pop	{r4, r5, r7, pc}

08000f2c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <Error_Handler+0x8>

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <HAL_MspInit+0x4c>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	4a0f      	ldr	r2, [pc, #60]	@ (8000f84 <HAL_MspInit+0x4c>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <HAL_MspInit+0x4c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <HAL_MspInit+0x4c>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f62:	4a08      	ldr	r2, [pc, #32]	@ (8000f84 <HAL_MspInit+0x4c>)
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_MspInit+0x4c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f76:	2007      	movs	r0, #7
 8000f78:	f000 faf4 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40023800 	.word	0x40023800

08000f88 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	@ 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a19      	ldr	r2, [pc, #100]	@ (800100c <HAL_I2C_MspInit+0x84>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d12c      	bne.n	8001004 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <HAL_I2C_MspInit+0x88>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a17      	ldr	r2, [pc, #92]	@ (8001010 <HAL_I2C_MspInit+0x88>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <HAL_I2C_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fc6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000fca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fcc:	2312      	movs	r3, #18
 8000fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480c      	ldr	r0, [pc, #48]	@ (8001014 <HAL_I2C_MspInit+0x8c>)
 8000fe4:	f000 fc02 	bl	80017ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <HAL_I2C_MspInit+0x88>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <HAL_I2C_MspInit+0x88>)
 8000ff2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ff6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff8:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <HAL_I2C_MspInit+0x88>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	@ 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40005400 	.word	0x40005400
 8001010:	40023800 	.word	0x40023800
 8001014:	40020400 	.word	0x40020400

08001018 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	@ 0x38
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a59      	ldr	r2, [pc, #356]	@ (800119c <HAL_I2S_MspInit+0x184>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d15b      	bne.n	80010f2 <HAL_I2S_MspInit+0xda>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
 800103e:	4b58      	ldr	r3, [pc, #352]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	4a57      	ldr	r2, [pc, #348]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001048:	6413      	str	r3, [r2, #64]	@ 0x40
 800104a:	4b55      	ldr	r3, [pc, #340]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001052:	623b      	str	r3, [r7, #32]
 8001054:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	4b51      	ldr	r3, [pc, #324]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a50      	ldr	r2, [pc, #320]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b4e      	ldr	r3, [pc, #312]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	4b4a      	ldr	r3, [pc, #296]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a49      	ldr	r2, [pc, #292]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800108e:	2304      	movs	r3, #4
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800109e:	2306      	movs	r3, #6
 80010a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	483e      	ldr	r0, [pc, #248]	@ (80011a4 <HAL_I2S_MspInit+0x18c>)
 80010aa:	f000 fb9f 	bl	80017ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80010ae:	2308      	movs	r3, #8
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010be:	2305      	movs	r3, #5
 80010c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	4836      	ldr	r0, [pc, #216]	@ (80011a4 <HAL_I2S_MspInit+0x18c>)
 80010ca:	f000 fb8f 	bl	80017ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80010ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010e0:	2305      	movs	r3, #5
 80010e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	482f      	ldr	r0, [pc, #188]	@ (80011a8 <HAL_I2S_MspInit+0x190>)
 80010ec:	f000 fb7e 	bl	80017ec <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010f0:	e04f      	b.n	8001192 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a2d      	ldr	r2, [pc, #180]	@ (80011ac <HAL_I2S_MspInit+0x194>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d14a      	bne.n	8001192 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	4a26      	ldr	r2, [pc, #152]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 8001106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800110a:	6413      	str	r3, [r2, #64]	@ 0x40
 800110c:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001120:	4a1f      	ldr	r2, [pc, #124]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6313      	str	r3, [r2, #48]	@ 0x30
 8001128:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113c:	4a18      	ldr	r2, [pc, #96]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6313      	str	r3, [r2, #48]	@ 0x30
 8001144:	4b16      	ldr	r3, [pc, #88]	@ (80011a0 <HAL_I2S_MspInit+0x188>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001150:	2310      	movs	r3, #16
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001160:	2306      	movs	r3, #6
 8001162:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	4811      	ldr	r0, [pc, #68]	@ (80011b0 <HAL_I2S_MspInit+0x198>)
 800116c:	f000 fb3e 	bl	80017ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001170:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001182:	2306      	movs	r3, #6
 8001184:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <HAL_I2S_MspInit+0x18c>)
 800118e:	f000 fb2d 	bl	80017ec <HAL_GPIO_Init>
}
 8001192:	bf00      	nop
 8001194:	3738      	adds	r7, #56	@ 0x38
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40003800 	.word	0x40003800
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40003c00 	.word	0x40003c00
 80011b0:	40020000 	.word	0x40020000

080011b4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <HAL_SPI_MspInit+0x84>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d12b      	bne.n	800122e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_SPI_MspInit+0x88>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	4a17      	ldr	r2, [pc, #92]	@ (800123c <HAL_SPI_MspInit+0x88>)
 80011e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_SPI_MspInit+0x88>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <HAL_SPI_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a10      	ldr	r2, [pc, #64]	@ (800123c <HAL_SPI_MspInit+0x88>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <HAL_SPI_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800120e:	23e0      	movs	r3, #224	@ 0xe0
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800121e:	2305      	movs	r3, #5
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <HAL_SPI_MspInit+0x8c>)
 800122a:	f000 fadf 	bl	80017ec <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	@ 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40013000 	.word	0x40013000
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <NMI_Handler+0x4>

0800124c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <MemManage_Handler+0x4>

0800125c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <UsageFault_Handler+0x4>

0800126c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129a:	f000 f891 	bl	80013c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <SystemInit+0x20>)
 80012aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ae:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <SystemInit+0x20>)
 80012b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001300 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012cc:	f7ff ffea 	bl	80012a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d0:	480c      	ldr	r0, [pc, #48]	@ (8001304 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012d2:	490d      	ldr	r1, [pc, #52]	@ (8001308 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012d4:	4a0d      	ldr	r2, [pc, #52]	@ (800130c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001314 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f6:	f002 f863 	bl	80033c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fa:	f7ff f903 	bl	8000504 <main>
  bx  lr    
 80012fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001308:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800130c:	08003448 	.word	0x08003448
  ldr r2, =_sbss
 8001310:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001314:	200001a4 	.word	0x200001a4

08001318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC_IRQHandler>
	...

0800131c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001320:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0d      	ldr	r2, [pc, #52]	@ (800135c <HAL_Init+0x40>)
 8001326:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800132a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <HAL_Init+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <HAL_Init+0x40>)
 8001332:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001336:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001338:	4b08      	ldr	r3, [pc, #32]	@ (800135c <HAL_Init+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a07      	ldr	r2, [pc, #28]	@ (800135c <HAL_Init+0x40>)
 800133e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001342:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001344:	2003      	movs	r0, #3
 8001346:	f000 f90d 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134a:	2000      	movs	r0, #0
 800134c:	f000 f808 	bl	8001360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001350:	f7ff fdf2 	bl	8000f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023c00 	.word	0x40023c00

08001360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <HAL_InitTick+0x54>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <HAL_InitTick+0x58>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001376:	fbb3 f3f1 	udiv	r3, r3, r1
 800137a:	fbb2 f3f3 	udiv	r3, r2, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f917 	bl	80015b2 <HAL_SYSTICK_Config>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e00e      	b.n	80013ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b0f      	cmp	r3, #15
 8001392:	d80a      	bhi.n	80013aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001394:	2200      	movs	r2, #0
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f000 f8ed 	bl	800157a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a0:	4a06      	ldr	r2, [pc, #24]	@ (80013bc <HAL_InitTick+0x5c>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e000      	b.n	80013ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2000001c 	.word	0x2000001c
 80013b8:	20000024 	.word	0x20000024
 80013bc:	20000020 	.word	0x20000020

080013c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_IncTick+0x20>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_IncTick+0x24>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
 80013d0:	4a04      	ldr	r2, [pc, #16]	@ (80013e4 <HAL_IncTick+0x24>)
 80013d2:	6013      	str	r3, [r2, #0]
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000024 	.word	0x20000024
 80013e4:	20000180 	.word	0x20000180

080013e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b03      	ldr	r3, [pc, #12]	@ (80013fc <HAL_GetTick+0x14>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000180 	.word	0x20000180

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	@ (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	@ (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	@ (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	@ 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	@ 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff47 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff5c 	bl	8001448 <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ff8e 	bl	80014b8 <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5d 	bl	8001464 <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffb0 	bl	8001520 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 80015de:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_FLASH_Program_IT+0x80>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	4a1a      	ldr	r2, [pc, #104]	@ (800164c <HAL_FLASH_Program_IT+0x80>)
 80015e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015e8:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 80015ea:	4b18      	ldr	r3, [pc, #96]	@ (800164c <HAL_FLASH_Program_IT+0x80>)
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	4a17      	ldr	r2, [pc, #92]	@ (800164c <HAL_FLASH_Program_IT+0x80>)
 80015f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015f4:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 80015f6:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <HAL_FLASH_Program_IT+0x84>)
 80015f8:	2203      	movs	r2, #3
 80015fa:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
 80015fc:	4a14      	ldr	r2, [pc, #80]	@ (8001650 <HAL_FLASH_Program_IT+0x84>)
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	6153      	str	r3, [r2, #20]

  if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d105      	bne.n	8001614 <HAL_FLASH_Program_IT+0x48>
  {
    /*Program byte (8-bit) at a specified address.*/
    FLASH_Program_Byte(Address, (uint8_t) Data);
 8001608:	783b      	ldrb	r3, [r7, #0]
 800160a:	4619      	mov	r1, r3
 800160c:	68b8      	ldr	r0, [r7, #8]
 800160e:	f000 f8cb 	bl	80017a8 <FLASH_Program_Byte>
 8001612:	e016      	b.n	8001642 <HAL_FLASH_Program_IT+0x76>
  }
  else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d105      	bne.n	8001626 <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800161a:	883b      	ldrh	r3, [r7, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	68b8      	ldr	r0, [r7, #8]
 8001620:	f000 f89e 	bl	8001760 <FLASH_Program_HalfWord>
 8001624:	e00d      	b.n	8001642 <HAL_FLASH_Program_IT+0x76>
  }
  else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d105      	bne.n	8001638 <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4619      	mov	r1, r3
 8001630:	68b8      	ldr	r0, [r7, #8]
 8001632:	f000 f873 	bl	800171c <FLASH_Program_Word>
 8001636:	e004      	b.n	8001642 <HAL_FLASH_Program_IT+0x76>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
 8001638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800163c:	68b8      	ldr	r0, [r7, #8]
 800163e:	f000 f83b 	bl	80016b8 <FLASH_Program_DoubleWord>
  }

  return status;
 8001642:	7dfb      	ldrb	r3, [r7, #23]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023c00 	.word	0x40023c00
 8001650:	20000184 	.word	0x20000184

08001654 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800165e:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <HAL_FLASH_Unlock+0x38>)
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	2b00      	cmp	r3, #0
 8001664:	da0b      	bge.n	800167e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <HAL_FLASH_Unlock+0x38>)
 8001668:	4a09      	ldr	r2, [pc, #36]	@ (8001690 <HAL_FLASH_Unlock+0x3c>)
 800166a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800166c:	4b07      	ldr	r3, [pc, #28]	@ (800168c <HAL_FLASH_Unlock+0x38>)
 800166e:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <HAL_FLASH_Unlock+0x40>)
 8001670:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_FLASH_Unlock+0x38>)
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b00      	cmp	r3, #0
 8001678:	da01      	bge.n	800167e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800167e:	79fb      	ldrb	r3, [r7, #7]
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40023c00 	.word	0x40023c00
 8001690:	45670123 	.word	0x45670123
 8001694:	cdef89ab 	.word	0xcdef89ab

08001698 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_FLASH_Lock+0x1c>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4a04      	ldr	r2, [pc, #16]	@ (80016b4 <HAL_FLASH_Lock+0x1c>)
 80016a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80016a6:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40023c00 	.word	0x40023c00

080016b8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <FLASH_Program_DoubleWord+0x60>)
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	4a13      	ldr	r2, [pc, #76]	@ (8001718 <FLASH_Program_DoubleWord+0x60>)
 80016ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80016d0:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <FLASH_Program_DoubleWord+0x60>)
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	4a10      	ldr	r2, [pc, #64]	@ (8001718 <FLASH_Program_DoubleWord+0x60>)
 80016d6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80016da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001718 <FLASH_Program_DoubleWord+0x60>)
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001718 <FLASH_Program_DoubleWord+0x60>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80016ee:	f3bf 8f6f 	isb	sy
}
 80016f2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80016f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	000a      	movs	r2, r1
 8001702:	2300      	movs	r3, #0
 8001704:	68f9      	ldr	r1, [r7, #12]
 8001706:	3104      	adds	r1, #4
 8001708:	4613      	mov	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40023c00 	.word	0x40023c00

0800171c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001726:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <FLASH_Program_Word+0x40>)
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	4a0c      	ldr	r2, [pc, #48]	@ (800175c <FLASH_Program_Word+0x40>)
 800172c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001730:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <FLASH_Program_Word+0x40>)
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	4a09      	ldr	r2, [pc, #36]	@ (800175c <FLASH_Program_Word+0x40>)
 8001738:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800173c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800173e:	4b07      	ldr	r3, [pc, #28]	@ (800175c <FLASH_Program_Word+0x40>)
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	4a06      	ldr	r2, [pc, #24]	@ (800175c <FLASH_Program_Word+0x40>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	601a      	str	r2, [r3, #0]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40023c00 	.word	0x40023c00

08001760 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800176c:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <FLASH_Program_HalfWord+0x44>)
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	4a0c      	ldr	r2, [pc, #48]	@ (80017a4 <FLASH_Program_HalfWord+0x44>)
 8001772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001776:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001778:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <FLASH_Program_HalfWord+0x44>)
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	4a09      	ldr	r2, [pc, #36]	@ (80017a4 <FLASH_Program_HalfWord+0x44>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001782:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001784:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <FLASH_Program_HalfWord+0x44>)
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	4a06      	ldr	r2, [pc, #24]	@ (80017a4 <FLASH_Program_HalfWord+0x44>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	801a      	strh	r2, [r3, #0]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00

080017a8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <FLASH_Program_Byte+0x40>)
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	4a0b      	ldr	r2, [pc, #44]	@ (80017e8 <FLASH_Program_Byte+0x40>)
 80017ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <FLASH_Program_Byte+0x40>)
 80017c2:	4a09      	ldr	r2, [pc, #36]	@ (80017e8 <FLASH_Program_Byte+0x40>)
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017c8:	4b07      	ldr	r3, [pc, #28]	@ (80017e8 <FLASH_Program_Byte+0x40>)
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	4a06      	ldr	r2, [pc, #24]	@ (80017e8 <FLASH_Program_Byte+0x40>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	78fa      	ldrb	r2, [r7, #3]
 80017d8:	701a      	strb	r2, [r3, #0]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00

080017ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	@ 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	e159      	b.n	8001abc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001808:	2201      	movs	r2, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	429a      	cmp	r2, r3
 8001822:	f040 8148 	bne.w	8001ab6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d005      	beq.n	800183e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800183a:	2b02      	cmp	r3, #2
 800183c:	d130      	bne.n	80018a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 0201 	and.w	r2, r3, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d017      	beq.n	80018dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d123      	bne.n	8001930 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	08da      	lsrs	r2, r3, #3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3208      	adds	r2, #8
 80018f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	220f      	movs	r2, #15
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	08da      	lsrs	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3208      	adds	r2, #8
 800192a:	69b9      	ldr	r1, [r7, #24]
 800192c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0203 	and.w	r2, r3, #3
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a2 	beq.w	8001ab6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b57      	ldr	r3, [pc, #348]	@ (8001ad4 <HAL_GPIO_Init+0x2e8>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	4a56      	ldr	r2, [pc, #344]	@ (8001ad4 <HAL_GPIO_Init+0x2e8>)
 800197c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001980:	6453      	str	r3, [r2, #68]	@ 0x44
 8001982:	4b54      	ldr	r3, [pc, #336]	@ (8001ad4 <HAL_GPIO_Init+0x2e8>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800198e:	4a52      	ldr	r2, [pc, #328]	@ (8001ad8 <HAL_GPIO_Init+0x2ec>)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3302      	adds	r3, #2
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	220f      	movs	r2, #15
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a49      	ldr	r2, [pc, #292]	@ (8001adc <HAL_GPIO_Init+0x2f0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d019      	beq.n	80019ee <HAL_GPIO_Init+0x202>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a48      	ldr	r2, [pc, #288]	@ (8001ae0 <HAL_GPIO_Init+0x2f4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0x1fe>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a47      	ldr	r2, [pc, #284]	@ (8001ae4 <HAL_GPIO_Init+0x2f8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x1fa>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a46      	ldr	r2, [pc, #280]	@ (8001ae8 <HAL_GPIO_Init+0x2fc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x1f6>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a45      	ldr	r2, [pc, #276]	@ (8001aec <HAL_GPIO_Init+0x300>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x1f2>
 80019da:	2304      	movs	r3, #4
 80019dc:	e008      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019de:	2307      	movs	r3, #7
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019e2:	2303      	movs	r3, #3
 80019e4:	e004      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x204>
 80019ee:	2300      	movs	r3, #0
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	f002 0203 	and.w	r2, r2, #3
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a00:	4935      	ldr	r1, [pc, #212]	@ (8001ad8 <HAL_GPIO_Init+0x2ec>)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0e:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a32:	4a2f      	ldr	r2, [pc, #188]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a38:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a5c:	4a24      	ldr	r2, [pc, #144]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a62:	4b23      	ldr	r3, [pc, #140]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a86:	4a1a      	ldr	r2, [pc, #104]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8001af0 <HAL_GPIO_Init+0x304>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	f67f aea2 	bls.w	8001808 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3724      	adds	r7, #36	@ 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40013800 	.word	0x40013800
 8001adc:	40020000 	.word	0x40020000
 8001ae0:	40020400 	.word	0x40020400
 8001ae4:	40020800 	.word	0x40020800
 8001ae8:	40020c00 	.word	0x40020c00
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40013c00 	.word	0x40013c00

08001af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
 8001b00:	4613      	mov	r3, r2
 8001b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b04:	787b      	ldrb	r3, [r7, #1]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b10:	e003      	b.n	8001b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b12:	887b      	ldrh	r3, [r7, #2]
 8001b14:	041a      	lsls	r2, r3, #16
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	619a      	str	r2, [r3, #24]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e12b      	b.n	8001d92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fa1a 	bl	8000f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2224      	movs	r2, #36	@ 0x24
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b8c:	f001 fa20 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8001b90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4a81      	ldr	r2, [pc, #516]	@ (8001d9c <HAL_I2C_Init+0x274>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d807      	bhi.n	8001bac <HAL_I2C_Init+0x84>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4a80      	ldr	r2, [pc, #512]	@ (8001da0 <HAL_I2C_Init+0x278>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	bf94      	ite	ls
 8001ba4:	2301      	movls	r3, #1
 8001ba6:	2300      	movhi	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	e006      	b.n	8001bba <HAL_I2C_Init+0x92>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a7d      	ldr	r2, [pc, #500]	@ (8001da4 <HAL_I2C_Init+0x27c>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	bf94      	ite	ls
 8001bb4:	2301      	movls	r3, #1
 8001bb6:	2300      	movhi	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0e7      	b.n	8001d92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4a78      	ldr	r2, [pc, #480]	@ (8001da8 <HAL_I2C_Init+0x280>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0c9b      	lsrs	r3, r3, #18
 8001bcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4a6a      	ldr	r2, [pc, #424]	@ (8001d9c <HAL_I2C_Init+0x274>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d802      	bhi.n	8001bfc <HAL_I2C_Init+0xd4>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	e009      	b.n	8001c10 <HAL_I2C_Init+0xe8>
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	4a69      	ldr	r2, [pc, #420]	@ (8001dac <HAL_I2C_Init+0x284>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	099b      	lsrs	r3, r3, #6
 8001c0e:	3301      	adds	r3, #1
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	430b      	orrs	r3, r1
 8001c16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	495c      	ldr	r1, [pc, #368]	@ (8001d9c <HAL_I2C_Init+0x274>)
 8001c2c:	428b      	cmp	r3, r1
 8001c2e:	d819      	bhi.n	8001c64 <HAL_I2C_Init+0x13c>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1e59      	subs	r1, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c3e:	1c59      	adds	r1, r3, #1
 8001c40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c44:	400b      	ands	r3, r1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00a      	beq.n	8001c60 <HAL_I2C_Init+0x138>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1e59      	subs	r1, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5e:	e051      	b.n	8001d04 <HAL_I2C_Init+0x1dc>
 8001c60:	2304      	movs	r3, #4
 8001c62:	e04f      	b.n	8001d04 <HAL_I2C_Init+0x1dc>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d111      	bne.n	8001c90 <HAL_I2C_Init+0x168>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1e58      	subs	r0, r3, #1
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	440b      	add	r3, r1
 8001c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf0c      	ite	eq
 8001c88:	2301      	moveq	r3, #1
 8001c8a:	2300      	movne	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	e012      	b.n	8001cb6 <HAL_I2C_Init+0x18e>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1e58      	subs	r0, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	0099      	lsls	r1, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Init+0x196>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e022      	b.n	8001d04 <HAL_I2C_Init+0x1dc>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_I2C_Init+0x1bc>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1e58      	subs	r0, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6859      	ldr	r1, [r3, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	440b      	add	r3, r1
 8001cd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce2:	e00f      	b.n	8001d04 <HAL_I2C_Init+0x1dc>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1e58      	subs	r0, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6859      	ldr	r1, [r3, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	0099      	lsls	r1, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	6809      	ldr	r1, [r1, #0]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69da      	ldr	r2, [r3, #28]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6911      	ldr	r1, [r2, #16]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68d2      	ldr	r2, [r2, #12]
 8001d3e:	4311      	orrs	r1, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	430b      	orrs	r3, r1
 8001d46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695a      	ldr	r2, [r3, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	000186a0 	.word	0x000186a0
 8001da0:	001e847f 	.word	0x001e847f
 8001da4:	003d08ff 	.word	0x003d08ff
 8001da8:	431bde83 	.word	0x431bde83
 8001dac:	10624dd3 	.word	0x10624dd3

08001db0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e128      	b.n	8002014 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a90      	ldr	r2, [pc, #576]	@ (800201c <HAL_I2S_Init+0x26c>)
 8001dda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff f91b 	bl	8001018 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001df8:	f023 030f 	bic.w	r3, r3, #15
 8001dfc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2202      	movs	r2, #2
 8001e04:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d060      	beq.n	8001ed0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001e16:	2310      	movs	r3, #16
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e001      	b.n	8001e20 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d802      	bhi.n	8001e2e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f001 f9d2 	bl	80031d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e34:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e3e:	d125      	bne.n	8001e8c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d010      	beq.n	8001e6a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	3305      	adds	r3, #5
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	e01f      	b.n	8001eaa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	3305      	adds	r3, #5
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	e00e      	b.n	8001eaa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea6:	3305      	adds	r3, #5
 8001ea8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4a5c      	ldr	r2, [pc, #368]	@ (8002020 <HAL_I2S_Init+0x270>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	08db      	lsrs	r3, r3, #3
 8001eb4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	085b      	lsrs	r3, r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	e003      	b.n	8001ed8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d902      	bls.n	8001ee4 <HAL_I2S_Init+0x134>
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	2bff      	cmp	r3, #255	@ 0xff
 8001ee2:	d907      	bls.n	8001ef4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee8:	f043 0210 	orr.w	r2, r3, #16
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e08f      	b.n	8002014 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	ea42 0103 	orr.w	r1, r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001f12:	f023 030f 	bic.w	r3, r3, #15
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6851      	ldr	r1, [r2, #4]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6892      	ldr	r2, [r2, #8]
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	68d2      	ldr	r2, [r2, #12]
 8001f24:	4311      	orrs	r1, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6992      	ldr	r2, [r2, #24]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f36:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d161      	bne.n	8002004 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a38      	ldr	r2, [pc, #224]	@ (8002024 <HAL_I2S_Init+0x274>)
 8001f44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a37      	ldr	r2, [pc, #220]	@ (8002028 <HAL_I2S_Init+0x278>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d101      	bne.n	8001f54 <HAL_I2S_Init+0x1a4>
 8001f50:	4b36      	ldr	r3, [pc, #216]	@ (800202c <HAL_I2S_Init+0x27c>)
 8001f52:	e001      	b.n	8001f58 <HAL_I2S_Init+0x1a8>
 8001f54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	4932      	ldr	r1, [pc, #200]	@ (8002028 <HAL_I2S_Init+0x278>)
 8001f60:	428a      	cmp	r2, r1
 8001f62:	d101      	bne.n	8001f68 <HAL_I2S_Init+0x1b8>
 8001f64:	4a31      	ldr	r2, [pc, #196]	@ (800202c <HAL_I2S_Init+0x27c>)
 8001f66:	e001      	b.n	8001f6c <HAL_I2S_Init+0x1bc>
 8001f68:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001f6c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001f70:	f023 030f 	bic.w	r3, r3, #15
 8001f74:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002028 <HAL_I2S_Init+0x278>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d101      	bne.n	8001f84 <HAL_I2S_Init+0x1d4>
 8001f80:	4b2a      	ldr	r3, [pc, #168]	@ (800202c <HAL_I2S_Init+0x27c>)
 8001f82:	e001      	b.n	8001f88 <HAL_I2S_Init+0x1d8>
 8001f84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f88:	2202      	movs	r2, #2
 8001f8a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a25      	ldr	r2, [pc, #148]	@ (8002028 <HAL_I2S_Init+0x278>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_I2S_Init+0x1ea>
 8001f96:	4b25      	ldr	r3, [pc, #148]	@ (800202c <HAL_I2S_Init+0x27c>)
 8001f98:	e001      	b.n	8001f9e <HAL_I2S_Init+0x1ee>
 8001f9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001faa:	d003      	beq.n	8001fb4 <HAL_I2S_Init+0x204>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d103      	bne.n	8001fbc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001fb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	e001      	b.n	8001fc0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	897b      	ldrh	r3, [r7, #10]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8002028 <HAL_I2S_Init+0x278>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_I2S_Init+0x24c>
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <HAL_I2S_Init+0x27c>)
 8001ffa:	e001      	b.n	8002000 <HAL_I2S_Init+0x250>
 8001ffc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002000:	897a      	ldrh	r2, [r7, #10]
 8002002:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	08002127 	.word	0x08002127
 8002020:	cccccccd 	.word	0xcccccccd
 8002024:	0800223d 	.word	0x0800223d
 8002028:	40003800 	.word	0x40003800
 800202c:	40003400 	.word	0x40003400

08002030 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	881a      	ldrh	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	1c9a      	adds	r2, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10e      	bne.n	80020c0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80020b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffb8 	bl	8002030 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020da:	b292      	uxth	r2, r2
 80020dc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e2:	1c9a      	adds	r2, r3, #2
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10e      	bne.n	800211e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800210e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ff93 	bl	8002044 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b04      	cmp	r3, #4
 8002140:	d13a      	bne.n	80021b8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d109      	bne.n	8002160 <I2S_IRQHandler+0x3a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002156:	2b40      	cmp	r3, #64	@ 0x40
 8002158:	d102      	bne.n	8002160 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ffb4 	bl	80020c8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002166:	2b40      	cmp	r3, #64	@ 0x40
 8002168:	d126      	bne.n	80021b8 <I2S_IRQHandler+0x92>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b20      	cmp	r3, #32
 8002176:	d11f      	bne.n	80021b8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002186:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	f043 0202 	orr.w	r2, r3, #2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ff50 	bl	8002058 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d136      	bne.n	8002232 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d109      	bne.n	80021e2 <I2S_IRQHandler+0xbc>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d8:	2b80      	cmp	r3, #128	@ 0x80
 80021da:	d102      	bne.n	80021e2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff45 	bl	800206c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d122      	bne.n	8002232 <I2S_IRQHandler+0x10c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d11b      	bne.n	8002232 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002208:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002224:	f043 0204 	orr.w	r2, r3, #4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ff13 	bl	8002058 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a92      	ldr	r2, [pc, #584]	@ (800249c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002256:	4b92      	ldr	r3, [pc, #584]	@ (80024a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002258:	e001      	b.n	800225e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800225a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a8b      	ldr	r2, [pc, #556]	@ (800249c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002274:	4b8a      	ldr	r3, [pc, #552]	@ (80024a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002276:	e001      	b.n	800227c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002278:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002288:	d004      	beq.n	8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 8099 	bne.w	80023c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b02      	cmp	r3, #2
 800229c:	d107      	bne.n	80022ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f925 	bl	80024f8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d107      	bne.n	80022c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f9c8 	bl	8002658 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ce:	2b40      	cmp	r3, #64	@ 0x40
 80022d0:	d13a      	bne.n	8002348 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d035      	beq.n	8002348 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a6e      	ldr	r2, [pc, #440]	@ (800249c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d101      	bne.n	80022ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80022e6:	4b6e      	ldr	r3, [pc, #440]	@ (80024a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022e8:	e001      	b.n	80022ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80022ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4969      	ldr	r1, [pc, #420]	@ (800249c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022f6:	428b      	cmp	r3, r1
 80022f8:	d101      	bne.n	80022fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80022fa:	4b69      	ldr	r3, [pc, #420]	@ (80024a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022fc:	e001      	b.n	8002302 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80022fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002302:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002306:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002316:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	f043 0202 	orr.w	r2, r3, #2
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fe88 	bl	8002058 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b08      	cmp	r3, #8
 8002350:	f040 80c3 	bne.w	80024da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80bd 	beq.w	80024da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800236e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a49      	ldr	r2, [pc, #292]	@ (800249c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800237a:	4b49      	ldr	r3, [pc, #292]	@ (80024a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800237c:	e001      	b.n	8002382 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800237e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4944      	ldr	r1, [pc, #272]	@ (800249c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800238a:	428b      	cmp	r3, r1
 800238c:	d101      	bne.n	8002392 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800238e:	4b44      	ldr	r3, [pc, #272]	@ (80024a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002390:	e001      	b.n	8002396 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002392:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002396:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800239a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	f043 0204 	orr.w	r2, r3, #4
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff fe4a 	bl	8002058 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023c4:	e089      	b.n	80024da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d107      	bne.n	80023e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f8be 	bl	800255c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f8fd 	bl	80025f4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002400:	2b40      	cmp	r3, #64	@ 0x40
 8002402:	d12f      	bne.n	8002464 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	d02a      	beq.n	8002464 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800241c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a1e      	ldr	r2, [pc, #120]	@ (800249c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002428:	4b1d      	ldr	r3, [pc, #116]	@ (80024a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800242a:	e001      	b.n	8002430 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800242c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4919      	ldr	r1, [pc, #100]	@ (800249c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002438:	428b      	cmp	r3, r1
 800243a:	d101      	bne.n	8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800243c:	4b18      	ldr	r3, [pc, #96]	@ (80024a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800243e:	e001      	b.n	8002444 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002440:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002444:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002448:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	f043 0202 	orr.w	r2, r3, #2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff fdfa 	bl	8002058 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b08      	cmp	r3, #8
 800246c:	d136      	bne.n	80024dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b00      	cmp	r3, #0
 8002476:	d031      	beq.n	80024dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a07      	ldr	r2, [pc, #28]	@ (800249c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002482:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002484:	e001      	b.n	800248a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002486:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4902      	ldr	r1, [pc, #8]	@ (800249c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002492:	428b      	cmp	r3, r1
 8002494:	d106      	bne.n	80024a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002496:	4b02      	ldr	r3, [pc, #8]	@ (80024a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002498:	e006      	b.n	80024a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800249a:	bf00      	nop
 800249c:	40003800 	.word	0x40003800
 80024a0:	40003400 	.word	0x40003400
 80024a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80024ac:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80024bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	f043 0204 	orr.w	r2, r3, #4
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff fdc0 	bl	8002058 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024d8:	e000      	b.n	80024dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024da:	bf00      	nop
}
 80024dc:	bf00      	nop
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	1c99      	adds	r1, r3, #2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6251      	str	r1, [r2, #36]	@ 0x24
 800250a:	881a      	ldrh	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002516:	b29b      	uxth	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d113      	bne.n	8002552 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002538:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ffc9 	bl	80024e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	1c99      	adds	r1, r3, #2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6251      	str	r1, [r2, #36]	@ 0x24
 800256e:	8819      	ldrh	r1, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1d      	ldr	r2, [pc, #116]	@ (80025ec <I2SEx_TxISR_I2SExt+0x90>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <I2SEx_TxISR_I2SExt+0x22>
 800257a:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <I2SEx_TxISR_I2SExt+0x94>)
 800257c:	e001      	b.n	8002582 <I2SEx_TxISR_I2SExt+0x26>
 800257e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002582:	460a      	mov	r2, r1
 8002584:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d121      	bne.n	80025e2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a12      	ldr	r2, [pc, #72]	@ (80025ec <I2SEx_TxISR_I2SExt+0x90>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d101      	bne.n	80025ac <I2SEx_TxISR_I2SExt+0x50>
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <I2SEx_TxISR_I2SExt+0x94>)
 80025aa:	e001      	b.n	80025b0 <I2SEx_TxISR_I2SExt+0x54>
 80025ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	490d      	ldr	r1, [pc, #52]	@ (80025ec <I2SEx_TxISR_I2SExt+0x90>)
 80025b8:	428b      	cmp	r3, r1
 80025ba:	d101      	bne.n	80025c0 <I2SEx_TxISR_I2SExt+0x64>
 80025bc:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <I2SEx_TxISR_I2SExt+0x94>)
 80025be:	e001      	b.n	80025c4 <I2SEx_TxISR_I2SExt+0x68>
 80025c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80025c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80025c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d106      	bne.n	80025e2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff81 	bl	80024e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40003800 	.word	0x40003800
 80025f0:	40003400 	.word	0x40003400

080025f4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68d8      	ldr	r0, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002606:	1c99      	adds	r1, r3, #2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800260c:	b282      	uxth	r2, r0
 800260e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d113      	bne.n	8002650 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002636:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ff4a 	bl	80024e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a20      	ldr	r2, [pc, #128]	@ (80026e8 <I2SEx_RxISR_I2SExt+0x90>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <I2SEx_RxISR_I2SExt+0x16>
 800266a:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <I2SEx_RxISR_I2SExt+0x94>)
 800266c:	e001      	b.n	8002672 <I2SEx_RxISR_I2SExt+0x1a>
 800266e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002672:	68d8      	ldr	r0, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002678:	1c99      	adds	r1, r3, #2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800267e:	b282      	uxth	r2, r0
 8002680:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d121      	bne.n	80026de <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a12      	ldr	r2, [pc, #72]	@ (80026e8 <I2SEx_RxISR_I2SExt+0x90>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d101      	bne.n	80026a8 <I2SEx_RxISR_I2SExt+0x50>
 80026a4:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <I2SEx_RxISR_I2SExt+0x94>)
 80026a6:	e001      	b.n	80026ac <I2SEx_RxISR_I2SExt+0x54>
 80026a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	490d      	ldr	r1, [pc, #52]	@ (80026e8 <I2SEx_RxISR_I2SExt+0x90>)
 80026b4:	428b      	cmp	r3, r1
 80026b6:	d101      	bne.n	80026bc <I2SEx_RxISR_I2SExt+0x64>
 80026b8:	4b0c      	ldr	r3, [pc, #48]	@ (80026ec <I2SEx_RxISR_I2SExt+0x94>)
 80026ba:	e001      	b.n	80026c0 <I2SEx_RxISR_I2SExt+0x68>
 80026bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80026c4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d106      	bne.n	80026de <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff03 	bl	80024e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40003800 	.word	0x40003800
 80026ec:	40003400 	.word	0x40003400

080026f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e267      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d075      	beq.n	80027fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800270e:	4b88      	ldr	r3, [pc, #544]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b04      	cmp	r3, #4
 8002718:	d00c      	beq.n	8002734 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271a:	4b85      	ldr	r3, [pc, #532]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002722:	2b08      	cmp	r3, #8
 8002724:	d112      	bne.n	800274c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002726:	4b82      	ldr	r3, [pc, #520]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800272e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002732:	d10b      	bne.n	800274c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	4b7e      	ldr	r3, [pc, #504]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d05b      	beq.n	80027f8 <HAL_RCC_OscConfig+0x108>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d157      	bne.n	80027f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e242      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002754:	d106      	bne.n	8002764 <HAL_RCC_OscConfig+0x74>
 8002756:	4b76      	ldr	r3, [pc, #472]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a75      	ldr	r2, [pc, #468]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e01d      	b.n	80027a0 <HAL_RCC_OscConfig+0xb0>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x98>
 800276e:	4b70      	ldr	r3, [pc, #448]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6f      	ldr	r2, [pc, #444]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002774:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b6d      	ldr	r3, [pc, #436]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a6c      	ldr	r2, [pc, #432]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e00b      	b.n	80027a0 <HAL_RCC_OscConfig+0xb0>
 8002788:	4b69      	ldr	r3, [pc, #420]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a68      	ldr	r2, [pc, #416]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800278e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b66      	ldr	r3, [pc, #408]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a65      	ldr	r2, [pc, #404]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800279a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800279e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe fe1e 	bl	80013e8 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b0:	f7fe fe1a 	bl	80013e8 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	@ 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e207      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0xc0>
 80027ce:	e014      	b.n	80027fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fe0a 	bl	80013e8 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fe06 	bl	80013e8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	@ 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e1f3      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	4b51      	ldr	r3, [pc, #324]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0xe8>
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d063      	beq.n	80028ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002806:	4b4a      	ldr	r3, [pc, #296]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00b      	beq.n	800282a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002812:	4b47      	ldr	r3, [pc, #284]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800281a:	2b08      	cmp	r3, #8
 800281c:	d11c      	bne.n	8002858 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800281e:	4b44      	ldr	r3, [pc, #272]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d116      	bne.n	8002858 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	4b41      	ldr	r3, [pc, #260]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_RCC_OscConfig+0x152>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d001      	beq.n	8002842 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e1c7      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002842:	4b3b      	ldr	r3, [pc, #236]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4937      	ldr	r1, [pc, #220]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002856:	e03a      	b.n	80028ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002860:	4b34      	ldr	r3, [pc, #208]	@ (8002934 <HAL_RCC_OscConfig+0x244>)
 8002862:	2201      	movs	r2, #1
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7fe fdbf 	bl	80013e8 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286e:	f7fe fdbb 	bl	80013e8 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e1a8      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	4b2b      	ldr	r3, [pc, #172]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f0      	beq.n	800286e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288c:	4b28      	ldr	r3, [pc, #160]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4925      	ldr	r1, [pc, #148]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 800289c:	4313      	orrs	r3, r2
 800289e:	600b      	str	r3, [r1, #0]
 80028a0:	e015      	b.n	80028ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028a2:	4b24      	ldr	r3, [pc, #144]	@ (8002934 <HAL_RCC_OscConfig+0x244>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe fd9e 	bl	80013e8 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b0:	f7fe fd9a 	bl	80013e8 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e187      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d036      	beq.n	8002948 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e2:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <HAL_RCC_OscConfig+0x248>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7fe fd7e 	bl	80013e8 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f0:	f7fe fd7a 	bl	80013e8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e167      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <HAL_RCC_OscConfig+0x240>)
 8002904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x200>
 800290e:	e01b      	b.n	8002948 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002910:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <HAL_RCC_OscConfig+0x248>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002916:	f7fe fd67 	bl	80013e8 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800291c:	e00e      	b.n	800293c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291e:	f7fe fd63 	bl	80013e8 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d907      	bls.n	800293c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e150      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
 8002930:	40023800 	.word	0x40023800
 8002934:	42470000 	.word	0x42470000
 8002938:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293c:	4b88      	ldr	r3, [pc, #544]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 800293e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ea      	bne.n	800291e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8097 	beq.w	8002a84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295a:	4b81      	ldr	r3, [pc, #516]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10f      	bne.n	8002986 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	4b7d      	ldr	r3, [pc, #500]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	4a7c      	ldr	r2, [pc, #496]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002974:	6413      	str	r3, [r2, #64]	@ 0x40
 8002976:	4b7a      	ldr	r3, [pc, #488]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002982:	2301      	movs	r3, #1
 8002984:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002986:	4b77      	ldr	r3, [pc, #476]	@ (8002b64 <HAL_RCC_OscConfig+0x474>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d118      	bne.n	80029c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002992:	4b74      	ldr	r3, [pc, #464]	@ (8002b64 <HAL_RCC_OscConfig+0x474>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a73      	ldr	r2, [pc, #460]	@ (8002b64 <HAL_RCC_OscConfig+0x474>)
 8002998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800299c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299e:	f7fe fd23 	bl	80013e8 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a6:	f7fe fd1f 	bl	80013e8 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e10c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002b64 <HAL_RCC_OscConfig+0x474>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d106      	bne.n	80029da <HAL_RCC_OscConfig+0x2ea>
 80029cc:	4b64      	ldr	r3, [pc, #400]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d0:	4a63      	ldr	r2, [pc, #396]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d8:	e01c      	b.n	8002a14 <HAL_RCC_OscConfig+0x324>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b05      	cmp	r3, #5
 80029e0:	d10c      	bne.n	80029fc <HAL_RCC_OscConfig+0x30c>
 80029e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 80029f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fa:	e00b      	b.n	8002a14 <HAL_RCC_OscConfig+0x324>
 80029fc:	4b58      	ldr	r3, [pc, #352]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a00:	4a57      	ldr	r2, [pc, #348]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a08:	4b55      	ldr	r3, [pc, #340]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0c:	4a54      	ldr	r2, [pc, #336]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	f023 0304 	bic.w	r3, r3, #4
 8002a12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d015      	beq.n	8002a48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fce4 	bl	80013e8 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a24:	f7fe fce0 	bl	80013e8 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e0cb      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3a:	4b49      	ldr	r3, [pc, #292]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0ee      	beq.n	8002a24 <HAL_RCC_OscConfig+0x334>
 8002a46:	e014      	b.n	8002a72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a48:	f7fe fcce 	bl	80013e8 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a50:	f7fe fcca 	bl	80013e8 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e0b5      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a66:	4b3e      	ldr	r3, [pc, #248]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1ee      	bne.n	8002a50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d105      	bne.n	8002a84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a78:	4b39      	ldr	r3, [pc, #228]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	4a38      	ldr	r2, [pc, #224]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80a1 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a8e:	4b34      	ldr	r3, [pc, #208]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d05c      	beq.n	8002b54 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d141      	bne.n	8002b26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b31      	ldr	r3, [pc, #196]	@ (8002b68 <HAL_RCC_OscConfig+0x478>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fc9e 	bl	80013e8 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fc9a 	bl	80013e8 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e087      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac2:	4b27      	ldr	r3, [pc, #156]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69da      	ldr	r2, [r3, #28]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	019b      	lsls	r3, r3, #6
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	085b      	lsrs	r3, r3, #1
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	041b      	lsls	r3, r3, #16
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	491b      	ldr	r1, [pc, #108]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b68 <HAL_RCC_OscConfig+0x478>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afe:	f7fe fc73 	bl	80013e8 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b06:	f7fe fc6f 	bl	80013e8 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e05c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x416>
 8002b24:	e054      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b26:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <HAL_RCC_OscConfig+0x478>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fc5c 	bl	80013e8 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe fc58 	bl	80013e8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e045      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b46:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <HAL_RCC_OscConfig+0x470>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x444>
 8002b52:	e03d      	b.n	8002bd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d107      	bne.n	8002b6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e038      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40007000 	.word	0x40007000
 8002b68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bdc <HAL_RCC_OscConfig+0x4ec>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d028      	beq.n	8002bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d121      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d11a      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ba2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d111      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	085b      	lsrs	r3, r3, #1
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d107      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800

08002be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0cc      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bf4:	4b68      	ldr	r3, [pc, #416]	@ (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d90c      	bls.n	8002c1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c02:	4b65      	ldr	r3, [pc, #404]	@ (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	4b63      	ldr	r3, [pc, #396]	@ (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0b8      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d020      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c34:	4b59      	ldr	r3, [pc, #356]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4a58      	ldr	r2, [pc, #352]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c4c:	4b53      	ldr	r3, [pc, #332]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4a52      	ldr	r2, [pc, #328]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c58:	4b50      	ldr	r3, [pc, #320]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	494d      	ldr	r1, [pc, #308]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d044      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	4b47      	ldr	r3, [pc, #284]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d119      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e07f      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d003      	beq.n	8002c9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d107      	bne.n	8002cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e06f      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cae:	4b3b      	ldr	r3, [pc, #236]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e067      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cbe:	4b37      	ldr	r3, [pc, #220]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f023 0203 	bic.w	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4934      	ldr	r1, [pc, #208]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd0:	f7fe fb8a 	bl	80013e8 <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd8:	f7fe fb86 	bl	80013e8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e04f      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cee:	4b2b      	ldr	r3, [pc, #172]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 020c 	and.w	r2, r3, #12
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d1eb      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d00:	4b25      	ldr	r3, [pc, #148]	@ (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d20c      	bcs.n	8002d28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0e:	4b22      	ldr	r3, [pc, #136]	@ (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b20      	ldr	r3, [pc, #128]	@ (8002d98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e032      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d34:	4b19      	ldr	r3, [pc, #100]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4916      	ldr	r1, [pc, #88]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d52:	4b12      	ldr	r3, [pc, #72]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	490e      	ldr	r1, [pc, #56]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d66:	f000 f821 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	490a      	ldr	r1, [pc, #40]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d78:	5ccb      	ldrb	r3, [r1, r3]
 8002d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7e:	4a09      	ldr	r2, [pc, #36]	@ (8002da4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d82:	4b09      	ldr	r3, [pc, #36]	@ (8002da8 <HAL_RCC_ClockConfig+0x1c8>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe faea 	bl	8001360 <HAL_InitTick>

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023c00 	.word	0x40023c00
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	08003420 	.word	0x08003420
 8002da4:	2000001c 	.word	0x2000001c
 8002da8:	20000020 	.word	0x20000020

08002dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db0:	b094      	sub	sp, #80	@ 0x50
 8002db2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dc4:	4b79      	ldr	r3, [pc, #484]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 030c 	and.w	r3, r3, #12
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d00d      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0x40>
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	f200 80e1 	bhi.w	8002f98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x34>
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d003      	beq.n	8002de6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dde:	e0db      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002de0:	4b73      	ldr	r3, [pc, #460]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002de2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002de4:	e0db      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002de6:	4b73      	ldr	r3, [pc, #460]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002de8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dea:	e0d8      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dec:	4b6f      	ldr	r3, [pc, #444]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x200>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002df4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002df6:	4b6d      	ldr	r3, [pc, #436]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x200>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d063      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e02:	4b6a      	ldr	r3, [pc, #424]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x200>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	099b      	lsrs	r3, r3, #6
 8002e08:	2200      	movs	r2, #0
 8002e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e16:	2300      	movs	r3, #0
 8002e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e1e:	4622      	mov	r2, r4
 8002e20:	462b      	mov	r3, r5
 8002e22:	f04f 0000 	mov.w	r0, #0
 8002e26:	f04f 0100 	mov.w	r1, #0
 8002e2a:	0159      	lsls	r1, r3, #5
 8002e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e30:	0150      	lsls	r0, r2, #5
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4621      	mov	r1, r4
 8002e38:	1a51      	subs	r1, r2, r1
 8002e3a:	6139      	str	r1, [r7, #16]
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e50:	4659      	mov	r1, fp
 8002e52:	018b      	lsls	r3, r1, #6
 8002e54:	4651      	mov	r1, sl
 8002e56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e5a:	4651      	mov	r1, sl
 8002e5c:	018a      	lsls	r2, r1, #6
 8002e5e:	4651      	mov	r1, sl
 8002e60:	ebb2 0801 	subs.w	r8, r2, r1
 8002e64:	4659      	mov	r1, fp
 8002e66:	eb63 0901 	sbc.w	r9, r3, r1
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e7e:	4690      	mov	r8, r2
 8002e80:	4699      	mov	r9, r3
 8002e82:	4623      	mov	r3, r4
 8002e84:	eb18 0303 	adds.w	r3, r8, r3
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	462b      	mov	r3, r5
 8002e8c:	eb49 0303 	adc.w	r3, r9, r3
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	024b      	lsls	r3, r1, #9
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	024a      	lsls	r2, r1, #9
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ebc:	f7fd f98c 	bl	80001d8 <__aeabi_uldivmod>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ec8:	e058      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eca:	4b38      	ldr	r3, [pc, #224]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eda:	623b      	str	r3, [r7, #32]
 8002edc:	2300      	movs	r3, #0
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ee4:	4642      	mov	r2, r8
 8002ee6:	464b      	mov	r3, r9
 8002ee8:	f04f 0000 	mov.w	r0, #0
 8002eec:	f04f 0100 	mov.w	r1, #0
 8002ef0:	0159      	lsls	r1, r3, #5
 8002ef2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef6:	0150      	lsls	r0, r2, #5
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4641      	mov	r1, r8
 8002efe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f02:	4649      	mov	r1, r9
 8002f04:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f20:	eb63 050b 	sbc.w	r5, r3, fp
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	00eb      	lsls	r3, r5, #3
 8002f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f32:	00e2      	lsls	r2, r4, #3
 8002f34:	4614      	mov	r4, r2
 8002f36:	461d      	mov	r5, r3
 8002f38:	4643      	mov	r3, r8
 8002f3a:	18e3      	adds	r3, r4, r3
 8002f3c:	603b      	str	r3, [r7, #0]
 8002f3e:	464b      	mov	r3, r9
 8002f40:	eb45 0303 	adc.w	r3, r5, r3
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f52:	4629      	mov	r1, r5
 8002f54:	028b      	lsls	r3, r1, #10
 8002f56:	4621      	mov	r1, r4
 8002f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	028a      	lsls	r2, r1, #10
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f66:	2200      	movs	r2, #0
 8002f68:	61bb      	str	r3, [r7, #24]
 8002f6a:	61fa      	str	r2, [r7, #28]
 8002f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f70:	f7fd f932 	bl	80001d8 <__aeabi_uldivmod>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4613      	mov	r3, r2
 8002f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	3301      	adds	r3, #1
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f96:	e002      	b.n	8002f9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f98:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3750      	adds	r7, #80	@ 0x50
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	00f42400 	.word	0x00f42400
 8002fb4:	007a1200 	.word	0x007a1200

08002fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fbc:	4b03      	ldr	r3, [pc, #12]	@ (8002fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	2000001c 	.word	0x2000001c

08002fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fd4:	f7ff fff0 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	0a9b      	lsrs	r3, r3, #10
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	4903      	ldr	r1, [pc, #12]	@ (8002ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe6:	5ccb      	ldrb	r3, [r1, r3]
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	08003430 	.word	0x08003430

08002ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800301c:	2b00      	cmp	r3, #0
 800301e:	d038      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003020:	4b68      	ldr	r3, [pc, #416]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003026:	f7fe f9df 	bl	80013e8 <HAL_GetTick>
 800302a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800302e:	f7fe f9db 	bl	80013e8 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e0bd      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003040:	4b61      	ldr	r3, [pc, #388]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f0      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	019b      	lsls	r3, r3, #6
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	071b      	lsls	r3, r3, #28
 800305e:	495a      	ldr	r1, [pc, #360]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003066:	4b57      	ldr	r3, [pc, #348]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800306c:	f7fe f9bc 	bl	80013e8 <HAL_GetTick>
 8003070:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003074:	f7fe f9b8 	bl	80013e8 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e09a      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003086:	4b50      	ldr	r3, [pc, #320]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 8083 	beq.w	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	4b48      	ldr	r3, [pc, #288]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	4a47      	ldr	r2, [pc, #284]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b0:	4b45      	ldr	r3, [pc, #276]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80030bc:	4b43      	ldr	r3, [pc, #268]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a42      	ldr	r2, [pc, #264]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030c8:	f7fe f98e 	bl	80013e8 <HAL_GetTick>
 80030cc:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d0:	f7fe f98a 	bl	80013e8 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e06c      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80030e2:	4b3a      	ldr	r3, [pc, #232]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030ee:	4b36      	ldr	r3, [pc, #216]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030f6:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d02f      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	429a      	cmp	r2, r3
 800310a:	d028      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800310c:	4b2e      	ldr	r3, [pc, #184]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003114:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003116:	4b2e      	ldr	r3, [pc, #184]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800311c:	4b2c      	ldr	r3, [pc, #176]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003122:	4a29      	ldr	r2, [pc, #164]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003128:	4b27      	ldr	r3, [pc, #156]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d114      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003134:	f7fe f958 	bl	80013e8 <HAL_GetTick>
 8003138:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313a:	e00a      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313c:	f7fe f954 	bl	80013e8 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e034      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003152:	4b1d      	ldr	r3, [pc, #116]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0ee      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003166:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800316a:	d10d      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800316c:	4b16      	ldr	r3, [pc, #88]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800317c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003180:	4911      	ldr	r1, [pc, #68]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
 8003186:	e005      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003188:	4b0f      	ldr	r3, [pc, #60]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4a0e      	ldr	r2, [pc, #56]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003192:	6093      	str	r3, [r2, #8]
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003196:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a0:	4909      	ldr	r1, [pc, #36]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7d1a      	ldrb	r2, [r3, #20]
 80031b6:	4b07      	ldr	r3, [pc, #28]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80031b8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3718      	adds	r7, #24
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	42470068 	.word	0x42470068
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40007000 	.word	0x40007000
 80031d0:	42470e40 	.word	0x42470e40
 80031d4:	424711e0 	.word	0x424711e0

080031d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d141      	bne.n	800327a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80031f6:	4b25      	ldr	r3, [pc, #148]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031fe:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d006      	beq.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800320c:	d131      	bne.n	8003272 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800320e:	4b20      	ldr	r3, [pc, #128]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003210:	617b      	str	r3, [r7, #20]
          break;
 8003212:	e031      	b.n	8003278 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003214:	4b1d      	ldr	r3, [pc, #116]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003220:	d109      	bne.n	8003236 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003222:	4b1a      	ldr	r3, [pc, #104]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003224:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003228:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800322c:	4a19      	ldr	r2, [pc, #100]	@ (8003294 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	e008      	b.n	8003248 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003236:	4b15      	ldr	r3, [pc, #84]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800323c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003240:	4a15      	ldr	r2, [pc, #84]	@ (8003298 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8003242:	fbb2 f3f3 	udiv	r3, r2, r3
 8003246:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003248:	4b10      	ldr	r3, [pc, #64]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800324a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800324e:	099b      	lsrs	r3, r3, #6
 8003250:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800325e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003262:	0f1b      	lsrs	r3, r3, #28
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	617b      	str	r3, [r7, #20]
          break;
 8003270:	e002      	b.n	8003278 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
          break;
 8003276:	bf00      	nop
        }
      }
      break;
 8003278:	e000      	b.n	800327c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 800327a:	bf00      	nop
    }
  }
  return frequency;
 800327c:	697b      	ldr	r3, [r7, #20]
}
 800327e:	4618      	mov	r0, r3
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	00bb8000 	.word	0x00bb8000
 8003294:	007a1200 	.word	0x007a1200
 8003298:	00f42400 	.word	0x00f42400

0800329c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e07b      	b.n	80033a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d108      	bne.n	80032c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032be:	d009      	beq.n	80032d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	61da      	str	r2, [r3, #28]
 80032c6:	e005      	b.n	80032d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd ff60 	bl	80011b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800330a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003358:	ea42 0103 	orr.w	r1, r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	f003 0104 	and.w	r1, r3, #4
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337a:	f003 0210 	and.w	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003394:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <memset>:
 80033ae:	4402      	add	r2, r0
 80033b0:	4603      	mov	r3, r0
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d100      	bne.n	80033b8 <memset+0xa>
 80033b6:	4770      	bx	lr
 80033b8:	f803 1b01 	strb.w	r1, [r3], #1
 80033bc:	e7f9      	b.n	80033b2 <memset+0x4>
	...

080033c0 <__libc_init_array>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	4d0d      	ldr	r5, [pc, #52]	@ (80033f8 <__libc_init_array+0x38>)
 80033c4:	4c0d      	ldr	r4, [pc, #52]	@ (80033fc <__libc_init_array+0x3c>)
 80033c6:	1b64      	subs	r4, r4, r5
 80033c8:	10a4      	asrs	r4, r4, #2
 80033ca:	2600      	movs	r6, #0
 80033cc:	42a6      	cmp	r6, r4
 80033ce:	d109      	bne.n	80033e4 <__libc_init_array+0x24>
 80033d0:	4d0b      	ldr	r5, [pc, #44]	@ (8003400 <__libc_init_array+0x40>)
 80033d2:	4c0c      	ldr	r4, [pc, #48]	@ (8003404 <__libc_init_array+0x44>)
 80033d4:	f000 f818 	bl	8003408 <_init>
 80033d8:	1b64      	subs	r4, r4, r5
 80033da:	10a4      	asrs	r4, r4, #2
 80033dc:	2600      	movs	r6, #0
 80033de:	42a6      	cmp	r6, r4
 80033e0:	d105      	bne.n	80033ee <__libc_init_array+0x2e>
 80033e2:	bd70      	pop	{r4, r5, r6, pc}
 80033e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e8:	4798      	blx	r3
 80033ea:	3601      	adds	r6, #1
 80033ec:	e7ee      	b.n	80033cc <__libc_init_array+0xc>
 80033ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f2:	4798      	blx	r3
 80033f4:	3601      	adds	r6, #1
 80033f6:	e7f2      	b.n	80033de <__libc_init_array+0x1e>
 80033f8:	08003440 	.word	0x08003440
 80033fc:	08003440 	.word	0x08003440
 8003400:	08003440 	.word	0x08003440
 8003404:	08003444 	.word	0x08003444

08003408 <_init>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	bf00      	nop
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr

08003414 <_fini>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	bf00      	nop
 8003418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341a:	bc08      	pop	{r3}
 800341c:	469e      	mov	lr, r3
 800341e:	4770      	bx	lr
