
part2_filter_kernel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003da8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003f48  08003f48  00004f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb0  08003fb0  00005080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003fb0  08003fb0  00004fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fb8  08003fb8  00005080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb8  08003fb8  00004fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fbc  08003fbc  00004fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08003fc0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000080  08004040  00005080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08004040  0000532c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3c6  00000000  00000000  000050b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f66  00000000  00000000  00010476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  000123e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008fa  00000000  00000000  00012f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001729f  00000000  00000000  0001388a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2d2  00000000  00000000  0002ab29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b9c0  00000000  00000000  00039dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c57bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b8  00000000  00000000  000c5800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000c8fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003f30 	.word	0x08003f30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08003f30 	.word	0x08003f30

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d013      	beq.n	80005ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00b      	beq.n	80005ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	e000      	b.n	80005d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f9      	beq.n	80005d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fe2e 	bl	8001260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f818 	bl	8000638 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000608:	f000 f87e 	bl	8000708 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f95e 	bl	80008cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000610:	f000 f89a 	bl	8000748 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000614:	f000 f8c6 	bl	80007a4 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000618:	f000 f8f2 	bl	8000800 <MX_I2S3_Init>
  MX_SPI1_Init();
 800061c:	f000 f920 	bl	8000860 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_SuspendTick();

  #ifdef OPTIMIZED
  ITM_Port32(30) = 1;
 8000620:	4b04      	ldr	r3, [pc, #16]	@ (8000634 <main+0x38>)
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
  unrolled_image_filter();
 8000626:	f000 fa49 	bl	8000abc <unrolled_image_filter>
  //optimized_image_filter();
  ITM_Port32(30) = 2;
 800062a:	4b02      	ldr	r3, [pc, #8]	@ (8000634 <main+0x38>)
 800062c:	2202      	movs	r2, #2
 800062e:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <main+0x34>
 8000634:	e0000078 	.word	0xe0000078

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	@ 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	@ 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fe5b 	bl	8003302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b27      	ldr	r3, [pc, #156]	@ (8000700 <SystemClock_Config+0xc8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	4a26      	ldr	r2, [pc, #152]	@ (8000700 <SystemClock_Config+0xc8>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	@ 0x40
 800066c:	4b24      	ldr	r3, [pc, #144]	@ (8000700 <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <SystemClock_Config+0xcc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a20      	ldr	r2, [pc, #128]	@ (8000704 <SystemClock_Config+0xcc>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006ac:	23c0      	movs	r3, #192	@ 0xc0
 80006ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fea9 	bl	8002414 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 fb4c 	bl	8000d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2103      	movs	r1, #3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 f90b 	bl	8002904 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f4:	f000 fb36 	bl	8000d64 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	@ 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
 800071c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800071e:	2301      	movs	r3, #1
 8000720:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000722:	23c8      	movs	r3, #200	@ 0xc8
 8000724:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000726:	2305      	movs	r3, #5
 8000728:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	4618      	mov	r0, r3
 8000732:	f002 faf3 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800073c:	f000 fb12 	bl	8000d64 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_I2C1_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	@ (800079c <MX_I2C1_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000754:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x58>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000766:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800076a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_I2C1_Init+0x50>)
 8000786:	f001 f861 	bl	800184c <HAL_I2C_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000790:	f000 fae8 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000009c 	.word	0x2000009c
 800079c:	40005400 	.word	0x40005400
 80007a0:	000186a0 	.word	0x000186a0

080007a4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_I2S2_Init+0x50>)
 80007aa:	4a13      	ldr	r2, [pc, #76]	@ (80007f8 <MX_I2S2_Init+0x54>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_I2S2_Init+0x50>)
 80007b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_I2S2_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007bc:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <MX_I2S2_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_I2S2_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <MX_I2S2_Init+0x50>)
 80007ca:	4a0c      	ldr	r2, [pc, #48]	@ (80007fc <MX_I2S2_Init+0x58>)
 80007cc:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_I2S2_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007d4:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <MX_I2S2_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007da:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_I2S2_Init+0x50>)
 80007dc:	2201      	movs	r2, #1
 80007de:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <MX_I2S2_Init+0x50>)
 80007e2:	f001 f977 	bl	8001ad4 <HAL_I2S_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f000 faba 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000f0 	.word	0x200000f0
 80007f8:	40003800 	.word	0x40003800
 80007fc:	00017700 	.word	0x00017700

08000800 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000804:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <MX_I2S3_Init+0x54>)
 8000806:	4a14      	ldr	r2, [pc, #80]	@ (8000858 <MX_I2S3_Init+0x58>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800080a:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <MX_I2S3_Init+0x54>)
 800080c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000810:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <MX_I2S3_Init+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000818:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_I2S3_Init+0x54>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800081e:	4b0d      	ldr	r3, [pc, #52]	@ (8000854 <MX_I2S3_Init+0x54>)
 8000820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000824:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_I2S3_Init+0x54>)
 8000828:	4a0c      	ldr	r2, [pc, #48]	@ (800085c <MX_I2S3_Init+0x5c>)
 800082a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_I2S3_Init+0x54>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_I2S3_Init+0x54>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_I2S3_Init+0x54>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_I2S3_Init+0x54>)
 8000840:	f001 f948 	bl	8001ad4 <HAL_I2S_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800084a:	f000 fa8b 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000138 	.word	0x20000138
 8000858:	40003c00 	.word	0x40003c00
 800085c:	00017700 	.word	0x00017700

08000860 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <MX_SPI1_Init+0x64>)
 8000866:	4a18      	ldr	r2, [pc, #96]	@ (80008c8 <MX_SPI1_Init+0x68>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800086a:	4b16      	ldr	r3, [pc, #88]	@ (80008c4 <MX_SPI1_Init+0x64>)
 800086c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000872:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_SPI1_Init+0x64>)
 800088c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000890:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_SPI1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000898:	4b0a      	ldr	r3, [pc, #40]	@ (80008c4 <MX_SPI1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	@ (80008c4 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_SPI1_Init+0x64>)
 80008ac:	220a      	movs	r2, #10
 80008ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <MX_SPI1_Init+0x64>)
 80008b2:	f002 fb85 	bl	8002fc0 <HAL_SPI_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008bc:	f000 fa52 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000180 	.word	0x20000180
 80008c8:	40013000 	.word	0x40013000

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	@ 0x30
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
 80008e6:	4b70      	ldr	r3, [pc, #448]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a6f      	ldr	r2, [pc, #444]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 80008ec:	f043 0310 	orr.w	r3, r3, #16
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b6d      	ldr	r3, [pc, #436]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	61bb      	str	r3, [r7, #24]
 80008fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	4b69      	ldr	r3, [pc, #420]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a68      	ldr	r2, [pc, #416]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b66      	ldr	r3, [pc, #408]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b62      	ldr	r3, [pc, #392]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a61      	ldr	r2, [pc, #388]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b5f      	ldr	r3, [pc, #380]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b5b      	ldr	r3, [pc, #364]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a5a      	ldr	r2, [pc, #360]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b58      	ldr	r3, [pc, #352]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b54      	ldr	r3, [pc, #336]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a53      	ldr	r2, [pc, #332]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b51      	ldr	r3, [pc, #324]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a4c      	ldr	r2, [pc, #304]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa8 <MX_GPIO_Init+0x1dc>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2108      	movs	r1, #8
 800098e:	4847      	ldr	r0, [pc, #284]	@ (8000aac <MX_GPIO_Init+0x1e0>)
 8000990:	f000 ff42 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2101      	movs	r1, #1
 8000998:	4845      	ldr	r0, [pc, #276]	@ (8000ab0 <MX_GPIO_Init+0x1e4>)
 800099a:	f000 ff3d 	bl	8001818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800099e:	2200      	movs	r2, #0
 80009a0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80009a4:	4843      	ldr	r0, [pc, #268]	@ (8000ab4 <MX_GPIO_Init+0x1e8>)
 80009a6:	f000 ff37 	bl	8001818 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80009aa:	2304      	movs	r3, #4
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	483b      	ldr	r0, [pc, #236]	@ (8000aac <MX_GPIO_Init+0x1e0>)
 80009be:	f000 fda7 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009c2:	2308      	movs	r3, #8
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4834      	ldr	r0, [pc, #208]	@ (8000aac <MX_GPIO_Init+0x1e0>)
 80009da:	f000 fd99 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80009de:	2332      	movs	r3, #50	@ 0x32
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	482e      	ldr	r0, [pc, #184]	@ (8000aac <MX_GPIO_Init+0x1e0>)
 80009f4:	f000 fd8c 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009f8:	2301      	movs	r3, #1
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4828      	ldr	r0, [pc, #160]	@ (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000a10:	f000 fd7e 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a18:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4823      	ldr	r0, [pc, #140]	@ (8000ab8 <MX_GPIO_Init+0x1ec>)
 8000a2a:	f000 fd71 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a2e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a32:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	481b      	ldr	r0, [pc, #108]	@ (8000ab4 <MX_GPIO_Init+0x1e8>)
 8000a48:	f000 fd62 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4815      	ldr	r0, [pc, #84]	@ (8000ab8 <MX_GPIO_Init+0x1ec>)
 8000a62:	f000 fd55 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a66:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a78:	230a      	movs	r3, #10
 8000a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	480d      	ldr	r0, [pc, #52]	@ (8000ab8 <MX_GPIO_Init+0x1ec>)
 8000a84:	f000 fd44 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a88:	2320      	movs	r3, #32
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4806      	ldr	r0, [pc, #24]	@ (8000ab4 <MX_GPIO_Init+0x1e8>)
 8000a9c:	f000 fd38 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3730      	adds	r7, #48	@ 0x30
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	40020c00 	.word	0x40020c00
 8000ab8:	40020000 	.word	0x40020000

08000abc <unrolled_image_filter>:
          }
      }
  }
}

void unrolled_image_filter() {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
    volatile uint8_t *data = (uint8_t *)raw_data;
 8000ac2:	4b97      	ldr	r3, [pc, #604]	@ (8000d20 <unrolled_image_filter+0x264>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	60fb      	str	r3, [r7, #12]
    int width = 64;  // Example width, adjust as needed
 8000ac8:	2340      	movs	r3, #64	@ 0x40
 8000aca:	60bb      	str	r3, [r7, #8]
    int height = 64; // Example height, adjust as needed
 8000acc:	2340      	movs	r3, #64	@ 0x40
 8000ace:	607b      	str	r3, [r7, #4]
    int channels = 3; // RGB
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	603b      	str	r3, [r7, #0]

    for (int y = 1; y < height - 1; y++) {
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	61fb      	str	r3, [r7, #28]
 8000ad8:	e116      	b.n	8000d08 <unrolled_image_filter+0x24c>
        for (int x = 1; x < width - 1; x++) {
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	e10a      	b.n	8000cf6 <unrolled_image_filter+0x23a>
            for (int c = 0; c < channels; c++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e0ff      	b.n	8000ce6 <unrolled_image_filter+0x22a>
                int sum = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]

                // Unroll the kernel loops
                sum += (int)(data[((y - 1) * width + (x - 1)) * channels + c] * kernel[0][0]);
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	fb03 f202 	mul.w	r2, r3, r2
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	fb03 f202 	mul.w	r2, r3, r2
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	4413      	add	r3, r2
 8000b04:	461a      	mov	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4b84      	ldr	r3, [pc, #528]	@ (8000d24 <unrolled_image_filter+0x268>)
 8000b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b16:	fb02 f303 	mul.w	r3, r2, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
                sum += (int)(data[((y - 1) * width + (x)) * channels + c] * kernel[0][1]);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	68ba      	ldr	r2, [r7, #8]
 8000b26:	fb03 f202 	mul.w	r2, r3, r2
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	fb03 f202 	mul.w	r2, r3, r2
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	4413      	add	r3, r2
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	461a      	mov	r2, r3
 8000b44:	4b77      	ldr	r3, [pc, #476]	@ (8000d24 <unrolled_image_filter+0x268>)
 8000b46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b4a:	fb02 f303 	mul.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4413      	add	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
                sum += (int)(data[((y - 1) * width + (x + 1)) * channels + c] * kernel[0][2]);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	68ba      	ldr	r2, [r7, #8]
 8000b5a:	fb03 f202 	mul.w	r2, r3, r2
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	3301      	adds	r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	fb03 f202 	mul.w	r2, r3, r2
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8000d24 <unrolled_image_filter+0x268>)
 8000b7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b80:	fb02 f303 	mul.w	r3, r2, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4413      	add	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]

                sum += (int)(data[((y) * width + (x - 1)) * channels + c] * kernel[1][0]);
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	68ba      	ldr	r2, [r7, #8]
 8000b8e:	fb03 f202 	mul.w	r2, r3, r2
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	fb03 f202 	mul.w	r2, r3, r2
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b5d      	ldr	r3, [pc, #372]	@ (8000d24 <unrolled_image_filter+0x268>)
 8000bb0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000bb4:	fb02 f303 	mul.w	r3, r2, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4413      	add	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
                sum += (int)(data[((y) * width + (x)) * channels + c] * kernel[1][1]);
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	fb03 f202 	mul.w	r2, r3, r2
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4413      	add	r3, r2
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	fb03 f202 	mul.w	r2, r3, r2
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b50      	ldr	r3, [pc, #320]	@ (8000d24 <unrolled_image_filter+0x268>)
 8000be2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000be6:	fb02 f303 	mul.w	r3, r2, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4413      	add	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
                sum += (int)(data[((y) * width + (x + 1)) * channels + c] * kernel[1][2]);
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	fb03 f202 	mul.w	r2, r3, r2
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4413      	add	r3, r2
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	fb03 f202 	mul.w	r2, r3, r2
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	4413      	add	r3, r2
 8000c08:	461a      	mov	r2, r3
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b43      	ldr	r3, [pc, #268]	@ (8000d24 <unrolled_image_filter+0x268>)
 8000c16:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c1a:	fb02 f303 	mul.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4413      	add	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]

                sum += (int)(data[((y + 1) * width + (x - 1)) * channels + c] * kernel[2][0]);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	3301      	adds	r3, #1
 8000c28:	68ba      	ldr	r2, [r7, #8]
 8000c2a:	fb03 f202 	mul.w	r2, r3, r2
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	4413      	add	r3, r2
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	fb03 f202 	mul.w	r2, r3, r2
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b36      	ldr	r3, [pc, #216]	@ (8000d24 <unrolled_image_filter+0x268>)
 8000c4c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c50:	fb02 f303 	mul.w	r3, r2, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4413      	add	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
                sum += (int)(data[((y + 1) * width + (x)) * channels + c] * kernel[2][1]);
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	fb03 f202 	mul.w	r2, r3, r2
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	4413      	add	r3, r2
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	fb03 f202 	mul.w	r2, r3, r2
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	4413      	add	r3, r2
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b29      	ldr	r3, [pc, #164]	@ (8000d24 <unrolled_image_filter+0x268>)
 8000c80:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c84:	fb02 f303 	mul.w	r3, r2, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
                sum += (int)(data[((y + 1) * width + (x + 1)) * channels + c] * kernel[2][2]);
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3301      	adds	r3, #1
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	fb03 f202 	mul.w	r2, r3, r2
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	fb03 f202 	mul.w	r2, r3, r2
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	461a      	mov	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4413      	add	r3, r2
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d24 <unrolled_image_filter+0x268>)
 8000cb6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000cba:	fb02 f303 	mul.w	r3, r2, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]

                // Clamp the result to the valid range [0, 255]
                if (sum < 0) sum = 0;
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	da01      	bge.n	8000cce <unrolled_image_filter+0x212>
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
                if (sum > 255) sum = 255;
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	2bff      	cmp	r3, #255	@ 0xff
 8000cd2:	dd01      	ble.n	8000cd8 <unrolled_image_filter+0x21c>
 8000cd4:	23ff      	movs	r3, #255	@ 0xff
 8000cd6:	613b      	str	r3, [r7, #16]

                printf("|%d| \n\n", sum);
 8000cd8:	6939      	ldr	r1, [r7, #16]
 8000cda:	4813      	ldr	r0, [pc, #76]	@ (8000d28 <unrolled_image_filter+0x26c>)
 8000cdc:	f002 fabc 	bl	8003258 <iprintf>
            for (int c = 0; c < channels; c++) {
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	f6ff aefb 	blt.w	8000ae6 <unrolled_image_filter+0x2a>
        for (int x = 1; x < width - 1; x++) {
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f6ff aeef 	blt.w	8000ae0 <unrolled_image_filter+0x24>
    for (int y = 1; y < height - 1; y++) {
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3301      	adds	r3, #1
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	f6ff aee3 	blt.w	8000ada <unrolled_image_filter+0x1e>
            }
        }
    }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3720      	adds	r7, #32
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000004 	.word	0x20000004
 8000d28:	08003f50 	.word	0x08003f50

08000d2c <_write>:
          }
      }
  }
}

int _write(int file, char* ptr, int len) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	e009      	b.n	8000d52 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1c5a      	adds	r2, r3, #1
 8000d42:	60ba      	str	r2, [r7, #8]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fc30 	bl	80005ac <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	dbf1      	blt.n	8000d3e <_write+0x12>
	}
	return len;
 8000d5a:	687b      	ldr	r3, [r7, #4]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <Error_Handler+0x8>

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <HAL_MspInit+0x4c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dbc <HAL_MspInit+0x4c>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d86:	4b0d      	ldr	r3, [pc, #52]	@ (8000dbc <HAL_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <HAL_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	4a08      	ldr	r2, [pc, #32]	@ (8000dbc <HAL_MspInit+0x4c>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_MspInit+0x4c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dae:	2007      	movs	r0, #7
 8000db0:	f000 fb7a 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	@ 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a19      	ldr	r2, [pc, #100]	@ (8000e44 <HAL_I2C_MspInit+0x84>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d12c      	bne.n	8000e3c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <HAL_I2C_MspInit+0x88>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <HAL_I2C_MspInit+0x88>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <HAL_I2C_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dfe:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e04:	2312      	movs	r3, #18
 8000e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e10:	2304      	movs	r3, #4
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <HAL_I2C_MspInit+0x8c>)
 8000e1c:	f000 fb78 	bl	8001510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <HAL_I2C_MspInit+0x88>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	4a07      	ldr	r2, [pc, #28]	@ (8000e48 <HAL_I2C_MspInit+0x88>)
 8000e2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <HAL_I2C_MspInit+0x88>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	@ 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40005400 	.word	0x40005400
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020400 	.word	0x40020400

08000e50 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	@ 0x38
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a59      	ldr	r2, [pc, #356]	@ (8000fd4 <HAL_I2S_MspInit+0x184>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d15b      	bne.n	8000f2a <HAL_I2S_MspInit+0xda>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
 8000e76:	4b58      	ldr	r3, [pc, #352]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	4a57      	ldr	r2, [pc, #348]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e82:	4b55      	ldr	r3, [pc, #340]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e8a:	623b      	str	r3, [r7, #32]
 8000e8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	4b51      	ldr	r3, [pc, #324]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a50      	ldr	r2, [pc, #320]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b4e      	ldr	r3, [pc, #312]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0304 	and.w	r3, r3, #4
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	4b4a      	ldr	r3, [pc, #296]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a49      	ldr	r2, [pc, #292]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b47      	ldr	r3, [pc, #284]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	483e      	ldr	r0, [pc, #248]	@ (8000fdc <HAL_I2S_MspInit+0x18c>)
 8000ee2:	f000 fb15 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efe:	4619      	mov	r1, r3
 8000f00:	4836      	ldr	r0, [pc, #216]	@ (8000fdc <HAL_I2S_MspInit+0x18c>)
 8000f02:	f000 fb05 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000f06:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f18:	2305      	movs	r3, #5
 8000f1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f20:	4619      	mov	r1, r3
 8000f22:	482f      	ldr	r0, [pc, #188]	@ (8000fe0 <HAL_I2S_MspInit+0x190>)
 8000f24:	f000 faf4 	bl	8001510 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f28:	e04f      	b.n	8000fca <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe4 <HAL_I2S_MspInit+0x194>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d14a      	bne.n	8000fca <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
 8000f38:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	4a26      	ldr	r2, [pc, #152]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f44:	4b24      	ldr	r3, [pc, #144]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f58:	4a1f      	ldr	r2, [pc, #124]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f60:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f74:	4a18      	ldr	r2, [pc, #96]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7c:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <HAL_I2S_MspInit+0x188>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f98:	2306      	movs	r3, #6
 8000f9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4811      	ldr	r0, [pc, #68]	@ (8000fe8 <HAL_I2S_MspInit+0x198>)
 8000fa4:	f000 fab4 	bl	8001510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000fa8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fba:	2306      	movs	r3, #6
 8000fbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <HAL_I2S_MspInit+0x18c>)
 8000fc6:	f000 faa3 	bl	8001510 <HAL_GPIO_Init>
}
 8000fca:	bf00      	nop
 8000fcc:	3738      	adds	r7, #56	@ 0x38
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40003800 	.word	0x40003800
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	40003c00 	.word	0x40003c00
 8000fe8:	40020000 	.word	0x40020000

08000fec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	@ 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a19      	ldr	r2, [pc, #100]	@ (8001070 <HAL_SPI_MspInit+0x84>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d12b      	bne.n	8001066 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b18      	ldr	r3, [pc, #96]	@ (8001074 <HAL_SPI_MspInit+0x88>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	4a17      	ldr	r2, [pc, #92]	@ (8001074 <HAL_SPI_MspInit+0x88>)
 8001018:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800101c:	6453      	str	r3, [r2, #68]	@ 0x44
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_SPI_MspInit+0x88>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_SPI_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a10      	ldr	r2, [pc, #64]	@ (8001074 <HAL_SPI_MspInit+0x88>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_SPI_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001046:	23e0      	movs	r3, #224	@ 0xe0
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001056:	2305      	movs	r3, #5
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	@ (8001078 <HAL_SPI_MspInit+0x8c>)
 8001062:	f000 fa55 	bl	8001510 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	@ 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40013000 	.word	0x40013000
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <NMI_Handler+0x4>

08001084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <MemManage_Handler+0x4>

08001094 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d2:	f000 f917 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}

080010da <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e00a      	b.n	8001102 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010ec:	f3af 8000 	nop.w
 80010f0:	4601      	mov	r1, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	60ba      	str	r2, [r7, #8]
 80010f8:	b2ca      	uxtb	r2, r1
 80010fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3301      	adds	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	429a      	cmp	r2, r3
 8001108:	dbf0      	blt.n	80010ec <_read+0x12>
  }

  return len;
 800110a:	687b      	ldr	r3, [r7, #4]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800113c:	605a      	str	r2, [r3, #4]
  return 0;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <_isatty>:

int _isatty(int file)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001154:	2301      	movs	r3, #1
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	@ (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f002 f8f8 	bl	80033a0 <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20020000 	.word	0x20020000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	200001d8 	.word	0x200001d8
 80011e4:	20000330 	.word	0x20000330

080011e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	@ (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800120c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001244 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001210:	f7ff ffea 	bl	80011e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001216:	490d      	ldr	r1, [pc, #52]	@ (800124c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001218:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122a:	4a0a      	ldr	r2, [pc, #40]	@ (8001254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800122c:	4c0a      	ldr	r4, [pc, #40]	@ (8001258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123a:	f002 f8b7 	bl	80033ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123e:	f7ff f9dd 	bl	80005fc <main>
  bx  lr    
 8001242:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001244:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001250:	08003fc0 	.word	0x08003fc0
  ldr r2, =_sbss
 8001254:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001258:	2000032c 	.word	0x2000032c

0800125c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC_IRQHandler>
	...

08001260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001264:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <HAL_Init+0x40>)
 800126a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800126e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <HAL_Init+0x40>)
 8001276:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800127a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a07      	ldr	r2, [pc, #28]	@ (80012a0 <HAL_Init+0x40>)
 8001282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001286:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 f90d 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128e:	2000      	movs	r0, #0
 8001290:	f000 f808 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001294:	f7ff fd6c 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023c00 	.word	0x40023c00

080012a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_InitTick+0x54>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_InitTick+0x58>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f917 	bl	80014f6 <HAL_SYSTICK_Config>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00e      	b.n	80012f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d80a      	bhi.n	80012ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d8:	2200      	movs	r2, #0
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f000 f8ed 	bl	80014be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e4:	4a06      	ldr	r2, [pc, #24]	@ (8001300 <HAL_InitTick+0x5c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e000      	b.n	80012f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000018 	.word	0x20000018
 80012fc:	20000020 	.word	0x20000020
 8001300:	2000001c 	.word	0x2000001c

08001304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000020 	.word	0x20000020
 8001328:	200001dc 	.word	0x200001dc

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	200001dc 	.word	0x200001dc

08001344 <__NVIC_SetPriorityGrouping>:
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_SetPriority>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	@ (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	@ (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	@ 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	@ 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff47 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff5c 	bl	800138c <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff8e 	bl	80013fc <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffb0 	bl	8001464 <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	@ 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	e159      	b.n	80017e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	429a      	cmp	r2, r3
 8001546:	f040 8148 	bne.w	80017da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b01      	cmp	r3, #1
 8001554:	d005      	beq.n	8001562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155e:	2b02      	cmp	r3, #2
 8001560:	d130      	bne.n	80015c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001598:	2201      	movs	r2, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 0201 	and.w	r2, r3, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d017      	beq.n	8001600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d123      	bne.n	8001654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	08da      	lsrs	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3208      	adds	r2, #8
 8001614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	691a      	ldr	r2, [r3, #16]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	08da      	lsrs	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3208      	adds	r2, #8
 800164e:	69b9      	ldr	r1, [r7, #24]
 8001650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0203 	and.w	r2, r3, #3
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80a2 	beq.w	80017da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b57      	ldr	r3, [pc, #348]	@ (80017f8 <HAL_GPIO_Init+0x2e8>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	4a56      	ldr	r2, [pc, #344]	@ (80017f8 <HAL_GPIO_Init+0x2e8>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a6:	4b54      	ldr	r3, [pc, #336]	@ (80017f8 <HAL_GPIO_Init+0x2e8>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b2:	4a52      	ldr	r2, [pc, #328]	@ (80017fc <HAL_GPIO_Init+0x2ec>)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	220f      	movs	r2, #15
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a49      	ldr	r2, [pc, #292]	@ (8001800 <HAL_GPIO_Init+0x2f0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d019      	beq.n	8001712 <HAL_GPIO_Init+0x202>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a48      	ldr	r2, [pc, #288]	@ (8001804 <HAL_GPIO_Init+0x2f4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0x1fe>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a47      	ldr	r2, [pc, #284]	@ (8001808 <HAL_GPIO_Init+0x2f8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00d      	beq.n	800170a <HAL_GPIO_Init+0x1fa>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a46      	ldr	r2, [pc, #280]	@ (800180c <HAL_GPIO_Init+0x2fc>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d007      	beq.n	8001706 <HAL_GPIO_Init+0x1f6>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a45      	ldr	r2, [pc, #276]	@ (8001810 <HAL_GPIO_Init+0x300>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_GPIO_Init+0x1f2>
 80016fe:	2304      	movs	r3, #4
 8001700:	e008      	b.n	8001714 <HAL_GPIO_Init+0x204>
 8001702:	2307      	movs	r3, #7
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x204>
 8001706:	2303      	movs	r3, #3
 8001708:	e004      	b.n	8001714 <HAL_GPIO_Init+0x204>
 800170a:	2302      	movs	r3, #2
 800170c:	e002      	b.n	8001714 <HAL_GPIO_Init+0x204>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x204>
 8001712:	2300      	movs	r3, #0
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f002 0203 	and.w	r2, r2, #3
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	4093      	lsls	r3, r2
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001724:	4935      	ldr	r1, [pc, #212]	@ (80017fc <HAL_GPIO_Init+0x2ec>)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001732:	4b38      	ldr	r3, [pc, #224]	@ (8001814 <HAL_GPIO_Init+0x304>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001756:	4a2f      	ldr	r2, [pc, #188]	@ (8001814 <HAL_GPIO_Init+0x304>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800175c:	4b2d      	ldr	r3, [pc, #180]	@ (8001814 <HAL_GPIO_Init+0x304>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001780:	4a24      	ldr	r2, [pc, #144]	@ (8001814 <HAL_GPIO_Init+0x304>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001786:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <HAL_GPIO_Init+0x304>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001814 <HAL_GPIO_Init+0x304>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b0:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <HAL_GPIO_Init+0x304>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001814 <HAL_GPIO_Init+0x304>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3301      	adds	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	f67f aea2 	bls.w	800152c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3724      	adds	r7, #36	@ 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40013800 	.word	0x40013800
 8001800:	40020000 	.word	0x40020000
 8001804:	40020400 	.word	0x40020400
 8001808:	40020800 	.word	0x40020800
 800180c:	40020c00 	.word	0x40020c00
 8001810:	40021000 	.word	0x40021000
 8001814:	40013c00 	.word	0x40013c00

08001818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
 8001824:	4613      	mov	r3, r2
 8001826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001828:	787b      	ldrb	r3, [r7, #1]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182e:	887a      	ldrh	r2, [r7, #2]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001834:	e003      	b.n	800183e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	041a      	lsls	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e12b      	b.n	8001ab6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff faa4 	bl	8000dc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2224      	movs	r2, #36	@ 0x24
 800187c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800189e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018b0:	f001 fa20 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 80018b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4a81      	ldr	r2, [pc, #516]	@ (8001ac0 <HAL_I2C_Init+0x274>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d807      	bhi.n	80018d0 <HAL_I2C_Init+0x84>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4a80      	ldr	r2, [pc, #512]	@ (8001ac4 <HAL_I2C_Init+0x278>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	bf94      	ite	ls
 80018c8:	2301      	movls	r3, #1
 80018ca:	2300      	movhi	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	e006      	b.n	80018de <HAL_I2C_Init+0x92>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4a7d      	ldr	r2, [pc, #500]	@ (8001ac8 <HAL_I2C_Init+0x27c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	bf94      	ite	ls
 80018d8:	2301      	movls	r3, #1
 80018da:	2300      	movhi	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0e7      	b.n	8001ab6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4a78      	ldr	r2, [pc, #480]	@ (8001acc <HAL_I2C_Init+0x280>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	0c9b      	lsrs	r3, r3, #18
 80018f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	430a      	orrs	r2, r1
 8001904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4a6a      	ldr	r2, [pc, #424]	@ (8001ac0 <HAL_I2C_Init+0x274>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d802      	bhi.n	8001920 <HAL_I2C_Init+0xd4>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	3301      	adds	r3, #1
 800191e:	e009      	b.n	8001934 <HAL_I2C_Init+0xe8>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	4a69      	ldr	r2, [pc, #420]	@ (8001ad0 <HAL_I2C_Init+0x284>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	099b      	lsrs	r3, r3, #6
 8001932:	3301      	adds	r3, #1
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	430b      	orrs	r3, r1
 800193a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001946:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	495c      	ldr	r1, [pc, #368]	@ (8001ac0 <HAL_I2C_Init+0x274>)
 8001950:	428b      	cmp	r3, r1
 8001952:	d819      	bhi.n	8001988 <HAL_I2C_Init+0x13c>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1e59      	subs	r1, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001962:	1c59      	adds	r1, r3, #1
 8001964:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001968:	400b      	ands	r3, r1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00a      	beq.n	8001984 <HAL_I2C_Init+0x138>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1e59      	subs	r1, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fbb1 f3f3 	udiv	r3, r1, r3
 800197c:	3301      	adds	r3, #1
 800197e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001982:	e051      	b.n	8001a28 <HAL_I2C_Init+0x1dc>
 8001984:	2304      	movs	r3, #4
 8001986:	e04f      	b.n	8001a28 <HAL_I2C_Init+0x1dc>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d111      	bne.n	80019b4 <HAL_I2C_Init+0x168>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1e58      	subs	r0, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6859      	ldr	r1, [r3, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	440b      	add	r3, r1
 800199e:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a2:	3301      	adds	r3, #1
 80019a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf0c      	ite	eq
 80019ac:	2301      	moveq	r3, #1
 80019ae:	2300      	movne	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	e012      	b.n	80019da <HAL_I2C_Init+0x18e>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1e58      	subs	r0, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6859      	ldr	r1, [r3, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	0099      	lsls	r1, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf0c      	ite	eq
 80019d4:	2301      	moveq	r3, #1
 80019d6:	2300      	movne	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Init+0x196>
 80019de:	2301      	movs	r3, #1
 80019e0:	e022      	b.n	8001a28 <HAL_I2C_Init+0x1dc>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10e      	bne.n	8001a08 <HAL_I2C_Init+0x1bc>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1e58      	subs	r0, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6859      	ldr	r1, [r3, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	440b      	add	r3, r1
 80019f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fc:	3301      	adds	r3, #1
 80019fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a06:	e00f      	b.n	8001a28 <HAL_I2C_Init+0x1dc>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1e58      	subs	r0, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	0099      	lsls	r1, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	6809      	ldr	r1, [r1, #0]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69da      	ldr	r2, [r3, #28]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6911      	ldr	r1, [r2, #16]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68d2      	ldr	r2, [r2, #12]
 8001a62:	4311      	orrs	r1, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	000186a0 	.word	0x000186a0
 8001ac4:	001e847f 	.word	0x001e847f
 8001ac8:	003d08ff 	.word	0x003d08ff
 8001acc:	431bde83 	.word	0x431bde83
 8001ad0:	10624dd3 	.word	0x10624dd3

08001ad4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e128      	b.n	8001d38 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a90      	ldr	r2, [pc, #576]	@ (8001d40 <HAL_I2S_Init+0x26c>)
 8001afe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff f9a5 	bl	8000e50 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001b1c:	f023 030f 	bic.w	r3, r3, #15
 8001b20:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2202      	movs	r2, #2
 8001b28:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d060      	beq.n	8001bf4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001b3a:	2310      	movs	r3, #16
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	e001      	b.n	8001b44 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001b40:	2320      	movs	r3, #32
 8001b42:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d802      	bhi.n	8001b52 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001b52:	2001      	movs	r0, #1
 8001b54:	f001 f9d2 	bl	8002efc <HAL_RCCEx_GetPeriphCLKFreq>
 8001b58:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b62:	d125      	bne.n	8001bb0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d010      	beq.n	8001b8e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	461a      	mov	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b88:	3305      	adds	r3, #5
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	e01f      	b.n	8001bce <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	3305      	adds	r3, #5
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	e00e      	b.n	8001bce <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	3305      	adds	r3, #5
 8001bcc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4a5c      	ldr	r2, [pc, #368]	@ (8001d44 <HAL_I2S_Init+0x270>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	08db      	lsrs	r3, r3, #3
 8001bd8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	085b      	lsrs	r3, r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	e003      	b.n	8001bfc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d902      	bls.n	8001c08 <HAL_I2S_Init+0x134>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	2bff      	cmp	r3, #255	@ 0xff
 8001c06:	d907      	bls.n	8001c18 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0c:	f043 0210 	orr.w	r2, r3, #16
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e08f      	b.n	8001d38 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691a      	ldr	r2, [r3, #16]
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	ea42 0103 	orr.w	r1, r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001c36:	f023 030f 	bic.w	r3, r3, #15
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6851      	ldr	r1, [r2, #4]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6892      	ldr	r2, [r2, #8]
 8001c42:	4311      	orrs	r1, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	68d2      	ldr	r2, [r2, #12]
 8001c48:	4311      	orrs	r1, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6992      	ldr	r2, [r2, #24]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c5a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d161      	bne.n	8001d28 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a38      	ldr	r2, [pc, #224]	@ (8001d48 <HAL_I2S_Init+0x274>)
 8001c68:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a37      	ldr	r2, [pc, #220]	@ (8001d4c <HAL_I2S_Init+0x278>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d101      	bne.n	8001c78 <HAL_I2S_Init+0x1a4>
 8001c74:	4b36      	ldr	r3, [pc, #216]	@ (8001d50 <HAL_I2S_Init+0x27c>)
 8001c76:	e001      	b.n	8001c7c <HAL_I2S_Init+0x1a8>
 8001c78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	4932      	ldr	r1, [pc, #200]	@ (8001d4c <HAL_I2S_Init+0x278>)
 8001c84:	428a      	cmp	r2, r1
 8001c86:	d101      	bne.n	8001c8c <HAL_I2S_Init+0x1b8>
 8001c88:	4a31      	ldr	r2, [pc, #196]	@ (8001d50 <HAL_I2S_Init+0x27c>)
 8001c8a:	e001      	b.n	8001c90 <HAL_I2S_Init+0x1bc>
 8001c8c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001c90:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001c94:	f023 030f 	bic.w	r3, r3, #15
 8001c98:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a2b      	ldr	r2, [pc, #172]	@ (8001d4c <HAL_I2S_Init+0x278>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_I2S_Init+0x1d4>
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d50 <HAL_I2S_Init+0x27c>)
 8001ca6:	e001      	b.n	8001cac <HAL_I2S_Init+0x1d8>
 8001ca8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001cac:	2202      	movs	r2, #2
 8001cae:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a25      	ldr	r2, [pc, #148]	@ (8001d4c <HAL_I2S_Init+0x278>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_I2S_Init+0x1ea>
 8001cba:	4b25      	ldr	r3, [pc, #148]	@ (8001d50 <HAL_I2S_Init+0x27c>)
 8001cbc:	e001      	b.n	8001cc2 <HAL_I2S_Init+0x1ee>
 8001cbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cce:	d003      	beq.n	8001cd8 <HAL_I2S_Init+0x204>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d103      	bne.n	8001ce0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001cd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	e001      	b.n	8001ce4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d02:	4313      	orrs	r3, r2
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	897b      	ldrh	r3, [r7, #10]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d10:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <HAL_I2S_Init+0x278>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d101      	bne.n	8001d20 <HAL_I2S_Init+0x24c>
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <HAL_I2S_Init+0x27c>)
 8001d1e:	e001      	b.n	8001d24 <HAL_I2S_Init+0x250>
 8001d20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d24:	897a      	ldrh	r2, [r7, #10]
 8001d26:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	08001e4b 	.word	0x08001e4b
 8001d44:	cccccccd 	.word	0xcccccccd
 8001d48:	08001f61 	.word	0x08001f61
 8001d4c:	40003800 	.word	0x40003800
 8001d50:	40003400 	.word	0x40003400

08001d54 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	881a      	ldrh	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	1c9a      	adds	r2, r3, #2
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10e      	bne.n	8001de4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001dd4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffb8 	bl	8001d54 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfe:	b292      	uxth	r2, r2
 8001e00:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e06:	1c9a      	adds	r2, r3, #2
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	3b01      	subs	r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10e      	bne.n	8001e42 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e32:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff93 	bl	8001d68 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d13a      	bne.n	8001edc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d109      	bne.n	8001e84 <I2S_IRQHandler+0x3a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7a:	2b40      	cmp	r3, #64	@ 0x40
 8001e7c:	d102      	bne.n	8001e84 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ffb4 	bl	8001dec <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e8a:	2b40      	cmp	r3, #64	@ 0x40
 8001e8c:	d126      	bne.n	8001edc <I2S_IRQHandler+0x92>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	d11f      	bne.n	8001edc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001eaa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	f043 0202 	orr.w	r2, r3, #2
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ff50 	bl	8001d7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d136      	bne.n	8001f56 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d109      	bne.n	8001f06 <I2S_IRQHandler+0xbc>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efc:	2b80      	cmp	r3, #128	@ 0x80
 8001efe:	d102      	bne.n	8001f06 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff45 	bl	8001d90 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d122      	bne.n	8001f56 <I2S_IRQHandler+0x10c>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d11b      	bne.n	8001f56 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f2c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f48:	f043 0204 	orr.w	r2, r3, #4
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff13 	bl	8001d7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f56:	bf00      	nop
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a92      	ldr	r2, [pc, #584]	@ (80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d101      	bne.n	8001f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001f7a:	4b92      	ldr	r3, [pc, #584]	@ (80021c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f7c:	e001      	b.n	8001f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001f7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a8b      	ldr	r2, [pc, #556]	@ (80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001f98:	4b8a      	ldr	r3, [pc, #552]	@ (80021c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f9a:	e001      	b.n	8001fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001f9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fac:	d004      	beq.n	8001fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f040 8099 	bne.w	80020ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d107      	bne.n	8001fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d002      	beq.n	8001fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f925 	bl	800221c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d107      	bne.n	8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f9c8 	bl	800237c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff2:	2b40      	cmp	r3, #64	@ 0x40
 8001ff4:	d13a      	bne.n	800206c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d035      	beq.n	800206c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a6e      	ldr	r2, [pc, #440]	@ (80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800200a:	4b6e      	ldr	r3, [pc, #440]	@ (80021c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800200c:	e001      	b.n	8002012 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800200e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4969      	ldr	r1, [pc, #420]	@ (80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800201a:	428b      	cmp	r3, r1
 800201c:	d101      	bne.n	8002022 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800201e:	4b69      	ldr	r3, [pc, #420]	@ (80021c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002020:	e001      	b.n	8002026 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002022:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002026:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800202a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800203a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800203c:	2300      	movs	r3, #0
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	f043 0202 	orr.w	r2, r3, #2
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fe88 	bl	8001d7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b08      	cmp	r3, #8
 8002074:	f040 80c3 	bne.w	80021fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80bd 	beq.w	80021fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002092:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a49      	ldr	r2, [pc, #292]	@ (80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800209e:	4b49      	ldr	r3, [pc, #292]	@ (80021c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020a0:	e001      	b.n	80020a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80020a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4944      	ldr	r1, [pc, #272]	@ (80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020ae:	428b      	cmp	r3, r1
 80020b0:	d101      	bne.n	80020b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80020b2:	4b44      	ldr	r3, [pc, #272]	@ (80021c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020b4:	e001      	b.n	80020ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80020b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	f043 0204 	orr.w	r2, r3, #4
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff fe4a 	bl	8001d7c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020e8:	e089      	b.n	80021fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d107      	bne.n	8002104 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f8be 	bl	8002280 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d107      	bne.n	800211e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f8fd 	bl	8002318 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002124:	2b40      	cmp	r3, #64	@ 0x40
 8002126:	d12f      	bne.n	8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	d02a      	beq.n	8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002140:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1e      	ldr	r2, [pc, #120]	@ (80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800214c:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800214e:	e001      	b.n	8002154 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002150:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4919      	ldr	r1, [pc, #100]	@ (80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800215c:	428b      	cmp	r3, r1
 800215e:	d101      	bne.n	8002164 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002160:	4b18      	ldr	r3, [pc, #96]	@ (80021c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002162:	e001      	b.n	8002168 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002164:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002168:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800216c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f043 0202 	orr.w	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fdfa 	bl	8001d7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b08      	cmp	r3, #8
 8002190:	d136      	bne.n	8002200 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d031      	beq.n	8002200 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a07      	ldr	r2, [pc, #28]	@ (80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80021a6:	4b07      	ldr	r3, [pc, #28]	@ (80021c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021a8:	e001      	b.n	80021ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80021aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4902      	ldr	r1, [pc, #8]	@ (80021c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021b6:	428b      	cmp	r3, r1
 80021b8:	d106      	bne.n	80021c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80021ba:	4b02      	ldr	r3, [pc, #8]	@ (80021c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021bc:	e006      	b.n	80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80021be:	bf00      	nop
 80021c0:	40003800 	.word	0x40003800
 80021c4:	40003400 	.word	0x40003400
 80021c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80021d0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f043 0204 	orr.w	r2, r3, #4
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff fdc0 	bl	8001d7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021fc:	e000      	b.n	8002200 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021fe:	bf00      	nop
}
 8002200:	bf00      	nop
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002228:	1c99      	adds	r1, r3, #2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6251      	str	r1, [r2, #36]	@ 0x24
 800222e:	881a      	ldrh	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d113      	bne.n	8002276 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800225c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d106      	bne.n	8002276 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ffc9 	bl	8002208 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228c:	1c99      	adds	r1, r3, #2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6251      	str	r1, [r2, #36]	@ 0x24
 8002292:	8819      	ldrh	r1, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1d      	ldr	r2, [pc, #116]	@ (8002310 <I2SEx_TxISR_I2SExt+0x90>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d101      	bne.n	80022a2 <I2SEx_TxISR_I2SExt+0x22>
 800229e:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <I2SEx_TxISR_I2SExt+0x94>)
 80022a0:	e001      	b.n	80022a6 <I2SEx_TxISR_I2SExt+0x26>
 80022a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022a6:	460a      	mov	r2, r1
 80022a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d121      	bne.n	8002306 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a12      	ldr	r2, [pc, #72]	@ (8002310 <I2SEx_TxISR_I2SExt+0x90>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d101      	bne.n	80022d0 <I2SEx_TxISR_I2SExt+0x50>
 80022cc:	4b11      	ldr	r3, [pc, #68]	@ (8002314 <I2SEx_TxISR_I2SExt+0x94>)
 80022ce:	e001      	b.n	80022d4 <I2SEx_TxISR_I2SExt+0x54>
 80022d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	490d      	ldr	r1, [pc, #52]	@ (8002310 <I2SEx_TxISR_I2SExt+0x90>)
 80022dc:	428b      	cmp	r3, r1
 80022de:	d101      	bne.n	80022e4 <I2SEx_TxISR_I2SExt+0x64>
 80022e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <I2SEx_TxISR_I2SExt+0x94>)
 80022e2:	e001      	b.n	80022e8 <I2SEx_TxISR_I2SExt+0x68>
 80022e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80022ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d106      	bne.n	8002306 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff81 	bl	8002208 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40003800 	.word	0x40003800
 8002314:	40003400 	.word	0x40003400

08002318 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68d8      	ldr	r0, [r3, #12]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232a:	1c99      	adds	r1, r3, #2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002330:	b282      	uxth	r2, r0
 8002332:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d113      	bne.n	8002374 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800235a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ff4a 	bl	8002208 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a20      	ldr	r2, [pc, #128]	@ (800240c <I2SEx_RxISR_I2SExt+0x90>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <I2SEx_RxISR_I2SExt+0x16>
 800238e:	4b20      	ldr	r3, [pc, #128]	@ (8002410 <I2SEx_RxISR_I2SExt+0x94>)
 8002390:	e001      	b.n	8002396 <I2SEx_RxISR_I2SExt+0x1a>
 8002392:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002396:	68d8      	ldr	r0, [r3, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239c:	1c99      	adds	r1, r3, #2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80023a2:	b282      	uxth	r2, r0
 80023a4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d121      	bne.n	8002402 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a12      	ldr	r2, [pc, #72]	@ (800240c <I2SEx_RxISR_I2SExt+0x90>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <I2SEx_RxISR_I2SExt+0x50>
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <I2SEx_RxISR_I2SExt+0x94>)
 80023ca:	e001      	b.n	80023d0 <I2SEx_RxISR_I2SExt+0x54>
 80023cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	490d      	ldr	r1, [pc, #52]	@ (800240c <I2SEx_RxISR_I2SExt+0x90>)
 80023d8:	428b      	cmp	r3, r1
 80023da:	d101      	bne.n	80023e0 <I2SEx_RxISR_I2SExt+0x64>
 80023dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002410 <I2SEx_RxISR_I2SExt+0x94>)
 80023de:	e001      	b.n	80023e4 <I2SEx_RxISR_I2SExt+0x68>
 80023e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023e8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d106      	bne.n	8002402 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff03 	bl	8002208 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40003800 	.word	0x40003800
 8002410:	40003400 	.word	0x40003400

08002414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e267      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d075      	beq.n	800251e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002432:	4b88      	ldr	r3, [pc, #544]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b04      	cmp	r3, #4
 800243c:	d00c      	beq.n	8002458 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243e:	4b85      	ldr	r3, [pc, #532]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002446:	2b08      	cmp	r3, #8
 8002448:	d112      	bne.n	8002470 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244a:	4b82      	ldr	r3, [pc, #520]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002456:	d10b      	bne.n	8002470 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	4b7e      	ldr	r3, [pc, #504]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d05b      	beq.n	800251c <HAL_RCC_OscConfig+0x108>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d157      	bne.n	800251c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e242      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002478:	d106      	bne.n	8002488 <HAL_RCC_OscConfig+0x74>
 800247a:	4b76      	ldr	r3, [pc, #472]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a75      	ldr	r2, [pc, #468]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e01d      	b.n	80024c4 <HAL_RCC_OscConfig+0xb0>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x98>
 8002492:	4b70      	ldr	r3, [pc, #448]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6f      	ldr	r2, [pc, #444]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b6d      	ldr	r3, [pc, #436]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6c      	ldr	r2, [pc, #432]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0xb0>
 80024ac:	4b69      	ldr	r3, [pc, #420]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a68      	ldr	r2, [pc, #416]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b66      	ldr	r3, [pc, #408]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a65      	ldr	r2, [pc, #404]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7fe ff2e 	bl	800132c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7fe ff2a 	bl	800132c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e207      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0xc0>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fe ff1a 	bl	800132c <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7fe ff16 	bl	800132c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	@ 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e1f3      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	4b51      	ldr	r3, [pc, #324]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0xe8>
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d063      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800252a:	4b4a      	ldr	r3, [pc, #296]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002536:	4b47      	ldr	r3, [pc, #284]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800253e:	2b08      	cmp	r3, #8
 8002540:	d11c      	bne.n	800257c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002542:	4b44      	ldr	r3, [pc, #272]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d116      	bne.n	800257c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	4b41      	ldr	r3, [pc, #260]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x152>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e1c7      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b3b      	ldr	r3, [pc, #236]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4937      	ldr	r1, [pc, #220]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	e03a      	b.n	80025f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002584:	4b34      	ldr	r3, [pc, #208]	@ (8002658 <HAL_RCC_OscConfig+0x244>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7fe fecf 	bl	800132c <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002592:	f7fe fecb 	bl	800132c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1a8      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	4b28      	ldr	r3, [pc, #160]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4925      	ldr	r1, [pc, #148]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c6:	4b24      	ldr	r3, [pc, #144]	@ (8002658 <HAL_RCC_OscConfig+0x244>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe feae 	bl	800132c <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d4:	f7fe feaa 	bl	800132c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e187      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d036      	beq.n	800266c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d016      	beq.n	8002634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <HAL_RCC_OscConfig+0x248>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe fe8e 	bl	800132c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7fe fe8a 	bl	800132c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e167      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <HAL_RCC_OscConfig+0x240>)
 8002628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x200>
 8002632:	e01b      	b.n	800266c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002634:	4b09      	ldr	r3, [pc, #36]	@ (800265c <HAL_RCC_OscConfig+0x248>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263a:	f7fe fe77 	bl	800132c <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	e00e      	b.n	8002660 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002642:	f7fe fe73 	bl	800132c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d907      	bls.n	8002660 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e150      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
 8002654:	40023800 	.word	0x40023800
 8002658:	42470000 	.word	0x42470000
 800265c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	4b88      	ldr	r3, [pc, #544]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ea      	bne.n	8002642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8097 	beq.w	80027a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267a:	2300      	movs	r3, #0
 800267c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267e:	4b81      	ldr	r3, [pc, #516]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10f      	bne.n	80026aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	4b7d      	ldr	r3, [pc, #500]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	4a7c      	ldr	r2, [pc, #496]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	@ 0x40
 800269a:	4b7a      	ldr	r3, [pc, #488]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a6:	2301      	movs	r3, #1
 80026a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026aa:	4b77      	ldr	r3, [pc, #476]	@ (8002888 <HAL_RCC_OscConfig+0x474>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d118      	bne.n	80026e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b6:	4b74      	ldr	r3, [pc, #464]	@ (8002888 <HAL_RCC_OscConfig+0x474>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a73      	ldr	r2, [pc, #460]	@ (8002888 <HAL_RCC_OscConfig+0x474>)
 80026bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c2:	f7fe fe33 	bl	800132c <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ca:	f7fe fe2f 	bl	800132c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e10c      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002888 <HAL_RCC_OscConfig+0x474>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d106      	bne.n	80026fe <HAL_RCC_OscConfig+0x2ea>
 80026f0:	4b64      	ldr	r3, [pc, #400]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f4:	4a63      	ldr	r2, [pc, #396]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80026fc:	e01c      	b.n	8002738 <HAL_RCC_OscConfig+0x324>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b05      	cmp	r3, #5
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x30c>
 8002706:	4b5f      	ldr	r3, [pc, #380]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270a:	4a5e      	ldr	r2, [pc, #376]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	6713      	str	r3, [r2, #112]	@ 0x70
 8002712:	4b5c      	ldr	r3, [pc, #368]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002716:	4a5b      	ldr	r2, [pc, #364]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6713      	str	r3, [r2, #112]	@ 0x70
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0x324>
 8002720:	4b58      	ldr	r3, [pc, #352]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	4a57      	ldr	r2, [pc, #348]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	6713      	str	r3, [r2, #112]	@ 0x70
 800272c:	4b55      	ldr	r3, [pc, #340]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	4a54      	ldr	r2, [pc, #336]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002732:	f023 0304 	bic.w	r3, r3, #4
 8002736:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d015      	beq.n	800276c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7fe fdf4 	bl	800132c <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002748:	f7fe fdf0 	bl	800132c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e0cb      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275e:	4b49      	ldr	r3, [pc, #292]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0ee      	beq.n	8002748 <HAL_RCC_OscConfig+0x334>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276c:	f7fe fdde 	bl	800132c <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002772:	e00a      	b.n	800278a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7fe fdda 	bl	800132c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0b5      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278a:	4b3e      	ldr	r3, [pc, #248]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ee      	bne.n	8002774 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002796:	7dfb      	ldrb	r3, [r7, #23]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279c:	4b39      	ldr	r3, [pc, #228]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	4a38      	ldr	r2, [pc, #224]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80027a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80a1 	beq.w	80028f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b2:	4b34      	ldr	r3, [pc, #208]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d05c      	beq.n	8002878 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d141      	bne.n	800284a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	4b31      	ldr	r3, [pc, #196]	@ (800288c <HAL_RCC_OscConfig+0x478>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fdae 	bl	800132c <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7fe fdaa 	bl	800132c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e087      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e6:	4b27      	ldr	r3, [pc, #156]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	019b      	lsls	r3, r3, #6
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	3b01      	subs	r3, #1
 800280c:	041b      	lsls	r3, r3, #16
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	491b      	ldr	r1, [pc, #108]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281c:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <HAL_RCC_OscConfig+0x478>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7fe fd83 	bl	800132c <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282a:	f7fe fd7f 	bl	800132c <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e05c      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283c:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x416>
 8002848:	e054      	b.n	80028f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b10      	ldr	r3, [pc, #64]	@ (800288c <HAL_RCC_OscConfig+0x478>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe fd6c 	bl	800132c <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe fd68 	bl	800132c <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e045      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <HAL_RCC_OscConfig+0x470>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x444>
 8002876:	e03d      	b.n	80028f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d107      	bne.n	8002890 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e038      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
 8002884:	40023800 	.word	0x40023800
 8002888:	40007000 	.word	0x40007000
 800288c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002890:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <HAL_RCC_OscConfig+0x4ec>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d028      	beq.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d121      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d11a      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028c0:	4013      	ands	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d111      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	3b01      	subs	r3, #1
 80028da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028dc:	429a      	cmp	r2, r3
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800

08002904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0cc      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b68      	ldr	r3, [pc, #416]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d90c      	bls.n	8002940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b65      	ldr	r3, [pc, #404]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b63      	ldr	r3, [pc, #396]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0b8      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d020      	beq.n	800298e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002958:	4b59      	ldr	r3, [pc, #356]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a58      	ldr	r2, [pc, #352]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002962:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002970:	4b53      	ldr	r3, [pc, #332]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	4a52      	ldr	r2, [pc, #328]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800297a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297c:	4b50      	ldr	r3, [pc, #320]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	494d      	ldr	r1, [pc, #308]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d044      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	4b47      	ldr	r3, [pc, #284]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d119      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e07f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d003      	beq.n	80029c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029be:	2b03      	cmp	r3, #3
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e067      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e2:	4b37      	ldr	r3, [pc, #220]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f023 0203 	bic.w	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4934      	ldr	r1, [pc, #208]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f4:	f7fe fc9a 	bl	800132c <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	e00a      	b.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fc:	f7fe fc96 	bl	800132c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e04f      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 020c 	and.w	r2, r3, #12
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d1eb      	bne.n	80029fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	4b25      	ldr	r3, [pc, #148]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d20c      	bcs.n	8002a4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b20      	ldr	r3, [pc, #128]	@ (8002abc <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e032      	b.n	8002ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a58:	4b19      	ldr	r3, [pc, #100]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4916      	ldr	r1, [pc, #88]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a76:	4b12      	ldr	r3, [pc, #72]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	490e      	ldr	r1, [pc, #56]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a8a:	f000 f821 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	490a      	ldr	r1, [pc, #40]	@ (8002ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	5ccb      	ldrb	r3, [r1, r3]
 8002a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa2:	4a09      	ldr	r2, [pc, #36]	@ (8002ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fbfa 	bl	80012a4 <HAL_InitTick>

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023c00 	.word	0x40023c00
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	08003f64 	.word	0x08003f64
 8002ac8:	20000018 	.word	0x20000018
 8002acc:	2000001c 	.word	0x2000001c

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad4:	b094      	sub	sp, #80	@ 0x50
 8002ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae8:	4b79      	ldr	r3, [pc, #484]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d00d      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0x40>
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	f200 80e1 	bhi.w	8002cbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x34>
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b02:	e0db      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b73      	ldr	r3, [pc, #460]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b08:	e0db      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b0a:	4b73      	ldr	r3, [pc, #460]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b0e:	e0d8      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b10:	4b6f      	ldr	r3, [pc, #444]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d063      	beq.n	8002bee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b26:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	099b      	lsrs	r3, r3, #6
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b42:	4622      	mov	r2, r4
 8002b44:	462b      	mov	r3, r5
 8002b46:	f04f 0000 	mov.w	r0, #0
 8002b4a:	f04f 0100 	mov.w	r1, #0
 8002b4e:	0159      	lsls	r1, r3, #5
 8002b50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b54:	0150      	lsls	r0, r2, #5
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	1a51      	subs	r1, r2, r1
 8002b5e:	6139      	str	r1, [r7, #16]
 8002b60:	4629      	mov	r1, r5
 8002b62:	eb63 0301 	sbc.w	r3, r3, r1
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b74:	4659      	mov	r1, fp
 8002b76:	018b      	lsls	r3, r1, #6
 8002b78:	4651      	mov	r1, sl
 8002b7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b7e:	4651      	mov	r1, sl
 8002b80:	018a      	lsls	r2, r1, #6
 8002b82:	4651      	mov	r1, sl
 8002b84:	ebb2 0801 	subs.w	r8, r2, r1
 8002b88:	4659      	mov	r1, fp
 8002b8a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ba2:	4690      	mov	r8, r2
 8002ba4:	4699      	mov	r9, r3
 8002ba6:	4623      	mov	r3, r4
 8002ba8:	eb18 0303 	adds.w	r3, r8, r3
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	462b      	mov	r3, r5
 8002bb0:	eb49 0303 	adc.w	r3, r9, r3
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	024b      	lsls	r3, r1, #9
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bcc:	4621      	mov	r1, r4
 8002bce:	024a      	lsls	r2, r1, #9
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002be0:	f7fd fb4e 	bl	8000280 <__aeabi_uldivmod>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4613      	mov	r3, r2
 8002bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bec:	e058      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bee:	4b38      	ldr	r3, [pc, #224]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	099b      	lsrs	r3, r3, #6
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bfe:	623b      	str	r3, [r7, #32]
 8002c00:	2300      	movs	r3, #0
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c08:	4642      	mov	r2, r8
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	f04f 0000 	mov.w	r0, #0
 8002c10:	f04f 0100 	mov.w	r1, #0
 8002c14:	0159      	lsls	r1, r3, #5
 8002c16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c1a:	0150      	lsls	r0, r2, #5
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4641      	mov	r1, r8
 8002c22:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c26:	4649      	mov	r1, r9
 8002c28:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c40:	ebb2 040a 	subs.w	r4, r2, sl
 8002c44:	eb63 050b 	sbc.w	r5, r3, fp
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	00eb      	lsls	r3, r5, #3
 8002c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c56:	00e2      	lsls	r2, r4, #3
 8002c58:	4614      	mov	r4, r2
 8002c5a:	461d      	mov	r5, r3
 8002c5c:	4643      	mov	r3, r8
 8002c5e:	18e3      	adds	r3, r4, r3
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	464b      	mov	r3, r9
 8002c64:	eb45 0303 	adc.w	r3, r5, r3
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c76:	4629      	mov	r1, r5
 8002c78:	028b      	lsls	r3, r1, #10
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c80:	4621      	mov	r1, r4
 8002c82:	028a      	lsls	r2, r1, #10
 8002c84:	4610      	mov	r0, r2
 8002c86:	4619      	mov	r1, r3
 8002c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	61fa      	str	r2, [r7, #28]
 8002c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c94:	f7fd faf4 	bl	8000280 <__aeabi_uldivmod>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	3301      	adds	r3, #1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002cb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cba:	e002      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cbc:	4b05      	ldr	r3, [pc, #20]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3750      	adds	r7, #80	@ 0x50
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	00f42400 	.word	0x00f42400
 8002cd8:	007a1200 	.word	0x007a1200

08002cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	@ (8002cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000018 	.word	0x20000018

08002cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cf8:	f7ff fff0 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0a9b      	lsrs	r3, r3, #10
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	@ (8002d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08003f74 	.word	0x08003f74

08002d1c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d105      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d038      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d44:	4b68      	ldr	r3, [pc, #416]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d4a:	f7fe faef 	bl	800132c <HAL_GetTick>
 8002d4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d52:	f7fe faeb 	bl	800132c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e0bd      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d64:	4b61      	ldr	r3, [pc, #388]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	019b      	lsls	r3, r3, #6
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	071b      	lsls	r3, r3, #28
 8002d82:	495a      	ldr	r1, [pc, #360]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d8a:	4b57      	ldr	r3, [pc, #348]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d90:	f7fe facc 	bl	800132c <HAL_GetTick>
 8002d94:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d98:	f7fe fac8 	bl	800132c <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e09a      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002daa:	4b50      	ldr	r3, [pc, #320]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8083 	beq.w	8002eca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	4b48      	ldr	r3, [pc, #288]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	4a47      	ldr	r2, [pc, #284]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dd4:	4b45      	ldr	r3, [pc, #276]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002de0:	4b43      	ldr	r3, [pc, #268]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a42      	ldr	r2, [pc, #264]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dec:	f7fe fa9e 	bl	800132c <HAL_GetTick>
 8002df0:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df4:	f7fe fa9a 	bl	800132c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e06c      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002e06:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e12:	4b36      	ldr	r3, [pc, #216]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e1a:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d02f      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d028      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e30:	4b2e      	ldr	r3, [pc, #184]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e38:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e40:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e46:	4a29      	ldr	r2, [pc, #164]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e4c:	4b27      	ldr	r3, [pc, #156]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d114      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe fa68 	bl	800132c <HAL_GetTick>
 8002e5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e60:	f7fe fa64 	bl	800132c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e034      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e76:	4b1d      	ldr	r3, [pc, #116]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0ee      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e8e:	d10d      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002e90:	4b16      	ldr	r3, [pc, #88]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002ea0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ea4:	4911      	ldr	r1, [pc, #68]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
 8002eaa:	e005      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002eac:	4b0f      	ldr	r3, [pc, #60]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a0e      	ldr	r2, [pc, #56]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002eb6:	6093      	str	r3, [r2, #8]
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec4:	4909      	ldr	r1, [pc, #36]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7d1a      	ldrb	r2, [r3, #20]
 8002eda:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002edc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	42470068 	.word	0x42470068
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	42470e40 	.word	0x42470e40
 8002ef8:	424711e0 	.word	0x424711e0

08002efc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d141      	bne.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002f1a:	4b25      	ldr	r3, [pc, #148]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f22:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f30:	d131      	bne.n	8002f96 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002f32:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002f34:	617b      	str	r3, [r7, #20]
          break;
 8002f36:	e031      	b.n	8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f38:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f44:	d109      	bne.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002f46:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f50:	4a19      	ldr	r2, [pc, #100]	@ (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	e008      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002f5a:	4b15      	ldr	r3, [pc, #84]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f64:	4a15      	ldr	r2, [pc, #84]	@ (8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002f6c:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f72:	099b      	lsrs	r3, r3, #6
 8002f74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002f80:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f86:	0f1b      	lsrs	r3, r3, #28
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	617b      	str	r3, [r7, #20]
          break;
 8002f94:	e002      	b.n	8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
          break;
 8002f9a:	bf00      	nop
        }
      }
      break;
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8002f9e:	bf00      	nop
    }
  }
  return frequency;
 8002fa0:	697b      	ldr	r3, [r7, #20]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	00bb8000 	.word	0x00bb8000
 8002fb8:	007a1200 	.word	0x007a1200
 8002fbc:	00f42400 	.word	0x00f42400

08002fc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e07b      	b.n	80030ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d108      	bne.n	8002fec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fe2:	d009      	beq.n	8002ff8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61da      	str	r2, [r3, #28]
 8002fea:	e005      	b.n	8002ff8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fd ffea 	bl	8000fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800302e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307c:	ea42 0103 	orr.w	r1, r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003084:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	0c1b      	lsrs	r3, r3, #16
 8003096:	f003 0104 	and.w	r1, r3, #4
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	f003 0210 	and.w	r2, r3, #16
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <std>:
 80030d4:	2300      	movs	r3, #0
 80030d6:	b510      	push	{r4, lr}
 80030d8:	4604      	mov	r4, r0
 80030da:	e9c0 3300 	strd	r3, r3, [r0]
 80030de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030e2:	6083      	str	r3, [r0, #8]
 80030e4:	8181      	strh	r1, [r0, #12]
 80030e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80030e8:	81c2      	strh	r2, [r0, #14]
 80030ea:	6183      	str	r3, [r0, #24]
 80030ec:	4619      	mov	r1, r3
 80030ee:	2208      	movs	r2, #8
 80030f0:	305c      	adds	r0, #92	@ 0x5c
 80030f2:	f000 f906 	bl	8003302 <memset>
 80030f6:	4b0d      	ldr	r3, [pc, #52]	@ (800312c <std+0x58>)
 80030f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80030fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <std+0x5c>)
 80030fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <std+0x60>)
 8003100:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003102:	4b0d      	ldr	r3, [pc, #52]	@ (8003138 <std+0x64>)
 8003104:	6323      	str	r3, [r4, #48]	@ 0x30
 8003106:	4b0d      	ldr	r3, [pc, #52]	@ (800313c <std+0x68>)
 8003108:	6224      	str	r4, [r4, #32]
 800310a:	429c      	cmp	r4, r3
 800310c:	d006      	beq.n	800311c <std+0x48>
 800310e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003112:	4294      	cmp	r4, r2
 8003114:	d002      	beq.n	800311c <std+0x48>
 8003116:	33d0      	adds	r3, #208	@ 0xd0
 8003118:	429c      	cmp	r4, r3
 800311a:	d105      	bne.n	8003128 <std+0x54>
 800311c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003124:	f000 b966 	b.w	80033f4 <__retarget_lock_init_recursive>
 8003128:	bd10      	pop	{r4, pc}
 800312a:	bf00      	nop
 800312c:	0800327d 	.word	0x0800327d
 8003130:	0800329f 	.word	0x0800329f
 8003134:	080032d7 	.word	0x080032d7
 8003138:	080032fb 	.word	0x080032fb
 800313c:	200001e0 	.word	0x200001e0

08003140 <stdio_exit_handler>:
 8003140:	4a02      	ldr	r2, [pc, #8]	@ (800314c <stdio_exit_handler+0xc>)
 8003142:	4903      	ldr	r1, [pc, #12]	@ (8003150 <stdio_exit_handler+0x10>)
 8003144:	4803      	ldr	r0, [pc, #12]	@ (8003154 <stdio_exit_handler+0x14>)
 8003146:	f000 b869 	b.w	800321c <_fwalk_sglue>
 800314a:	bf00      	nop
 800314c:	20000024 	.word	0x20000024
 8003150:	08003c91 	.word	0x08003c91
 8003154:	20000034 	.word	0x20000034

08003158 <cleanup_stdio>:
 8003158:	6841      	ldr	r1, [r0, #4]
 800315a:	4b0c      	ldr	r3, [pc, #48]	@ (800318c <cleanup_stdio+0x34>)
 800315c:	4299      	cmp	r1, r3
 800315e:	b510      	push	{r4, lr}
 8003160:	4604      	mov	r4, r0
 8003162:	d001      	beq.n	8003168 <cleanup_stdio+0x10>
 8003164:	f000 fd94 	bl	8003c90 <_fflush_r>
 8003168:	68a1      	ldr	r1, [r4, #8]
 800316a:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <cleanup_stdio+0x38>)
 800316c:	4299      	cmp	r1, r3
 800316e:	d002      	beq.n	8003176 <cleanup_stdio+0x1e>
 8003170:	4620      	mov	r0, r4
 8003172:	f000 fd8d 	bl	8003c90 <_fflush_r>
 8003176:	68e1      	ldr	r1, [r4, #12]
 8003178:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <cleanup_stdio+0x3c>)
 800317a:	4299      	cmp	r1, r3
 800317c:	d004      	beq.n	8003188 <cleanup_stdio+0x30>
 800317e:	4620      	mov	r0, r4
 8003180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003184:	f000 bd84 	b.w	8003c90 <_fflush_r>
 8003188:	bd10      	pop	{r4, pc}
 800318a:	bf00      	nop
 800318c:	200001e0 	.word	0x200001e0
 8003190:	20000248 	.word	0x20000248
 8003194:	200002b0 	.word	0x200002b0

08003198 <global_stdio_init.part.0>:
 8003198:	b510      	push	{r4, lr}
 800319a:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <global_stdio_init.part.0+0x30>)
 800319c:	4c0b      	ldr	r4, [pc, #44]	@ (80031cc <global_stdio_init.part.0+0x34>)
 800319e:	4a0c      	ldr	r2, [pc, #48]	@ (80031d0 <global_stdio_init.part.0+0x38>)
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	4620      	mov	r0, r4
 80031a4:	2200      	movs	r2, #0
 80031a6:	2104      	movs	r1, #4
 80031a8:	f7ff ff94 	bl	80030d4 <std>
 80031ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80031b0:	2201      	movs	r2, #1
 80031b2:	2109      	movs	r1, #9
 80031b4:	f7ff ff8e 	bl	80030d4 <std>
 80031b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80031bc:	2202      	movs	r2, #2
 80031be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031c2:	2112      	movs	r1, #18
 80031c4:	f7ff bf86 	b.w	80030d4 <std>
 80031c8:	20000318 	.word	0x20000318
 80031cc:	200001e0 	.word	0x200001e0
 80031d0:	08003141 	.word	0x08003141

080031d4 <__sfp_lock_acquire>:
 80031d4:	4801      	ldr	r0, [pc, #4]	@ (80031dc <__sfp_lock_acquire+0x8>)
 80031d6:	f000 b90e 	b.w	80033f6 <__retarget_lock_acquire_recursive>
 80031da:	bf00      	nop
 80031dc:	20000321 	.word	0x20000321

080031e0 <__sfp_lock_release>:
 80031e0:	4801      	ldr	r0, [pc, #4]	@ (80031e8 <__sfp_lock_release+0x8>)
 80031e2:	f000 b909 	b.w	80033f8 <__retarget_lock_release_recursive>
 80031e6:	bf00      	nop
 80031e8:	20000321 	.word	0x20000321

080031ec <__sinit>:
 80031ec:	b510      	push	{r4, lr}
 80031ee:	4604      	mov	r4, r0
 80031f0:	f7ff fff0 	bl	80031d4 <__sfp_lock_acquire>
 80031f4:	6a23      	ldr	r3, [r4, #32]
 80031f6:	b11b      	cbz	r3, 8003200 <__sinit+0x14>
 80031f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031fc:	f7ff bff0 	b.w	80031e0 <__sfp_lock_release>
 8003200:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <__sinit+0x28>)
 8003202:	6223      	str	r3, [r4, #32]
 8003204:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <__sinit+0x2c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f5      	bne.n	80031f8 <__sinit+0xc>
 800320c:	f7ff ffc4 	bl	8003198 <global_stdio_init.part.0>
 8003210:	e7f2      	b.n	80031f8 <__sinit+0xc>
 8003212:	bf00      	nop
 8003214:	08003159 	.word	0x08003159
 8003218:	20000318 	.word	0x20000318

0800321c <_fwalk_sglue>:
 800321c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003220:	4607      	mov	r7, r0
 8003222:	4688      	mov	r8, r1
 8003224:	4614      	mov	r4, r2
 8003226:	2600      	movs	r6, #0
 8003228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800322c:	f1b9 0901 	subs.w	r9, r9, #1
 8003230:	d505      	bpl.n	800323e <_fwalk_sglue+0x22>
 8003232:	6824      	ldr	r4, [r4, #0]
 8003234:	2c00      	cmp	r4, #0
 8003236:	d1f7      	bne.n	8003228 <_fwalk_sglue+0xc>
 8003238:	4630      	mov	r0, r6
 800323a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800323e:	89ab      	ldrh	r3, [r5, #12]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d907      	bls.n	8003254 <_fwalk_sglue+0x38>
 8003244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003248:	3301      	adds	r3, #1
 800324a:	d003      	beq.n	8003254 <_fwalk_sglue+0x38>
 800324c:	4629      	mov	r1, r5
 800324e:	4638      	mov	r0, r7
 8003250:	47c0      	blx	r8
 8003252:	4306      	orrs	r6, r0
 8003254:	3568      	adds	r5, #104	@ 0x68
 8003256:	e7e9      	b.n	800322c <_fwalk_sglue+0x10>

08003258 <iprintf>:
 8003258:	b40f      	push	{r0, r1, r2, r3}
 800325a:	b507      	push	{r0, r1, r2, lr}
 800325c:	4906      	ldr	r1, [pc, #24]	@ (8003278 <iprintf+0x20>)
 800325e:	ab04      	add	r3, sp, #16
 8003260:	6808      	ldr	r0, [r1, #0]
 8003262:	f853 2b04 	ldr.w	r2, [r3], #4
 8003266:	6881      	ldr	r1, [r0, #8]
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	f000 f9e9 	bl	8003640 <_vfiprintf_r>
 800326e:	b003      	add	sp, #12
 8003270:	f85d eb04 	ldr.w	lr, [sp], #4
 8003274:	b004      	add	sp, #16
 8003276:	4770      	bx	lr
 8003278:	20000030 	.word	0x20000030

0800327c <__sread>:
 800327c:	b510      	push	{r4, lr}
 800327e:	460c      	mov	r4, r1
 8003280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003284:	f000 f868 	bl	8003358 <_read_r>
 8003288:	2800      	cmp	r0, #0
 800328a:	bfab      	itete	ge
 800328c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800328e:	89a3      	ldrhlt	r3, [r4, #12]
 8003290:	181b      	addge	r3, r3, r0
 8003292:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003296:	bfac      	ite	ge
 8003298:	6563      	strge	r3, [r4, #84]	@ 0x54
 800329a:	81a3      	strhlt	r3, [r4, #12]
 800329c:	bd10      	pop	{r4, pc}

0800329e <__swrite>:
 800329e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032a2:	461f      	mov	r7, r3
 80032a4:	898b      	ldrh	r3, [r1, #12]
 80032a6:	05db      	lsls	r3, r3, #23
 80032a8:	4605      	mov	r5, r0
 80032aa:	460c      	mov	r4, r1
 80032ac:	4616      	mov	r6, r2
 80032ae:	d505      	bpl.n	80032bc <__swrite+0x1e>
 80032b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032b4:	2302      	movs	r3, #2
 80032b6:	2200      	movs	r2, #0
 80032b8:	f000 f83c 	bl	8003334 <_lseek_r>
 80032bc:	89a3      	ldrh	r3, [r4, #12]
 80032be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032c6:	81a3      	strh	r3, [r4, #12]
 80032c8:	4632      	mov	r2, r6
 80032ca:	463b      	mov	r3, r7
 80032cc:	4628      	mov	r0, r5
 80032ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032d2:	f000 b853 	b.w	800337c <_write_r>

080032d6 <__sseek>:
 80032d6:	b510      	push	{r4, lr}
 80032d8:	460c      	mov	r4, r1
 80032da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032de:	f000 f829 	bl	8003334 <_lseek_r>
 80032e2:	1c43      	adds	r3, r0, #1
 80032e4:	89a3      	ldrh	r3, [r4, #12]
 80032e6:	bf15      	itete	ne
 80032e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80032ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80032ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80032f2:	81a3      	strheq	r3, [r4, #12]
 80032f4:	bf18      	it	ne
 80032f6:	81a3      	strhne	r3, [r4, #12]
 80032f8:	bd10      	pop	{r4, pc}

080032fa <__sclose>:
 80032fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032fe:	f000 b809 	b.w	8003314 <_close_r>

08003302 <memset>:
 8003302:	4402      	add	r2, r0
 8003304:	4603      	mov	r3, r0
 8003306:	4293      	cmp	r3, r2
 8003308:	d100      	bne.n	800330c <memset+0xa>
 800330a:	4770      	bx	lr
 800330c:	f803 1b01 	strb.w	r1, [r3], #1
 8003310:	e7f9      	b.n	8003306 <memset+0x4>
	...

08003314 <_close_r>:
 8003314:	b538      	push	{r3, r4, r5, lr}
 8003316:	4d06      	ldr	r5, [pc, #24]	@ (8003330 <_close_r+0x1c>)
 8003318:	2300      	movs	r3, #0
 800331a:	4604      	mov	r4, r0
 800331c:	4608      	mov	r0, r1
 800331e:	602b      	str	r3, [r5, #0]
 8003320:	f7fd fef8 	bl	8001114 <_close>
 8003324:	1c43      	adds	r3, r0, #1
 8003326:	d102      	bne.n	800332e <_close_r+0x1a>
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	b103      	cbz	r3, 800332e <_close_r+0x1a>
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	bd38      	pop	{r3, r4, r5, pc}
 8003330:	2000031c 	.word	0x2000031c

08003334 <_lseek_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	4d07      	ldr	r5, [pc, #28]	@ (8003354 <_lseek_r+0x20>)
 8003338:	4604      	mov	r4, r0
 800333a:	4608      	mov	r0, r1
 800333c:	4611      	mov	r1, r2
 800333e:	2200      	movs	r2, #0
 8003340:	602a      	str	r2, [r5, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	f7fd ff0d 	bl	8001162 <_lseek>
 8003348:	1c43      	adds	r3, r0, #1
 800334a:	d102      	bne.n	8003352 <_lseek_r+0x1e>
 800334c:	682b      	ldr	r3, [r5, #0]
 800334e:	b103      	cbz	r3, 8003352 <_lseek_r+0x1e>
 8003350:	6023      	str	r3, [r4, #0]
 8003352:	bd38      	pop	{r3, r4, r5, pc}
 8003354:	2000031c 	.word	0x2000031c

08003358 <_read_r>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	4d07      	ldr	r5, [pc, #28]	@ (8003378 <_read_r+0x20>)
 800335c:	4604      	mov	r4, r0
 800335e:	4608      	mov	r0, r1
 8003360:	4611      	mov	r1, r2
 8003362:	2200      	movs	r2, #0
 8003364:	602a      	str	r2, [r5, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	f7fd feb7 	bl	80010da <_read>
 800336c:	1c43      	adds	r3, r0, #1
 800336e:	d102      	bne.n	8003376 <_read_r+0x1e>
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	b103      	cbz	r3, 8003376 <_read_r+0x1e>
 8003374:	6023      	str	r3, [r4, #0]
 8003376:	bd38      	pop	{r3, r4, r5, pc}
 8003378:	2000031c 	.word	0x2000031c

0800337c <_write_r>:
 800337c:	b538      	push	{r3, r4, r5, lr}
 800337e:	4d07      	ldr	r5, [pc, #28]	@ (800339c <_write_r+0x20>)
 8003380:	4604      	mov	r4, r0
 8003382:	4608      	mov	r0, r1
 8003384:	4611      	mov	r1, r2
 8003386:	2200      	movs	r2, #0
 8003388:	602a      	str	r2, [r5, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	f7fd fcce 	bl	8000d2c <_write>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_write_r+0x1e>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_write_r+0x1e>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	2000031c 	.word	0x2000031c

080033a0 <__errno>:
 80033a0:	4b01      	ldr	r3, [pc, #4]	@ (80033a8 <__errno+0x8>)
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20000030 	.word	0x20000030

080033ac <__libc_init_array>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4d0d      	ldr	r5, [pc, #52]	@ (80033e4 <__libc_init_array+0x38>)
 80033b0:	4c0d      	ldr	r4, [pc, #52]	@ (80033e8 <__libc_init_array+0x3c>)
 80033b2:	1b64      	subs	r4, r4, r5
 80033b4:	10a4      	asrs	r4, r4, #2
 80033b6:	2600      	movs	r6, #0
 80033b8:	42a6      	cmp	r6, r4
 80033ba:	d109      	bne.n	80033d0 <__libc_init_array+0x24>
 80033bc:	4d0b      	ldr	r5, [pc, #44]	@ (80033ec <__libc_init_array+0x40>)
 80033be:	4c0c      	ldr	r4, [pc, #48]	@ (80033f0 <__libc_init_array+0x44>)
 80033c0:	f000 fdb6 	bl	8003f30 <_init>
 80033c4:	1b64      	subs	r4, r4, r5
 80033c6:	10a4      	asrs	r4, r4, #2
 80033c8:	2600      	movs	r6, #0
 80033ca:	42a6      	cmp	r6, r4
 80033cc:	d105      	bne.n	80033da <__libc_init_array+0x2e>
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d4:	4798      	blx	r3
 80033d6:	3601      	adds	r6, #1
 80033d8:	e7ee      	b.n	80033b8 <__libc_init_array+0xc>
 80033da:	f855 3b04 	ldr.w	r3, [r5], #4
 80033de:	4798      	blx	r3
 80033e0:	3601      	adds	r6, #1
 80033e2:	e7f2      	b.n	80033ca <__libc_init_array+0x1e>
 80033e4:	08003fb8 	.word	0x08003fb8
 80033e8:	08003fb8 	.word	0x08003fb8
 80033ec:	08003fb8 	.word	0x08003fb8
 80033f0:	08003fbc 	.word	0x08003fbc

080033f4 <__retarget_lock_init_recursive>:
 80033f4:	4770      	bx	lr

080033f6 <__retarget_lock_acquire_recursive>:
 80033f6:	4770      	bx	lr

080033f8 <__retarget_lock_release_recursive>:
 80033f8:	4770      	bx	lr
	...

080033fc <_free_r>:
 80033fc:	b538      	push	{r3, r4, r5, lr}
 80033fe:	4605      	mov	r5, r0
 8003400:	2900      	cmp	r1, #0
 8003402:	d041      	beq.n	8003488 <_free_r+0x8c>
 8003404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003408:	1f0c      	subs	r4, r1, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	bfb8      	it	lt
 800340e:	18e4      	addlt	r4, r4, r3
 8003410:	f000 f8e0 	bl	80035d4 <__malloc_lock>
 8003414:	4a1d      	ldr	r2, [pc, #116]	@ (800348c <_free_r+0x90>)
 8003416:	6813      	ldr	r3, [r2, #0]
 8003418:	b933      	cbnz	r3, 8003428 <_free_r+0x2c>
 800341a:	6063      	str	r3, [r4, #4]
 800341c:	6014      	str	r4, [r2, #0]
 800341e:	4628      	mov	r0, r5
 8003420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003424:	f000 b8dc 	b.w	80035e0 <__malloc_unlock>
 8003428:	42a3      	cmp	r3, r4
 800342a:	d908      	bls.n	800343e <_free_r+0x42>
 800342c:	6820      	ldr	r0, [r4, #0]
 800342e:	1821      	adds	r1, r4, r0
 8003430:	428b      	cmp	r3, r1
 8003432:	bf01      	itttt	eq
 8003434:	6819      	ldreq	r1, [r3, #0]
 8003436:	685b      	ldreq	r3, [r3, #4]
 8003438:	1809      	addeq	r1, r1, r0
 800343a:	6021      	streq	r1, [r4, #0]
 800343c:	e7ed      	b.n	800341a <_free_r+0x1e>
 800343e:	461a      	mov	r2, r3
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	b10b      	cbz	r3, 8003448 <_free_r+0x4c>
 8003444:	42a3      	cmp	r3, r4
 8003446:	d9fa      	bls.n	800343e <_free_r+0x42>
 8003448:	6811      	ldr	r1, [r2, #0]
 800344a:	1850      	adds	r0, r2, r1
 800344c:	42a0      	cmp	r0, r4
 800344e:	d10b      	bne.n	8003468 <_free_r+0x6c>
 8003450:	6820      	ldr	r0, [r4, #0]
 8003452:	4401      	add	r1, r0
 8003454:	1850      	adds	r0, r2, r1
 8003456:	4283      	cmp	r3, r0
 8003458:	6011      	str	r1, [r2, #0]
 800345a:	d1e0      	bne.n	800341e <_free_r+0x22>
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	6053      	str	r3, [r2, #4]
 8003462:	4408      	add	r0, r1
 8003464:	6010      	str	r0, [r2, #0]
 8003466:	e7da      	b.n	800341e <_free_r+0x22>
 8003468:	d902      	bls.n	8003470 <_free_r+0x74>
 800346a:	230c      	movs	r3, #12
 800346c:	602b      	str	r3, [r5, #0]
 800346e:	e7d6      	b.n	800341e <_free_r+0x22>
 8003470:	6820      	ldr	r0, [r4, #0]
 8003472:	1821      	adds	r1, r4, r0
 8003474:	428b      	cmp	r3, r1
 8003476:	bf04      	itt	eq
 8003478:	6819      	ldreq	r1, [r3, #0]
 800347a:	685b      	ldreq	r3, [r3, #4]
 800347c:	6063      	str	r3, [r4, #4]
 800347e:	bf04      	itt	eq
 8003480:	1809      	addeq	r1, r1, r0
 8003482:	6021      	streq	r1, [r4, #0]
 8003484:	6054      	str	r4, [r2, #4]
 8003486:	e7ca      	b.n	800341e <_free_r+0x22>
 8003488:	bd38      	pop	{r3, r4, r5, pc}
 800348a:	bf00      	nop
 800348c:	20000328 	.word	0x20000328

08003490 <sbrk_aligned>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	4e0f      	ldr	r6, [pc, #60]	@ (80034d0 <sbrk_aligned+0x40>)
 8003494:	460c      	mov	r4, r1
 8003496:	6831      	ldr	r1, [r6, #0]
 8003498:	4605      	mov	r5, r0
 800349a:	b911      	cbnz	r1, 80034a2 <sbrk_aligned+0x12>
 800349c:	f000 fcb4 	bl	8003e08 <_sbrk_r>
 80034a0:	6030      	str	r0, [r6, #0]
 80034a2:	4621      	mov	r1, r4
 80034a4:	4628      	mov	r0, r5
 80034a6:	f000 fcaf 	bl	8003e08 <_sbrk_r>
 80034aa:	1c43      	adds	r3, r0, #1
 80034ac:	d103      	bne.n	80034b6 <sbrk_aligned+0x26>
 80034ae:	f04f 34ff 	mov.w	r4, #4294967295
 80034b2:	4620      	mov	r0, r4
 80034b4:	bd70      	pop	{r4, r5, r6, pc}
 80034b6:	1cc4      	adds	r4, r0, #3
 80034b8:	f024 0403 	bic.w	r4, r4, #3
 80034bc:	42a0      	cmp	r0, r4
 80034be:	d0f8      	beq.n	80034b2 <sbrk_aligned+0x22>
 80034c0:	1a21      	subs	r1, r4, r0
 80034c2:	4628      	mov	r0, r5
 80034c4:	f000 fca0 	bl	8003e08 <_sbrk_r>
 80034c8:	3001      	adds	r0, #1
 80034ca:	d1f2      	bne.n	80034b2 <sbrk_aligned+0x22>
 80034cc:	e7ef      	b.n	80034ae <sbrk_aligned+0x1e>
 80034ce:	bf00      	nop
 80034d0:	20000324 	.word	0x20000324

080034d4 <_malloc_r>:
 80034d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d8:	1ccd      	adds	r5, r1, #3
 80034da:	f025 0503 	bic.w	r5, r5, #3
 80034de:	3508      	adds	r5, #8
 80034e0:	2d0c      	cmp	r5, #12
 80034e2:	bf38      	it	cc
 80034e4:	250c      	movcc	r5, #12
 80034e6:	2d00      	cmp	r5, #0
 80034e8:	4606      	mov	r6, r0
 80034ea:	db01      	blt.n	80034f0 <_malloc_r+0x1c>
 80034ec:	42a9      	cmp	r1, r5
 80034ee:	d904      	bls.n	80034fa <_malloc_r+0x26>
 80034f0:	230c      	movs	r3, #12
 80034f2:	6033      	str	r3, [r6, #0]
 80034f4:	2000      	movs	r0, #0
 80034f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035d0 <_malloc_r+0xfc>
 80034fe:	f000 f869 	bl	80035d4 <__malloc_lock>
 8003502:	f8d8 3000 	ldr.w	r3, [r8]
 8003506:	461c      	mov	r4, r3
 8003508:	bb44      	cbnz	r4, 800355c <_malloc_r+0x88>
 800350a:	4629      	mov	r1, r5
 800350c:	4630      	mov	r0, r6
 800350e:	f7ff ffbf 	bl	8003490 <sbrk_aligned>
 8003512:	1c43      	adds	r3, r0, #1
 8003514:	4604      	mov	r4, r0
 8003516:	d158      	bne.n	80035ca <_malloc_r+0xf6>
 8003518:	f8d8 4000 	ldr.w	r4, [r8]
 800351c:	4627      	mov	r7, r4
 800351e:	2f00      	cmp	r7, #0
 8003520:	d143      	bne.n	80035aa <_malloc_r+0xd6>
 8003522:	2c00      	cmp	r4, #0
 8003524:	d04b      	beq.n	80035be <_malloc_r+0xea>
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	4639      	mov	r1, r7
 800352a:	4630      	mov	r0, r6
 800352c:	eb04 0903 	add.w	r9, r4, r3
 8003530:	f000 fc6a 	bl	8003e08 <_sbrk_r>
 8003534:	4581      	cmp	r9, r0
 8003536:	d142      	bne.n	80035be <_malloc_r+0xea>
 8003538:	6821      	ldr	r1, [r4, #0]
 800353a:	1a6d      	subs	r5, r5, r1
 800353c:	4629      	mov	r1, r5
 800353e:	4630      	mov	r0, r6
 8003540:	f7ff ffa6 	bl	8003490 <sbrk_aligned>
 8003544:	3001      	adds	r0, #1
 8003546:	d03a      	beq.n	80035be <_malloc_r+0xea>
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	442b      	add	r3, r5
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	f8d8 3000 	ldr.w	r3, [r8]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	bb62      	cbnz	r2, 80035b0 <_malloc_r+0xdc>
 8003556:	f8c8 7000 	str.w	r7, [r8]
 800355a:	e00f      	b.n	800357c <_malloc_r+0xa8>
 800355c:	6822      	ldr	r2, [r4, #0]
 800355e:	1b52      	subs	r2, r2, r5
 8003560:	d420      	bmi.n	80035a4 <_malloc_r+0xd0>
 8003562:	2a0b      	cmp	r2, #11
 8003564:	d917      	bls.n	8003596 <_malloc_r+0xc2>
 8003566:	1961      	adds	r1, r4, r5
 8003568:	42a3      	cmp	r3, r4
 800356a:	6025      	str	r5, [r4, #0]
 800356c:	bf18      	it	ne
 800356e:	6059      	strne	r1, [r3, #4]
 8003570:	6863      	ldr	r3, [r4, #4]
 8003572:	bf08      	it	eq
 8003574:	f8c8 1000 	streq.w	r1, [r8]
 8003578:	5162      	str	r2, [r4, r5]
 800357a:	604b      	str	r3, [r1, #4]
 800357c:	4630      	mov	r0, r6
 800357e:	f000 f82f 	bl	80035e0 <__malloc_unlock>
 8003582:	f104 000b 	add.w	r0, r4, #11
 8003586:	1d23      	adds	r3, r4, #4
 8003588:	f020 0007 	bic.w	r0, r0, #7
 800358c:	1ac2      	subs	r2, r0, r3
 800358e:	bf1c      	itt	ne
 8003590:	1a1b      	subne	r3, r3, r0
 8003592:	50a3      	strne	r3, [r4, r2]
 8003594:	e7af      	b.n	80034f6 <_malloc_r+0x22>
 8003596:	6862      	ldr	r2, [r4, #4]
 8003598:	42a3      	cmp	r3, r4
 800359a:	bf0c      	ite	eq
 800359c:	f8c8 2000 	streq.w	r2, [r8]
 80035a0:	605a      	strne	r2, [r3, #4]
 80035a2:	e7eb      	b.n	800357c <_malloc_r+0xa8>
 80035a4:	4623      	mov	r3, r4
 80035a6:	6864      	ldr	r4, [r4, #4]
 80035a8:	e7ae      	b.n	8003508 <_malloc_r+0x34>
 80035aa:	463c      	mov	r4, r7
 80035ac:	687f      	ldr	r7, [r7, #4]
 80035ae:	e7b6      	b.n	800351e <_malloc_r+0x4a>
 80035b0:	461a      	mov	r2, r3
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	42a3      	cmp	r3, r4
 80035b6:	d1fb      	bne.n	80035b0 <_malloc_r+0xdc>
 80035b8:	2300      	movs	r3, #0
 80035ba:	6053      	str	r3, [r2, #4]
 80035bc:	e7de      	b.n	800357c <_malloc_r+0xa8>
 80035be:	230c      	movs	r3, #12
 80035c0:	6033      	str	r3, [r6, #0]
 80035c2:	4630      	mov	r0, r6
 80035c4:	f000 f80c 	bl	80035e0 <__malloc_unlock>
 80035c8:	e794      	b.n	80034f4 <_malloc_r+0x20>
 80035ca:	6005      	str	r5, [r0, #0]
 80035cc:	e7d6      	b.n	800357c <_malloc_r+0xa8>
 80035ce:	bf00      	nop
 80035d0:	20000328 	.word	0x20000328

080035d4 <__malloc_lock>:
 80035d4:	4801      	ldr	r0, [pc, #4]	@ (80035dc <__malloc_lock+0x8>)
 80035d6:	f7ff bf0e 	b.w	80033f6 <__retarget_lock_acquire_recursive>
 80035da:	bf00      	nop
 80035dc:	20000320 	.word	0x20000320

080035e0 <__malloc_unlock>:
 80035e0:	4801      	ldr	r0, [pc, #4]	@ (80035e8 <__malloc_unlock+0x8>)
 80035e2:	f7ff bf09 	b.w	80033f8 <__retarget_lock_release_recursive>
 80035e6:	bf00      	nop
 80035e8:	20000320 	.word	0x20000320

080035ec <__sfputc_r>:
 80035ec:	6893      	ldr	r3, [r2, #8]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	b410      	push	{r4}
 80035f4:	6093      	str	r3, [r2, #8]
 80035f6:	da08      	bge.n	800360a <__sfputc_r+0x1e>
 80035f8:	6994      	ldr	r4, [r2, #24]
 80035fa:	42a3      	cmp	r3, r4
 80035fc:	db01      	blt.n	8003602 <__sfputc_r+0x16>
 80035fe:	290a      	cmp	r1, #10
 8003600:	d103      	bne.n	800360a <__sfputc_r+0x1e>
 8003602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003606:	f000 bb6b 	b.w	8003ce0 <__swbuf_r>
 800360a:	6813      	ldr	r3, [r2, #0]
 800360c:	1c58      	adds	r0, r3, #1
 800360e:	6010      	str	r0, [r2, #0]
 8003610:	7019      	strb	r1, [r3, #0]
 8003612:	4608      	mov	r0, r1
 8003614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003618:	4770      	bx	lr

0800361a <__sfputs_r>:
 800361a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361c:	4606      	mov	r6, r0
 800361e:	460f      	mov	r7, r1
 8003620:	4614      	mov	r4, r2
 8003622:	18d5      	adds	r5, r2, r3
 8003624:	42ac      	cmp	r4, r5
 8003626:	d101      	bne.n	800362c <__sfputs_r+0x12>
 8003628:	2000      	movs	r0, #0
 800362a:	e007      	b.n	800363c <__sfputs_r+0x22>
 800362c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003630:	463a      	mov	r2, r7
 8003632:	4630      	mov	r0, r6
 8003634:	f7ff ffda 	bl	80035ec <__sfputc_r>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d1f3      	bne.n	8003624 <__sfputs_r+0xa>
 800363c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003640 <_vfiprintf_r>:
 8003640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003644:	460d      	mov	r5, r1
 8003646:	b09d      	sub	sp, #116	@ 0x74
 8003648:	4614      	mov	r4, r2
 800364a:	4698      	mov	r8, r3
 800364c:	4606      	mov	r6, r0
 800364e:	b118      	cbz	r0, 8003658 <_vfiprintf_r+0x18>
 8003650:	6a03      	ldr	r3, [r0, #32]
 8003652:	b90b      	cbnz	r3, 8003658 <_vfiprintf_r+0x18>
 8003654:	f7ff fdca 	bl	80031ec <__sinit>
 8003658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800365a:	07d9      	lsls	r1, r3, #31
 800365c:	d405      	bmi.n	800366a <_vfiprintf_r+0x2a>
 800365e:	89ab      	ldrh	r3, [r5, #12]
 8003660:	059a      	lsls	r2, r3, #22
 8003662:	d402      	bmi.n	800366a <_vfiprintf_r+0x2a>
 8003664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003666:	f7ff fec6 	bl	80033f6 <__retarget_lock_acquire_recursive>
 800366a:	89ab      	ldrh	r3, [r5, #12]
 800366c:	071b      	lsls	r3, r3, #28
 800366e:	d501      	bpl.n	8003674 <_vfiprintf_r+0x34>
 8003670:	692b      	ldr	r3, [r5, #16]
 8003672:	b99b      	cbnz	r3, 800369c <_vfiprintf_r+0x5c>
 8003674:	4629      	mov	r1, r5
 8003676:	4630      	mov	r0, r6
 8003678:	f000 fb70 	bl	8003d5c <__swsetup_r>
 800367c:	b170      	cbz	r0, 800369c <_vfiprintf_r+0x5c>
 800367e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003680:	07dc      	lsls	r4, r3, #31
 8003682:	d504      	bpl.n	800368e <_vfiprintf_r+0x4e>
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	b01d      	add	sp, #116	@ 0x74
 800368a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800368e:	89ab      	ldrh	r3, [r5, #12]
 8003690:	0598      	lsls	r0, r3, #22
 8003692:	d4f7      	bmi.n	8003684 <_vfiprintf_r+0x44>
 8003694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003696:	f7ff feaf 	bl	80033f8 <__retarget_lock_release_recursive>
 800369a:	e7f3      	b.n	8003684 <_vfiprintf_r+0x44>
 800369c:	2300      	movs	r3, #0
 800369e:	9309      	str	r3, [sp, #36]	@ 0x24
 80036a0:	2320      	movs	r3, #32
 80036a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80036aa:	2330      	movs	r3, #48	@ 0x30
 80036ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800385c <_vfiprintf_r+0x21c>
 80036b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036b4:	f04f 0901 	mov.w	r9, #1
 80036b8:	4623      	mov	r3, r4
 80036ba:	469a      	mov	sl, r3
 80036bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036c0:	b10a      	cbz	r2, 80036c6 <_vfiprintf_r+0x86>
 80036c2:	2a25      	cmp	r2, #37	@ 0x25
 80036c4:	d1f9      	bne.n	80036ba <_vfiprintf_r+0x7a>
 80036c6:	ebba 0b04 	subs.w	fp, sl, r4
 80036ca:	d00b      	beq.n	80036e4 <_vfiprintf_r+0xa4>
 80036cc:	465b      	mov	r3, fp
 80036ce:	4622      	mov	r2, r4
 80036d0:	4629      	mov	r1, r5
 80036d2:	4630      	mov	r0, r6
 80036d4:	f7ff ffa1 	bl	800361a <__sfputs_r>
 80036d8:	3001      	adds	r0, #1
 80036da:	f000 80a7 	beq.w	800382c <_vfiprintf_r+0x1ec>
 80036de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036e0:	445a      	add	r2, fp
 80036e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80036e4:	f89a 3000 	ldrb.w	r3, [sl]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 809f 	beq.w	800382c <_vfiprintf_r+0x1ec>
 80036ee:	2300      	movs	r3, #0
 80036f0:	f04f 32ff 	mov.w	r2, #4294967295
 80036f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036f8:	f10a 0a01 	add.w	sl, sl, #1
 80036fc:	9304      	str	r3, [sp, #16]
 80036fe:	9307      	str	r3, [sp, #28]
 8003700:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003704:	931a      	str	r3, [sp, #104]	@ 0x68
 8003706:	4654      	mov	r4, sl
 8003708:	2205      	movs	r2, #5
 800370a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800370e:	4853      	ldr	r0, [pc, #332]	@ (800385c <_vfiprintf_r+0x21c>)
 8003710:	f7fc fd66 	bl	80001e0 <memchr>
 8003714:	9a04      	ldr	r2, [sp, #16]
 8003716:	b9d8      	cbnz	r0, 8003750 <_vfiprintf_r+0x110>
 8003718:	06d1      	lsls	r1, r2, #27
 800371a:	bf44      	itt	mi
 800371c:	2320      	movmi	r3, #32
 800371e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003722:	0713      	lsls	r3, r2, #28
 8003724:	bf44      	itt	mi
 8003726:	232b      	movmi	r3, #43	@ 0x2b
 8003728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800372c:	f89a 3000 	ldrb.w	r3, [sl]
 8003730:	2b2a      	cmp	r3, #42	@ 0x2a
 8003732:	d015      	beq.n	8003760 <_vfiprintf_r+0x120>
 8003734:	9a07      	ldr	r2, [sp, #28]
 8003736:	4654      	mov	r4, sl
 8003738:	2000      	movs	r0, #0
 800373a:	f04f 0c0a 	mov.w	ip, #10
 800373e:	4621      	mov	r1, r4
 8003740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003744:	3b30      	subs	r3, #48	@ 0x30
 8003746:	2b09      	cmp	r3, #9
 8003748:	d94b      	bls.n	80037e2 <_vfiprintf_r+0x1a2>
 800374a:	b1b0      	cbz	r0, 800377a <_vfiprintf_r+0x13a>
 800374c:	9207      	str	r2, [sp, #28]
 800374e:	e014      	b.n	800377a <_vfiprintf_r+0x13a>
 8003750:	eba0 0308 	sub.w	r3, r0, r8
 8003754:	fa09 f303 	lsl.w	r3, r9, r3
 8003758:	4313      	orrs	r3, r2
 800375a:	9304      	str	r3, [sp, #16]
 800375c:	46a2      	mov	sl, r4
 800375e:	e7d2      	b.n	8003706 <_vfiprintf_r+0xc6>
 8003760:	9b03      	ldr	r3, [sp, #12]
 8003762:	1d19      	adds	r1, r3, #4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	9103      	str	r1, [sp, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	bfbb      	ittet	lt
 800376c:	425b      	neglt	r3, r3
 800376e:	f042 0202 	orrlt.w	r2, r2, #2
 8003772:	9307      	strge	r3, [sp, #28]
 8003774:	9307      	strlt	r3, [sp, #28]
 8003776:	bfb8      	it	lt
 8003778:	9204      	strlt	r2, [sp, #16]
 800377a:	7823      	ldrb	r3, [r4, #0]
 800377c:	2b2e      	cmp	r3, #46	@ 0x2e
 800377e:	d10a      	bne.n	8003796 <_vfiprintf_r+0x156>
 8003780:	7863      	ldrb	r3, [r4, #1]
 8003782:	2b2a      	cmp	r3, #42	@ 0x2a
 8003784:	d132      	bne.n	80037ec <_vfiprintf_r+0x1ac>
 8003786:	9b03      	ldr	r3, [sp, #12]
 8003788:	1d1a      	adds	r2, r3, #4
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	9203      	str	r2, [sp, #12]
 800378e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003792:	3402      	adds	r4, #2
 8003794:	9305      	str	r3, [sp, #20]
 8003796:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800386c <_vfiprintf_r+0x22c>
 800379a:	7821      	ldrb	r1, [r4, #0]
 800379c:	2203      	movs	r2, #3
 800379e:	4650      	mov	r0, sl
 80037a0:	f7fc fd1e 	bl	80001e0 <memchr>
 80037a4:	b138      	cbz	r0, 80037b6 <_vfiprintf_r+0x176>
 80037a6:	9b04      	ldr	r3, [sp, #16]
 80037a8:	eba0 000a 	sub.w	r0, r0, sl
 80037ac:	2240      	movs	r2, #64	@ 0x40
 80037ae:	4082      	lsls	r2, r0
 80037b0:	4313      	orrs	r3, r2
 80037b2:	3401      	adds	r4, #1
 80037b4:	9304      	str	r3, [sp, #16]
 80037b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ba:	4829      	ldr	r0, [pc, #164]	@ (8003860 <_vfiprintf_r+0x220>)
 80037bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037c0:	2206      	movs	r2, #6
 80037c2:	f7fc fd0d 	bl	80001e0 <memchr>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d03f      	beq.n	800384a <_vfiprintf_r+0x20a>
 80037ca:	4b26      	ldr	r3, [pc, #152]	@ (8003864 <_vfiprintf_r+0x224>)
 80037cc:	bb1b      	cbnz	r3, 8003816 <_vfiprintf_r+0x1d6>
 80037ce:	9b03      	ldr	r3, [sp, #12]
 80037d0:	3307      	adds	r3, #7
 80037d2:	f023 0307 	bic.w	r3, r3, #7
 80037d6:	3308      	adds	r3, #8
 80037d8:	9303      	str	r3, [sp, #12]
 80037da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037dc:	443b      	add	r3, r7
 80037de:	9309      	str	r3, [sp, #36]	@ 0x24
 80037e0:	e76a      	b.n	80036b8 <_vfiprintf_r+0x78>
 80037e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80037e6:	460c      	mov	r4, r1
 80037e8:	2001      	movs	r0, #1
 80037ea:	e7a8      	b.n	800373e <_vfiprintf_r+0xfe>
 80037ec:	2300      	movs	r3, #0
 80037ee:	3401      	adds	r4, #1
 80037f0:	9305      	str	r3, [sp, #20]
 80037f2:	4619      	mov	r1, r3
 80037f4:	f04f 0c0a 	mov.w	ip, #10
 80037f8:	4620      	mov	r0, r4
 80037fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037fe:	3a30      	subs	r2, #48	@ 0x30
 8003800:	2a09      	cmp	r2, #9
 8003802:	d903      	bls.n	800380c <_vfiprintf_r+0x1cc>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0c6      	beq.n	8003796 <_vfiprintf_r+0x156>
 8003808:	9105      	str	r1, [sp, #20]
 800380a:	e7c4      	b.n	8003796 <_vfiprintf_r+0x156>
 800380c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003810:	4604      	mov	r4, r0
 8003812:	2301      	movs	r3, #1
 8003814:	e7f0      	b.n	80037f8 <_vfiprintf_r+0x1b8>
 8003816:	ab03      	add	r3, sp, #12
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	462a      	mov	r2, r5
 800381c:	4b12      	ldr	r3, [pc, #72]	@ (8003868 <_vfiprintf_r+0x228>)
 800381e:	a904      	add	r1, sp, #16
 8003820:	4630      	mov	r0, r6
 8003822:	f3af 8000 	nop.w
 8003826:	4607      	mov	r7, r0
 8003828:	1c78      	adds	r0, r7, #1
 800382a:	d1d6      	bne.n	80037da <_vfiprintf_r+0x19a>
 800382c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800382e:	07d9      	lsls	r1, r3, #31
 8003830:	d405      	bmi.n	800383e <_vfiprintf_r+0x1fe>
 8003832:	89ab      	ldrh	r3, [r5, #12]
 8003834:	059a      	lsls	r2, r3, #22
 8003836:	d402      	bmi.n	800383e <_vfiprintf_r+0x1fe>
 8003838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800383a:	f7ff fddd 	bl	80033f8 <__retarget_lock_release_recursive>
 800383e:	89ab      	ldrh	r3, [r5, #12]
 8003840:	065b      	lsls	r3, r3, #25
 8003842:	f53f af1f 	bmi.w	8003684 <_vfiprintf_r+0x44>
 8003846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003848:	e71e      	b.n	8003688 <_vfiprintf_r+0x48>
 800384a:	ab03      	add	r3, sp, #12
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	462a      	mov	r2, r5
 8003850:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <_vfiprintf_r+0x228>)
 8003852:	a904      	add	r1, sp, #16
 8003854:	4630      	mov	r0, r6
 8003856:	f000 f879 	bl	800394c <_printf_i>
 800385a:	e7e4      	b.n	8003826 <_vfiprintf_r+0x1e6>
 800385c:	08003f7c 	.word	0x08003f7c
 8003860:	08003f86 	.word	0x08003f86
 8003864:	00000000 	.word	0x00000000
 8003868:	0800361b 	.word	0x0800361b
 800386c:	08003f82 	.word	0x08003f82

08003870 <_printf_common>:
 8003870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003874:	4616      	mov	r6, r2
 8003876:	4698      	mov	r8, r3
 8003878:	688a      	ldr	r2, [r1, #8]
 800387a:	690b      	ldr	r3, [r1, #16]
 800387c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003880:	4293      	cmp	r3, r2
 8003882:	bfb8      	it	lt
 8003884:	4613      	movlt	r3, r2
 8003886:	6033      	str	r3, [r6, #0]
 8003888:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800388c:	4607      	mov	r7, r0
 800388e:	460c      	mov	r4, r1
 8003890:	b10a      	cbz	r2, 8003896 <_printf_common+0x26>
 8003892:	3301      	adds	r3, #1
 8003894:	6033      	str	r3, [r6, #0]
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	0699      	lsls	r1, r3, #26
 800389a:	bf42      	ittt	mi
 800389c:	6833      	ldrmi	r3, [r6, #0]
 800389e:	3302      	addmi	r3, #2
 80038a0:	6033      	strmi	r3, [r6, #0]
 80038a2:	6825      	ldr	r5, [r4, #0]
 80038a4:	f015 0506 	ands.w	r5, r5, #6
 80038a8:	d106      	bne.n	80038b8 <_printf_common+0x48>
 80038aa:	f104 0a19 	add.w	sl, r4, #25
 80038ae:	68e3      	ldr	r3, [r4, #12]
 80038b0:	6832      	ldr	r2, [r6, #0]
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	42ab      	cmp	r3, r5
 80038b6:	dc26      	bgt.n	8003906 <_printf_common+0x96>
 80038b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038bc:	6822      	ldr	r2, [r4, #0]
 80038be:	3b00      	subs	r3, #0
 80038c0:	bf18      	it	ne
 80038c2:	2301      	movne	r3, #1
 80038c4:	0692      	lsls	r2, r2, #26
 80038c6:	d42b      	bmi.n	8003920 <_printf_common+0xb0>
 80038c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038cc:	4641      	mov	r1, r8
 80038ce:	4638      	mov	r0, r7
 80038d0:	47c8      	blx	r9
 80038d2:	3001      	adds	r0, #1
 80038d4:	d01e      	beq.n	8003914 <_printf_common+0xa4>
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	6922      	ldr	r2, [r4, #16]
 80038da:	f003 0306 	and.w	r3, r3, #6
 80038de:	2b04      	cmp	r3, #4
 80038e0:	bf02      	ittt	eq
 80038e2:	68e5      	ldreq	r5, [r4, #12]
 80038e4:	6833      	ldreq	r3, [r6, #0]
 80038e6:	1aed      	subeq	r5, r5, r3
 80038e8:	68a3      	ldr	r3, [r4, #8]
 80038ea:	bf0c      	ite	eq
 80038ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038f0:	2500      	movne	r5, #0
 80038f2:	4293      	cmp	r3, r2
 80038f4:	bfc4      	itt	gt
 80038f6:	1a9b      	subgt	r3, r3, r2
 80038f8:	18ed      	addgt	r5, r5, r3
 80038fa:	2600      	movs	r6, #0
 80038fc:	341a      	adds	r4, #26
 80038fe:	42b5      	cmp	r5, r6
 8003900:	d11a      	bne.n	8003938 <_printf_common+0xc8>
 8003902:	2000      	movs	r0, #0
 8003904:	e008      	b.n	8003918 <_printf_common+0xa8>
 8003906:	2301      	movs	r3, #1
 8003908:	4652      	mov	r2, sl
 800390a:	4641      	mov	r1, r8
 800390c:	4638      	mov	r0, r7
 800390e:	47c8      	blx	r9
 8003910:	3001      	adds	r0, #1
 8003912:	d103      	bne.n	800391c <_printf_common+0xac>
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800391c:	3501      	adds	r5, #1
 800391e:	e7c6      	b.n	80038ae <_printf_common+0x3e>
 8003920:	18e1      	adds	r1, r4, r3
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	2030      	movs	r0, #48	@ 0x30
 8003926:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800392a:	4422      	add	r2, r4
 800392c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003930:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003934:	3302      	adds	r3, #2
 8003936:	e7c7      	b.n	80038c8 <_printf_common+0x58>
 8003938:	2301      	movs	r3, #1
 800393a:	4622      	mov	r2, r4
 800393c:	4641      	mov	r1, r8
 800393e:	4638      	mov	r0, r7
 8003940:	47c8      	blx	r9
 8003942:	3001      	adds	r0, #1
 8003944:	d0e6      	beq.n	8003914 <_printf_common+0xa4>
 8003946:	3601      	adds	r6, #1
 8003948:	e7d9      	b.n	80038fe <_printf_common+0x8e>
	...

0800394c <_printf_i>:
 800394c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003950:	7e0f      	ldrb	r7, [r1, #24]
 8003952:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003954:	2f78      	cmp	r7, #120	@ 0x78
 8003956:	4691      	mov	r9, r2
 8003958:	4680      	mov	r8, r0
 800395a:	460c      	mov	r4, r1
 800395c:	469a      	mov	sl, r3
 800395e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003962:	d807      	bhi.n	8003974 <_printf_i+0x28>
 8003964:	2f62      	cmp	r7, #98	@ 0x62
 8003966:	d80a      	bhi.n	800397e <_printf_i+0x32>
 8003968:	2f00      	cmp	r7, #0
 800396a:	f000 80d1 	beq.w	8003b10 <_printf_i+0x1c4>
 800396e:	2f58      	cmp	r7, #88	@ 0x58
 8003970:	f000 80b8 	beq.w	8003ae4 <_printf_i+0x198>
 8003974:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003978:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800397c:	e03a      	b.n	80039f4 <_printf_i+0xa8>
 800397e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003982:	2b15      	cmp	r3, #21
 8003984:	d8f6      	bhi.n	8003974 <_printf_i+0x28>
 8003986:	a101      	add	r1, pc, #4	@ (adr r1, 800398c <_printf_i+0x40>)
 8003988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800398c:	080039e5 	.word	0x080039e5
 8003990:	080039f9 	.word	0x080039f9
 8003994:	08003975 	.word	0x08003975
 8003998:	08003975 	.word	0x08003975
 800399c:	08003975 	.word	0x08003975
 80039a0:	08003975 	.word	0x08003975
 80039a4:	080039f9 	.word	0x080039f9
 80039a8:	08003975 	.word	0x08003975
 80039ac:	08003975 	.word	0x08003975
 80039b0:	08003975 	.word	0x08003975
 80039b4:	08003975 	.word	0x08003975
 80039b8:	08003af7 	.word	0x08003af7
 80039bc:	08003a23 	.word	0x08003a23
 80039c0:	08003ab1 	.word	0x08003ab1
 80039c4:	08003975 	.word	0x08003975
 80039c8:	08003975 	.word	0x08003975
 80039cc:	08003b19 	.word	0x08003b19
 80039d0:	08003975 	.word	0x08003975
 80039d4:	08003a23 	.word	0x08003a23
 80039d8:	08003975 	.word	0x08003975
 80039dc:	08003975 	.word	0x08003975
 80039e0:	08003ab9 	.word	0x08003ab9
 80039e4:	6833      	ldr	r3, [r6, #0]
 80039e6:	1d1a      	adds	r2, r3, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6032      	str	r2, [r6, #0]
 80039ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039f4:	2301      	movs	r3, #1
 80039f6:	e09c      	b.n	8003b32 <_printf_i+0x1e6>
 80039f8:	6833      	ldr	r3, [r6, #0]
 80039fa:	6820      	ldr	r0, [r4, #0]
 80039fc:	1d19      	adds	r1, r3, #4
 80039fe:	6031      	str	r1, [r6, #0]
 8003a00:	0606      	lsls	r6, r0, #24
 8003a02:	d501      	bpl.n	8003a08 <_printf_i+0xbc>
 8003a04:	681d      	ldr	r5, [r3, #0]
 8003a06:	e003      	b.n	8003a10 <_printf_i+0xc4>
 8003a08:	0645      	lsls	r5, r0, #25
 8003a0a:	d5fb      	bpl.n	8003a04 <_printf_i+0xb8>
 8003a0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a10:	2d00      	cmp	r5, #0
 8003a12:	da03      	bge.n	8003a1c <_printf_i+0xd0>
 8003a14:	232d      	movs	r3, #45	@ 0x2d
 8003a16:	426d      	negs	r5, r5
 8003a18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a1c:	4858      	ldr	r0, [pc, #352]	@ (8003b80 <_printf_i+0x234>)
 8003a1e:	230a      	movs	r3, #10
 8003a20:	e011      	b.n	8003a46 <_printf_i+0xfa>
 8003a22:	6821      	ldr	r1, [r4, #0]
 8003a24:	6833      	ldr	r3, [r6, #0]
 8003a26:	0608      	lsls	r0, r1, #24
 8003a28:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a2c:	d402      	bmi.n	8003a34 <_printf_i+0xe8>
 8003a2e:	0649      	lsls	r1, r1, #25
 8003a30:	bf48      	it	mi
 8003a32:	b2ad      	uxthmi	r5, r5
 8003a34:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a36:	4852      	ldr	r0, [pc, #328]	@ (8003b80 <_printf_i+0x234>)
 8003a38:	6033      	str	r3, [r6, #0]
 8003a3a:	bf14      	ite	ne
 8003a3c:	230a      	movne	r3, #10
 8003a3e:	2308      	moveq	r3, #8
 8003a40:	2100      	movs	r1, #0
 8003a42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a46:	6866      	ldr	r6, [r4, #4]
 8003a48:	60a6      	str	r6, [r4, #8]
 8003a4a:	2e00      	cmp	r6, #0
 8003a4c:	db05      	blt.n	8003a5a <_printf_i+0x10e>
 8003a4e:	6821      	ldr	r1, [r4, #0]
 8003a50:	432e      	orrs	r6, r5
 8003a52:	f021 0104 	bic.w	r1, r1, #4
 8003a56:	6021      	str	r1, [r4, #0]
 8003a58:	d04b      	beq.n	8003af2 <_printf_i+0x1a6>
 8003a5a:	4616      	mov	r6, r2
 8003a5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a60:	fb03 5711 	mls	r7, r3, r1, r5
 8003a64:	5dc7      	ldrb	r7, [r0, r7]
 8003a66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a6a:	462f      	mov	r7, r5
 8003a6c:	42bb      	cmp	r3, r7
 8003a6e:	460d      	mov	r5, r1
 8003a70:	d9f4      	bls.n	8003a5c <_printf_i+0x110>
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d10b      	bne.n	8003a8e <_printf_i+0x142>
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	07df      	lsls	r7, r3, #31
 8003a7a:	d508      	bpl.n	8003a8e <_printf_i+0x142>
 8003a7c:	6923      	ldr	r3, [r4, #16]
 8003a7e:	6861      	ldr	r1, [r4, #4]
 8003a80:	4299      	cmp	r1, r3
 8003a82:	bfde      	ittt	le
 8003a84:	2330      	movle	r3, #48	@ 0x30
 8003a86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a8e:	1b92      	subs	r2, r2, r6
 8003a90:	6122      	str	r2, [r4, #16]
 8003a92:	f8cd a000 	str.w	sl, [sp]
 8003a96:	464b      	mov	r3, r9
 8003a98:	aa03      	add	r2, sp, #12
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	4640      	mov	r0, r8
 8003a9e:	f7ff fee7 	bl	8003870 <_printf_common>
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	d14a      	bne.n	8003b3c <_printf_i+0x1f0>
 8003aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aaa:	b004      	add	sp, #16
 8003aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	f043 0320 	orr.w	r3, r3, #32
 8003ab6:	6023      	str	r3, [r4, #0]
 8003ab8:	4832      	ldr	r0, [pc, #200]	@ (8003b84 <_printf_i+0x238>)
 8003aba:	2778      	movs	r7, #120	@ 0x78
 8003abc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	6831      	ldr	r1, [r6, #0]
 8003ac4:	061f      	lsls	r7, r3, #24
 8003ac6:	f851 5b04 	ldr.w	r5, [r1], #4
 8003aca:	d402      	bmi.n	8003ad2 <_printf_i+0x186>
 8003acc:	065f      	lsls	r7, r3, #25
 8003ace:	bf48      	it	mi
 8003ad0:	b2ad      	uxthmi	r5, r5
 8003ad2:	6031      	str	r1, [r6, #0]
 8003ad4:	07d9      	lsls	r1, r3, #31
 8003ad6:	bf44      	itt	mi
 8003ad8:	f043 0320 	orrmi.w	r3, r3, #32
 8003adc:	6023      	strmi	r3, [r4, #0]
 8003ade:	b11d      	cbz	r5, 8003ae8 <_printf_i+0x19c>
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	e7ad      	b.n	8003a40 <_printf_i+0xf4>
 8003ae4:	4826      	ldr	r0, [pc, #152]	@ (8003b80 <_printf_i+0x234>)
 8003ae6:	e7e9      	b.n	8003abc <_printf_i+0x170>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	f023 0320 	bic.w	r3, r3, #32
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	e7f6      	b.n	8003ae0 <_printf_i+0x194>
 8003af2:	4616      	mov	r6, r2
 8003af4:	e7bd      	b.n	8003a72 <_printf_i+0x126>
 8003af6:	6833      	ldr	r3, [r6, #0]
 8003af8:	6825      	ldr	r5, [r4, #0]
 8003afa:	6961      	ldr	r1, [r4, #20]
 8003afc:	1d18      	adds	r0, r3, #4
 8003afe:	6030      	str	r0, [r6, #0]
 8003b00:	062e      	lsls	r6, r5, #24
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	d501      	bpl.n	8003b0a <_printf_i+0x1be>
 8003b06:	6019      	str	r1, [r3, #0]
 8003b08:	e002      	b.n	8003b10 <_printf_i+0x1c4>
 8003b0a:	0668      	lsls	r0, r5, #25
 8003b0c:	d5fb      	bpl.n	8003b06 <_printf_i+0x1ba>
 8003b0e:	8019      	strh	r1, [r3, #0]
 8003b10:	2300      	movs	r3, #0
 8003b12:	6123      	str	r3, [r4, #16]
 8003b14:	4616      	mov	r6, r2
 8003b16:	e7bc      	b.n	8003a92 <_printf_i+0x146>
 8003b18:	6833      	ldr	r3, [r6, #0]
 8003b1a:	1d1a      	adds	r2, r3, #4
 8003b1c:	6032      	str	r2, [r6, #0]
 8003b1e:	681e      	ldr	r6, [r3, #0]
 8003b20:	6862      	ldr	r2, [r4, #4]
 8003b22:	2100      	movs	r1, #0
 8003b24:	4630      	mov	r0, r6
 8003b26:	f7fc fb5b 	bl	80001e0 <memchr>
 8003b2a:	b108      	cbz	r0, 8003b30 <_printf_i+0x1e4>
 8003b2c:	1b80      	subs	r0, r0, r6
 8003b2e:	6060      	str	r0, [r4, #4]
 8003b30:	6863      	ldr	r3, [r4, #4]
 8003b32:	6123      	str	r3, [r4, #16]
 8003b34:	2300      	movs	r3, #0
 8003b36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b3a:	e7aa      	b.n	8003a92 <_printf_i+0x146>
 8003b3c:	6923      	ldr	r3, [r4, #16]
 8003b3e:	4632      	mov	r2, r6
 8003b40:	4649      	mov	r1, r9
 8003b42:	4640      	mov	r0, r8
 8003b44:	47d0      	blx	sl
 8003b46:	3001      	adds	r0, #1
 8003b48:	d0ad      	beq.n	8003aa6 <_printf_i+0x15a>
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	079b      	lsls	r3, r3, #30
 8003b4e:	d413      	bmi.n	8003b78 <_printf_i+0x22c>
 8003b50:	68e0      	ldr	r0, [r4, #12]
 8003b52:	9b03      	ldr	r3, [sp, #12]
 8003b54:	4298      	cmp	r0, r3
 8003b56:	bfb8      	it	lt
 8003b58:	4618      	movlt	r0, r3
 8003b5a:	e7a6      	b.n	8003aaa <_printf_i+0x15e>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	4632      	mov	r2, r6
 8003b60:	4649      	mov	r1, r9
 8003b62:	4640      	mov	r0, r8
 8003b64:	47d0      	blx	sl
 8003b66:	3001      	adds	r0, #1
 8003b68:	d09d      	beq.n	8003aa6 <_printf_i+0x15a>
 8003b6a:	3501      	adds	r5, #1
 8003b6c:	68e3      	ldr	r3, [r4, #12]
 8003b6e:	9903      	ldr	r1, [sp, #12]
 8003b70:	1a5b      	subs	r3, r3, r1
 8003b72:	42ab      	cmp	r3, r5
 8003b74:	dcf2      	bgt.n	8003b5c <_printf_i+0x210>
 8003b76:	e7eb      	b.n	8003b50 <_printf_i+0x204>
 8003b78:	2500      	movs	r5, #0
 8003b7a:	f104 0619 	add.w	r6, r4, #25
 8003b7e:	e7f5      	b.n	8003b6c <_printf_i+0x220>
 8003b80:	08003f8d 	.word	0x08003f8d
 8003b84:	08003f9e 	.word	0x08003f9e

08003b88 <__sflush_r>:
 8003b88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b90:	0716      	lsls	r6, r2, #28
 8003b92:	4605      	mov	r5, r0
 8003b94:	460c      	mov	r4, r1
 8003b96:	d454      	bmi.n	8003c42 <__sflush_r+0xba>
 8003b98:	684b      	ldr	r3, [r1, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	dc02      	bgt.n	8003ba4 <__sflush_r+0x1c>
 8003b9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	dd48      	ble.n	8003c36 <__sflush_r+0xae>
 8003ba4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ba6:	2e00      	cmp	r6, #0
 8003ba8:	d045      	beq.n	8003c36 <__sflush_r+0xae>
 8003baa:	2300      	movs	r3, #0
 8003bac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003bb0:	682f      	ldr	r7, [r5, #0]
 8003bb2:	6a21      	ldr	r1, [r4, #32]
 8003bb4:	602b      	str	r3, [r5, #0]
 8003bb6:	d030      	beq.n	8003c1a <__sflush_r+0x92>
 8003bb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	0759      	lsls	r1, r3, #29
 8003bbe:	d505      	bpl.n	8003bcc <__sflush_r+0x44>
 8003bc0:	6863      	ldr	r3, [r4, #4]
 8003bc2:	1ad2      	subs	r2, r2, r3
 8003bc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003bc6:	b10b      	cbz	r3, 8003bcc <__sflush_r+0x44>
 8003bc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bca:	1ad2      	subs	r2, r2, r3
 8003bcc:	2300      	movs	r3, #0
 8003bce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003bd0:	6a21      	ldr	r1, [r4, #32]
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	47b0      	blx	r6
 8003bd6:	1c43      	adds	r3, r0, #1
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	d106      	bne.n	8003bea <__sflush_r+0x62>
 8003bdc:	6829      	ldr	r1, [r5, #0]
 8003bde:	291d      	cmp	r1, #29
 8003be0:	d82b      	bhi.n	8003c3a <__sflush_r+0xb2>
 8003be2:	4a2a      	ldr	r2, [pc, #168]	@ (8003c8c <__sflush_r+0x104>)
 8003be4:	40ca      	lsrs	r2, r1
 8003be6:	07d6      	lsls	r6, r2, #31
 8003be8:	d527      	bpl.n	8003c3a <__sflush_r+0xb2>
 8003bea:	2200      	movs	r2, #0
 8003bec:	6062      	str	r2, [r4, #4]
 8003bee:	04d9      	lsls	r1, r3, #19
 8003bf0:	6922      	ldr	r2, [r4, #16]
 8003bf2:	6022      	str	r2, [r4, #0]
 8003bf4:	d504      	bpl.n	8003c00 <__sflush_r+0x78>
 8003bf6:	1c42      	adds	r2, r0, #1
 8003bf8:	d101      	bne.n	8003bfe <__sflush_r+0x76>
 8003bfa:	682b      	ldr	r3, [r5, #0]
 8003bfc:	b903      	cbnz	r3, 8003c00 <__sflush_r+0x78>
 8003bfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c02:	602f      	str	r7, [r5, #0]
 8003c04:	b1b9      	cbz	r1, 8003c36 <__sflush_r+0xae>
 8003c06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c0a:	4299      	cmp	r1, r3
 8003c0c:	d002      	beq.n	8003c14 <__sflush_r+0x8c>
 8003c0e:	4628      	mov	r0, r5
 8003c10:	f7ff fbf4 	bl	80033fc <_free_r>
 8003c14:	2300      	movs	r3, #0
 8003c16:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c18:	e00d      	b.n	8003c36 <__sflush_r+0xae>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	47b0      	blx	r6
 8003c20:	4602      	mov	r2, r0
 8003c22:	1c50      	adds	r0, r2, #1
 8003c24:	d1c9      	bne.n	8003bba <__sflush_r+0x32>
 8003c26:	682b      	ldr	r3, [r5, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0c6      	beq.n	8003bba <__sflush_r+0x32>
 8003c2c:	2b1d      	cmp	r3, #29
 8003c2e:	d001      	beq.n	8003c34 <__sflush_r+0xac>
 8003c30:	2b16      	cmp	r3, #22
 8003c32:	d11e      	bne.n	8003c72 <__sflush_r+0xea>
 8003c34:	602f      	str	r7, [r5, #0]
 8003c36:	2000      	movs	r0, #0
 8003c38:	e022      	b.n	8003c80 <__sflush_r+0xf8>
 8003c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c3e:	b21b      	sxth	r3, r3
 8003c40:	e01b      	b.n	8003c7a <__sflush_r+0xf2>
 8003c42:	690f      	ldr	r7, [r1, #16]
 8003c44:	2f00      	cmp	r7, #0
 8003c46:	d0f6      	beq.n	8003c36 <__sflush_r+0xae>
 8003c48:	0793      	lsls	r3, r2, #30
 8003c4a:	680e      	ldr	r6, [r1, #0]
 8003c4c:	bf08      	it	eq
 8003c4e:	694b      	ldreq	r3, [r1, #20]
 8003c50:	600f      	str	r7, [r1, #0]
 8003c52:	bf18      	it	ne
 8003c54:	2300      	movne	r3, #0
 8003c56:	eba6 0807 	sub.w	r8, r6, r7
 8003c5a:	608b      	str	r3, [r1, #8]
 8003c5c:	f1b8 0f00 	cmp.w	r8, #0
 8003c60:	dde9      	ble.n	8003c36 <__sflush_r+0xae>
 8003c62:	6a21      	ldr	r1, [r4, #32]
 8003c64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003c66:	4643      	mov	r3, r8
 8003c68:	463a      	mov	r2, r7
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	47b0      	blx	r6
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	dc08      	bgt.n	8003c84 <__sflush_r+0xfc>
 8003c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c7a:	81a3      	strh	r3, [r4, #12]
 8003c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c84:	4407      	add	r7, r0
 8003c86:	eba8 0800 	sub.w	r8, r8, r0
 8003c8a:	e7e7      	b.n	8003c5c <__sflush_r+0xd4>
 8003c8c:	20400001 	.word	0x20400001

08003c90 <_fflush_r>:
 8003c90:	b538      	push	{r3, r4, r5, lr}
 8003c92:	690b      	ldr	r3, [r1, #16]
 8003c94:	4605      	mov	r5, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	b913      	cbnz	r3, 8003ca0 <_fflush_r+0x10>
 8003c9a:	2500      	movs	r5, #0
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ca0:	b118      	cbz	r0, 8003caa <_fflush_r+0x1a>
 8003ca2:	6a03      	ldr	r3, [r0, #32]
 8003ca4:	b90b      	cbnz	r3, 8003caa <_fflush_r+0x1a>
 8003ca6:	f7ff faa1 	bl	80031ec <__sinit>
 8003caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f3      	beq.n	8003c9a <_fflush_r+0xa>
 8003cb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003cb4:	07d0      	lsls	r0, r2, #31
 8003cb6:	d404      	bmi.n	8003cc2 <_fflush_r+0x32>
 8003cb8:	0599      	lsls	r1, r3, #22
 8003cba:	d402      	bmi.n	8003cc2 <_fflush_r+0x32>
 8003cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cbe:	f7ff fb9a 	bl	80033f6 <__retarget_lock_acquire_recursive>
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	f7ff ff5f 	bl	8003b88 <__sflush_r>
 8003cca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ccc:	07da      	lsls	r2, r3, #31
 8003cce:	4605      	mov	r5, r0
 8003cd0:	d4e4      	bmi.n	8003c9c <_fflush_r+0xc>
 8003cd2:	89a3      	ldrh	r3, [r4, #12]
 8003cd4:	059b      	lsls	r3, r3, #22
 8003cd6:	d4e1      	bmi.n	8003c9c <_fflush_r+0xc>
 8003cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cda:	f7ff fb8d 	bl	80033f8 <__retarget_lock_release_recursive>
 8003cde:	e7dd      	b.n	8003c9c <_fflush_r+0xc>

08003ce0 <__swbuf_r>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	460e      	mov	r6, r1
 8003ce4:	4614      	mov	r4, r2
 8003ce6:	4605      	mov	r5, r0
 8003ce8:	b118      	cbz	r0, 8003cf2 <__swbuf_r+0x12>
 8003cea:	6a03      	ldr	r3, [r0, #32]
 8003cec:	b90b      	cbnz	r3, 8003cf2 <__swbuf_r+0x12>
 8003cee:	f7ff fa7d 	bl	80031ec <__sinit>
 8003cf2:	69a3      	ldr	r3, [r4, #24]
 8003cf4:	60a3      	str	r3, [r4, #8]
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	071a      	lsls	r2, r3, #28
 8003cfa:	d501      	bpl.n	8003d00 <__swbuf_r+0x20>
 8003cfc:	6923      	ldr	r3, [r4, #16]
 8003cfe:	b943      	cbnz	r3, 8003d12 <__swbuf_r+0x32>
 8003d00:	4621      	mov	r1, r4
 8003d02:	4628      	mov	r0, r5
 8003d04:	f000 f82a 	bl	8003d5c <__swsetup_r>
 8003d08:	b118      	cbz	r0, 8003d12 <__swbuf_r+0x32>
 8003d0a:	f04f 37ff 	mov.w	r7, #4294967295
 8003d0e:	4638      	mov	r0, r7
 8003d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	6922      	ldr	r2, [r4, #16]
 8003d16:	1a98      	subs	r0, r3, r2
 8003d18:	6963      	ldr	r3, [r4, #20]
 8003d1a:	b2f6      	uxtb	r6, r6
 8003d1c:	4283      	cmp	r3, r0
 8003d1e:	4637      	mov	r7, r6
 8003d20:	dc05      	bgt.n	8003d2e <__swbuf_r+0x4e>
 8003d22:	4621      	mov	r1, r4
 8003d24:	4628      	mov	r0, r5
 8003d26:	f7ff ffb3 	bl	8003c90 <_fflush_r>
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	d1ed      	bne.n	8003d0a <__swbuf_r+0x2a>
 8003d2e:	68a3      	ldr	r3, [r4, #8]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	60a3      	str	r3, [r4, #8]
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	6022      	str	r2, [r4, #0]
 8003d3a:	701e      	strb	r6, [r3, #0]
 8003d3c:	6962      	ldr	r2, [r4, #20]
 8003d3e:	1c43      	adds	r3, r0, #1
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d004      	beq.n	8003d4e <__swbuf_r+0x6e>
 8003d44:	89a3      	ldrh	r3, [r4, #12]
 8003d46:	07db      	lsls	r3, r3, #31
 8003d48:	d5e1      	bpl.n	8003d0e <__swbuf_r+0x2e>
 8003d4a:	2e0a      	cmp	r6, #10
 8003d4c:	d1df      	bne.n	8003d0e <__swbuf_r+0x2e>
 8003d4e:	4621      	mov	r1, r4
 8003d50:	4628      	mov	r0, r5
 8003d52:	f7ff ff9d 	bl	8003c90 <_fflush_r>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d0d9      	beq.n	8003d0e <__swbuf_r+0x2e>
 8003d5a:	e7d6      	b.n	8003d0a <__swbuf_r+0x2a>

08003d5c <__swsetup_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4b29      	ldr	r3, [pc, #164]	@ (8003e04 <__swsetup_r+0xa8>)
 8003d60:	4605      	mov	r5, r0
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	460c      	mov	r4, r1
 8003d66:	b118      	cbz	r0, 8003d70 <__swsetup_r+0x14>
 8003d68:	6a03      	ldr	r3, [r0, #32]
 8003d6a:	b90b      	cbnz	r3, 8003d70 <__swsetup_r+0x14>
 8003d6c:	f7ff fa3e 	bl	80031ec <__sinit>
 8003d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d74:	0719      	lsls	r1, r3, #28
 8003d76:	d422      	bmi.n	8003dbe <__swsetup_r+0x62>
 8003d78:	06da      	lsls	r2, r3, #27
 8003d7a:	d407      	bmi.n	8003d8c <__swsetup_r+0x30>
 8003d7c:	2209      	movs	r2, #9
 8003d7e:	602a      	str	r2, [r5, #0]
 8003d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d84:	81a3      	strh	r3, [r4, #12]
 8003d86:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8a:	e033      	b.n	8003df4 <__swsetup_r+0x98>
 8003d8c:	0758      	lsls	r0, r3, #29
 8003d8e:	d512      	bpl.n	8003db6 <__swsetup_r+0x5a>
 8003d90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d92:	b141      	cbz	r1, 8003da6 <__swsetup_r+0x4a>
 8003d94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d98:	4299      	cmp	r1, r3
 8003d9a:	d002      	beq.n	8003da2 <__swsetup_r+0x46>
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	f7ff fb2d 	bl	80033fc <_free_r>
 8003da2:	2300      	movs	r3, #0
 8003da4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003da6:	89a3      	ldrh	r3, [r4, #12]
 8003da8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003dac:	81a3      	strh	r3, [r4, #12]
 8003dae:	2300      	movs	r3, #0
 8003db0:	6063      	str	r3, [r4, #4]
 8003db2:	6923      	ldr	r3, [r4, #16]
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	89a3      	ldrh	r3, [r4, #12]
 8003db8:	f043 0308 	orr.w	r3, r3, #8
 8003dbc:	81a3      	strh	r3, [r4, #12]
 8003dbe:	6923      	ldr	r3, [r4, #16]
 8003dc0:	b94b      	cbnz	r3, 8003dd6 <__swsetup_r+0x7a>
 8003dc2:	89a3      	ldrh	r3, [r4, #12]
 8003dc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dcc:	d003      	beq.n	8003dd6 <__swsetup_r+0x7a>
 8003dce:	4621      	mov	r1, r4
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f000 f84f 	bl	8003e74 <__smakebuf_r>
 8003dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dda:	f013 0201 	ands.w	r2, r3, #1
 8003dde:	d00a      	beq.n	8003df6 <__swsetup_r+0x9a>
 8003de0:	2200      	movs	r2, #0
 8003de2:	60a2      	str	r2, [r4, #8]
 8003de4:	6962      	ldr	r2, [r4, #20]
 8003de6:	4252      	negs	r2, r2
 8003de8:	61a2      	str	r2, [r4, #24]
 8003dea:	6922      	ldr	r2, [r4, #16]
 8003dec:	b942      	cbnz	r2, 8003e00 <__swsetup_r+0xa4>
 8003dee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003df2:	d1c5      	bne.n	8003d80 <__swsetup_r+0x24>
 8003df4:	bd38      	pop	{r3, r4, r5, pc}
 8003df6:	0799      	lsls	r1, r3, #30
 8003df8:	bf58      	it	pl
 8003dfa:	6962      	ldrpl	r2, [r4, #20]
 8003dfc:	60a2      	str	r2, [r4, #8]
 8003dfe:	e7f4      	b.n	8003dea <__swsetup_r+0x8e>
 8003e00:	2000      	movs	r0, #0
 8003e02:	e7f7      	b.n	8003df4 <__swsetup_r+0x98>
 8003e04:	20000030 	.word	0x20000030

08003e08 <_sbrk_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4d06      	ldr	r5, [pc, #24]	@ (8003e24 <_sbrk_r+0x1c>)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	f7fd f9b2 	bl	800117c <_sbrk>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_sbrk_r+0x1a>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_sbrk_r+0x1a>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	2000031c 	.word	0x2000031c

08003e28 <__swhatbuf_r>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e30:	2900      	cmp	r1, #0
 8003e32:	b096      	sub	sp, #88	@ 0x58
 8003e34:	4615      	mov	r5, r2
 8003e36:	461e      	mov	r6, r3
 8003e38:	da0d      	bge.n	8003e56 <__swhatbuf_r+0x2e>
 8003e3a:	89a3      	ldrh	r3, [r4, #12]
 8003e3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e40:	f04f 0100 	mov.w	r1, #0
 8003e44:	bf14      	ite	ne
 8003e46:	2340      	movne	r3, #64	@ 0x40
 8003e48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e4c:	2000      	movs	r0, #0
 8003e4e:	6031      	str	r1, [r6, #0]
 8003e50:	602b      	str	r3, [r5, #0]
 8003e52:	b016      	add	sp, #88	@ 0x58
 8003e54:	bd70      	pop	{r4, r5, r6, pc}
 8003e56:	466a      	mov	r2, sp
 8003e58:	f000 f848 	bl	8003eec <_fstat_r>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	dbec      	blt.n	8003e3a <__swhatbuf_r+0x12>
 8003e60:	9901      	ldr	r1, [sp, #4]
 8003e62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e6a:	4259      	negs	r1, r3
 8003e6c:	4159      	adcs	r1, r3
 8003e6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e72:	e7eb      	b.n	8003e4c <__swhatbuf_r+0x24>

08003e74 <__smakebuf_r>:
 8003e74:	898b      	ldrh	r3, [r1, #12]
 8003e76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e78:	079d      	lsls	r5, r3, #30
 8003e7a:	4606      	mov	r6, r0
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	d507      	bpl.n	8003e90 <__smakebuf_r+0x1c>
 8003e80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003e84:	6023      	str	r3, [r4, #0]
 8003e86:	6123      	str	r3, [r4, #16]
 8003e88:	2301      	movs	r3, #1
 8003e8a:	6163      	str	r3, [r4, #20]
 8003e8c:	b003      	add	sp, #12
 8003e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e90:	ab01      	add	r3, sp, #4
 8003e92:	466a      	mov	r2, sp
 8003e94:	f7ff ffc8 	bl	8003e28 <__swhatbuf_r>
 8003e98:	9f00      	ldr	r7, [sp, #0]
 8003e9a:	4605      	mov	r5, r0
 8003e9c:	4639      	mov	r1, r7
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	f7ff fb18 	bl	80034d4 <_malloc_r>
 8003ea4:	b948      	cbnz	r0, 8003eba <__smakebuf_r+0x46>
 8003ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eaa:	059a      	lsls	r2, r3, #22
 8003eac:	d4ee      	bmi.n	8003e8c <__smakebuf_r+0x18>
 8003eae:	f023 0303 	bic.w	r3, r3, #3
 8003eb2:	f043 0302 	orr.w	r3, r3, #2
 8003eb6:	81a3      	strh	r3, [r4, #12]
 8003eb8:	e7e2      	b.n	8003e80 <__smakebuf_r+0xc>
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	6020      	str	r0, [r4, #0]
 8003ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec2:	81a3      	strh	r3, [r4, #12]
 8003ec4:	9b01      	ldr	r3, [sp, #4]
 8003ec6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003eca:	b15b      	cbz	r3, 8003ee4 <__smakebuf_r+0x70>
 8003ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f000 f81d 	bl	8003f10 <_isatty_r>
 8003ed6:	b128      	cbz	r0, 8003ee4 <__smakebuf_r+0x70>
 8003ed8:	89a3      	ldrh	r3, [r4, #12]
 8003eda:	f023 0303 	bic.w	r3, r3, #3
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	81a3      	strh	r3, [r4, #12]
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	431d      	orrs	r5, r3
 8003ee8:	81a5      	strh	r5, [r4, #12]
 8003eea:	e7cf      	b.n	8003e8c <__smakebuf_r+0x18>

08003eec <_fstat_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	4d07      	ldr	r5, [pc, #28]	@ (8003f0c <_fstat_r+0x20>)
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	602b      	str	r3, [r5, #0]
 8003efa:	f7fd f917 	bl	800112c <_fstat>
 8003efe:	1c43      	adds	r3, r0, #1
 8003f00:	d102      	bne.n	8003f08 <_fstat_r+0x1c>
 8003f02:	682b      	ldr	r3, [r5, #0]
 8003f04:	b103      	cbz	r3, 8003f08 <_fstat_r+0x1c>
 8003f06:	6023      	str	r3, [r4, #0]
 8003f08:	bd38      	pop	{r3, r4, r5, pc}
 8003f0a:	bf00      	nop
 8003f0c:	2000031c 	.word	0x2000031c

08003f10 <_isatty_r>:
 8003f10:	b538      	push	{r3, r4, r5, lr}
 8003f12:	4d06      	ldr	r5, [pc, #24]	@ (8003f2c <_isatty_r+0x1c>)
 8003f14:	2300      	movs	r3, #0
 8003f16:	4604      	mov	r4, r0
 8003f18:	4608      	mov	r0, r1
 8003f1a:	602b      	str	r3, [r5, #0]
 8003f1c:	f7fd f916 	bl	800114c <_isatty>
 8003f20:	1c43      	adds	r3, r0, #1
 8003f22:	d102      	bne.n	8003f2a <_isatty_r+0x1a>
 8003f24:	682b      	ldr	r3, [r5, #0]
 8003f26:	b103      	cbz	r3, 8003f2a <_isatty_r+0x1a>
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	bd38      	pop	{r3, r4, r5, pc}
 8003f2c:	2000031c 	.word	0x2000031c

08003f30 <_init>:
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	bf00      	nop
 8003f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f36:	bc08      	pop	{r3}
 8003f38:	469e      	mov	lr, r3
 8003f3a:	4770      	bx	lr

08003f3c <_fini>:
 8003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3e:	bf00      	nop
 8003f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f42:	bc08      	pop	{r3}
 8003f44:	469e      	mov	lr, r3
 8003f46:	4770      	bx	lr
