
part2_filter_kernel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003f74  08003f74  00004f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fc8  08003fc8  00005084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003fc8  08003fc8  00004fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fd0  08003fd0  00005084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd0  08003fd0  00004fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fd4  08003fd4  00004fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08003fd8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000084  0800405c  00005084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  0800405c  00005330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1f1  00000000  00000000  000050b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f52  00000000  00000000  000102a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  000121f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ed  00000000  00000000  00012d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172b7  00000000  00000000  00013685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0c5  00000000  00000000  0002a93c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b9d6  00000000  00000000  00039a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c53d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003764  00000000  00000000  000c541c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000c8b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003f5c 	.word	0x08003f5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08003f5c 	.word	0x08003f5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d013      	beq.n	80005ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d00b      	beq.n	80005ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	e000      	b.n	80005d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0f9      	beq.n	80005d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005e2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fe43 	bl	800128c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f853 	bl	80006b0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800060a:	f000 f8b9 	bl	8000780 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f999 	bl	8000944 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000612:	f000 f8d5 	bl	80007c0 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000616:	f000 f901 	bl	800081c <MX_I2S2_Init>
  MX_I2S3_Init();
 800061a:	f000 f92d 	bl	8000878 <MX_I2S3_Init>
  MX_SPI1_Init();
 800061e:	f000 f95b 	bl	80008d8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // HAL_SuspendTick();

#ifdef OPTIMIZED
  ITM_Port32(30) = 1;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <main+0xa0>)
 8000624:	2201      	movs	r2, #1
 8000626:	601a      	str	r2, [r3, #0]
  ITM_Port32(31) = 1;
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <main+0xa4>)
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < TOTAL_IMAGES; i++) {
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e015      	b.n	8000660 <main+0x64>
	  optimized_image_filter(raw_data + (i * HEIGHT * WIDTH * CHANNELS),
 8000634:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <main+0xa8>)
 8000636:	6819      	ldr	r1, [r3, #0]
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	4613      	mov	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	031b      	lsls	r3, r3, #12
 8000642:	18c8      	adds	r0, r1, r3
 8000644:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <main+0xac>)
 8000646:	6819      	ldr	r1, [r3, #0]
			  	   output_data + (i * HEIGHT * WIDTH * CHANNELS));
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	031b      	lsls	r3, r3, #12
 8000652:	440b      	add	r3, r1
	  optimized_image_filter(raw_data + (i * HEIGHT * WIDTH * CHANNELS),
 8000654:	4619      	mov	r1, r3
 8000656:	f000 fa6d 	bl	8000b34 <optimized_image_filter>
  for (int i = 0; i < TOTAL_IMAGES; i++) {
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b04      	cmp	r3, #4
 8000664:	dde6      	ble.n	8000634 <main+0x38>
  }
  ITM_Port32(30) = 2;
 8000666:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <main+0xa0>)
 8000668:	2202      	movs	r2, #2
 800066a:	601a      	str	r2, [r3, #0]
			  	   output_data + (i * HEIGHT * WIDTH * CHANNELS));
  }
  ITM_Port32(31) = 2;
#endif

  for (int i = 0; i < (WIDTH*HEIGHT*CHANNELS); i++){
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	e00d      	b.n	800068e <main+0x92>
	  uint8_t ryan = output_data[i];
 8000672:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <main+0xac>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	71fb      	strb	r3, [r7, #7]
	  printf("%u |", ryan);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4619      	mov	r1, r3
 8000682:	480a      	ldr	r0, [pc, #40]	@ (80006ac <main+0xb0>)
 8000684:	f002 fdfe 	bl	8003284 <iprintf>
  for (int i = 0; i < (WIDTH*HEIGHT*CHANNELS); i++){
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	3301      	adds	r3, #1
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8000694:	dbed      	blt.n	8000672 <main+0x76>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	bf00      	nop
 8000698:	e7fd      	b.n	8000696 <main+0x9a>
 800069a:	bf00      	nop
 800069c:	e0000078 	.word	0xe0000078
 80006a0:	e000007c 	.word	0xe000007c
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000004 	.word	0x20000004
 80006ac:	08003f74 	.word	0x08003f74

080006b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	@ 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	@ 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fe35 	bl	800332e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b27      	ldr	r3, [pc, #156]	@ (8000778 <SystemClock_Config+0xc8>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	4a26      	ldr	r2, [pc, #152]	@ (8000778 <SystemClock_Config+0xc8>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e4:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <SystemClock_Config+0xc8>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b21      	ldr	r3, [pc, #132]	@ (800077c <SystemClock_Config+0xcc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemClock_Config+0xcc>)
 80006fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <SystemClock_Config+0xcc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000710:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000714:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000720:	2304      	movs	r3, #4
 8000722:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000724:	23c0      	movs	r3, #192	@ 0xc0
 8000726:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000728:	2304      	movs	r3, #4
 800072a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fe83 	bl	8002440 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000740:	f000 fb26 	bl	8000d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000744:	230f      	movs	r3, #15
 8000746:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000750:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2103      	movs	r1, #3
 8000760:	4618      	mov	r0, r3
 8000762:	f002 f8e5 	bl	8002930 <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800076c:	f000 fb10 	bl	8000d90 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3750      	adds	r7, #80	@ 0x50
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000796:	2301      	movs	r3, #1
 8000798:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800079a:	23c8      	movs	r3, #200	@ 0xc8
 800079c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800079e:	2305      	movs	r3, #5
 80007a0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 facd 	bl	8002d48 <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80007b4:	f000 faec 	bl	8000d90 <Error_Handler>
  }
}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007c6:	4a13      	ldr	r2, [pc, #76]	@ (8000814 <MX_I2C1_Init+0x54>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007cc:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <MX_I2C1_Init+0x58>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_I2C1_Init+0x50>)
 80007fe:	f001 f83b 	bl	8001878 <HAL_I2C_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000808:	f000 fac2 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000a0 	.word	0x200000a0
 8000814:	40005400 	.word	0x40005400
 8000818:	000186a0 	.word	0x000186a0

0800081c <MX_I2S2_Init>:
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_I2S2_Init+0x50>)
 8000822:	4a13      	ldr	r2, [pc, #76]	@ (8000870 <MX_I2S2_Init+0x54>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_I2S2_Init+0x50>)
 8000828:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800082c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_I2S2_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000834:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <MX_I2S2_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_I2S2_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000840:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <MX_I2S2_Init+0x50>)
 8000842:	4a0c      	ldr	r2, [pc, #48]	@ (8000874 <MX_I2S2_Init+0x58>)
 8000844:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_I2S2_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <MX_I2S2_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_I2S2_Init+0x50>)
 8000854:	2201      	movs	r2, #1
 8000856:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	@ (800086c <MX_I2S2_Init+0x50>)
 800085a:	f001 f951 	bl	8001b00 <HAL_I2S_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000864:	f000 fa94 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000f4 	.word	0x200000f4
 8000870:	40003800 	.word	0x40003800
 8000874:	00017700 	.word	0x00017700

08000878 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800087c:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <MX_I2S3_Init+0x54>)
 800087e:	4a14      	ldr	r2, [pc, #80]	@ (80008d0 <MX_I2S3_Init+0x58>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000882:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <MX_I2S3_Init+0x54>)
 8000884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000888:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800088a:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <MX_I2S3_Init+0x54>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000890:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <MX_I2S3_Init+0x54>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000896:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <MX_I2S3_Init+0x54>)
 8000898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800089c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <MX_I2S3_Init+0x54>)
 80008a0:	4a0c      	ldr	r2, [pc, #48]	@ (80008d4 <MX_I2S3_Init+0x5c>)
 80008a2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_I2S3_Init+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <MX_I2S3_Init+0x54>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <MX_I2S3_Init+0x54>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	@ (80008cc <MX_I2S3_Init+0x54>)
 80008b8:	f001 f922 	bl	8001b00 <HAL_I2S_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008c2:	f000 fa65 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000013c 	.word	0x2000013c
 80008d0:	40003c00 	.word	0x40003c00
 80008d4:	00017700 	.word	0x00017700

080008d8 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008dc:	4b17      	ldr	r3, [pc, #92]	@ (800093c <MX_SPI1_Init+0x64>)
 80008de:	4a18      	ldr	r2, [pc, #96]	@ (8000940 <MX_SPI1_Init+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008e2:	4b16      	ldr	r3, [pc, #88]	@ (800093c <MX_SPI1_Init+0x64>)
 80008e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ea:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_SPI1_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_SPI1_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_SPI1_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_SPI1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_SPI1_Init+0x64>)
 8000904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000908:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_SPI1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <MX_SPI1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_SPI1_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <MX_SPI1_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_SPI1_Init+0x64>)
 8000924:	220a      	movs	r2, #10
 8000926:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_SPI1_Init+0x64>)
 800092a:	f002 fb5f 	bl	8002fec <HAL_SPI_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000934:	f000 fa2c 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000184 	.word	0x20000184
 8000940:	40013000 	.word	0x40013000

08000944 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	@ 0x30
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	4b70      	ldr	r3, [pc, #448]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a6f      	ldr	r2, [pc, #444]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 8000964:	f043 0310 	orr.w	r3, r3, #16
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b6d      	ldr	r3, [pc, #436]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	4b69      	ldr	r3, [pc, #420]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a68      	ldr	r2, [pc, #416]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b66      	ldr	r3, [pc, #408]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b62      	ldr	r3, [pc, #392]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a61      	ldr	r2, [pc, #388]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 800099c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b5f      	ldr	r3, [pc, #380]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b5b      	ldr	r3, [pc, #364]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a5a      	ldr	r2, [pc, #360]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b58      	ldr	r3, [pc, #352]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b54      	ldr	r3, [pc, #336]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a53      	ldr	r2, [pc, #332]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b51      	ldr	r3, [pc, #324]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b4d      	ldr	r3, [pc, #308]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a4c      	ldr	r2, [pc, #304]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 80009f0:	f043 0308 	orr.w	r3, r3, #8
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b4a      	ldr	r3, [pc, #296]	@ (8000b20 <MX_GPIO_Init+0x1dc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2108      	movs	r1, #8
 8000a06:	4847      	ldr	r0, [pc, #284]	@ (8000b24 <MX_GPIO_Init+0x1e0>)
 8000a08:	f000 ff1c 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4845      	ldr	r0, [pc, #276]	@ (8000b28 <MX_GPIO_Init+0x1e4>)
 8000a12:	f000 ff17 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a1c:	4843      	ldr	r0, [pc, #268]	@ (8000b2c <MX_GPIO_Init+0x1e8>)
 8000a1e:	f000 ff11 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000a22:	2304      	movs	r3, #4
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	483b      	ldr	r0, [pc, #236]	@ (8000b24 <MX_GPIO_Init+0x1e0>)
 8000a36:	f000 fd81 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4834      	ldr	r0, [pc, #208]	@ (8000b24 <MX_GPIO_Init+0x1e0>)
 8000a52:	f000 fd73 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin | INT2_Pin | MEMS_INT2_Pin;
 8000a56:	2332      	movs	r3, #50	@ 0x32
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a5a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	482e      	ldr	r0, [pc, #184]	@ (8000b24 <MX_GPIO_Init+0x1e0>)
 8000a6c:	f000 fd66 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4828      	ldr	r0, [pc, #160]	@ (8000b28 <MX_GPIO_Init+0x1e4>)
 8000a88:	f000 fd58 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a90:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4823      	ldr	r0, [pc, #140]	@ (8000b30 <MX_GPIO_Init+0x1ec>)
 8000aa2:	f000 fd4b 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000aa6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	481b      	ldr	r0, [pc, #108]	@ (8000b2c <MX_GPIO_Init+0x1e8>)
 8000ac0:	f000 fd3c 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ac4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4815      	ldr	r0, [pc, #84]	@ (8000b30 <MX_GPIO_Init+0x1ec>)
 8000ada:	f000 fd2f 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 8000ade:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000af0:	230a      	movs	r3, #10
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	480d      	ldr	r0, [pc, #52]	@ (8000b30 <MX_GPIO_Init+0x1ec>)
 8000afc:	f000 fd1e 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b00:	2320      	movs	r3, #32
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4806      	ldr	r0, [pc, #24]	@ (8000b2c <MX_GPIO_Init+0x1e8>)
 8000b14:	f000 fd12 	bl	800153c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b18:	bf00      	nop
 8000b1a:	3730      	adds	r7, #48	@ 0x30
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	40020000 	.word	0x40020000

08000b34 <optimized_image_filter>:
    }
  }
}

void optimized_image_filter(uint8_t *image_addr, uint8_t *output_addr)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b087      	sub	sp, #28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]

  for (int y = 1; y < HEIGHT - 1; y++)
 8000b3e:	2301      	movs	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	e0fb      	b.n	8000d3c <optimized_image_filter+0x208>
  {
    for (int x = 1; x < WIDTH - 1; x++)
 8000b44:	2301      	movs	r3, #1
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	e0f1      	b.n	8000d2e <optimized_image_filter+0x1fa>
    {
      for (int c = 0; c < CHANNELS; c++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	e0e7      	b.n	8000d20 <optimized_image_filter+0x1ec>
      {
        int sum = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]

        // Unroll the kernel loops
        sum += (int)(image_addr[((y - 1) * WIDTH + (x - 1)) * CHANNELS + c] * kernel[0][0]);
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	019a      	lsls	r2, r3, #6
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	441a      	add	r2, r3
 8000b60:	4613      	mov	r3, r2
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	441a      	add	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4413      	add	r3, r2
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b77      	ldr	r3, [pc, #476]	@ (8000d54 <optimized_image_filter+0x220>)
 8000b76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b7a:	fb02 f303 	mul.w	r3, r2, r3
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	4413      	add	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
        sum += (int)(image_addr[((y - 1) * WIDTH + (x)) * CHANNELS + c] * kernel[0][1]);
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	019a      	lsls	r2, r3, #6
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	441a      	add	r2, r3
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	441a      	add	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	461a      	mov	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b6c      	ldr	r3, [pc, #432]	@ (8000d54 <optimized_image_filter+0x220>)
 8000ba4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ba8:	fb02 f303 	mul.w	r3, r2, r3
 8000bac:	68ba      	ldr	r2, [r7, #8]
 8000bae:	4413      	add	r3, r2
 8000bb0:	60bb      	str	r3, [r7, #8]
        sum += (int)(image_addr[((y - 1) * WIDTH + (x + 1)) * CHANNELS + c] * kernel[0][2]);
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	019a      	lsls	r2, r3, #6
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	441a      	add	r2, r3
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	441a      	add	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	461a      	mov	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b60      	ldr	r3, [pc, #384]	@ (8000d54 <optimized_image_filter+0x220>)
 8000bd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000bd8:	fb02 f303 	mul.w	r3, r2, r3
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	4413      	add	r3, r2
 8000be0:	60bb      	str	r3, [r7, #8]

        sum += (int)(image_addr[((y)*WIDTH + (x - 1)) * CHANNELS + c] * kernel[1][0]);
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	019a      	lsls	r2, r3, #6
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	441a      	add	r2, r3
 8000bec:	4613      	mov	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	441a      	add	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <optimized_image_filter+0x220>)
 8000c02:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c06:	fb02 f303 	mul.w	r3, r2, r3
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
        sum += (int)(image_addr[((y)*WIDTH + (x)) * CHANNELS + c] * kernel[1][1]);
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	019a      	lsls	r2, r3, #6
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	441a      	add	r2, r3
 8000c18:	4613      	mov	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	441a      	add	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4413      	add	r3, r2
 8000c22:	461a      	mov	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b49      	ldr	r3, [pc, #292]	@ (8000d54 <optimized_image_filter+0x220>)
 8000c2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c32:	fb02 f303 	mul.w	r3, r2, r3
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	4413      	add	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
        sum += (int)(image_addr[((y)*WIDTH + (x + 1)) * CHANNELS + c] * kernel[1][2]);
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	019a      	lsls	r2, r3, #6
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	3301      	adds	r3, #1
 8000c44:	441a      	add	r2, r3
 8000c46:	4613      	mov	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	441a      	add	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	461a      	mov	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d54 <optimized_image_filter+0x220>)
 8000c5c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c60:	fb02 f303 	mul.w	r3, r2, r3
 8000c64:	68ba      	ldr	r2, [r7, #8]
 8000c66:	4413      	add	r3, r2
 8000c68:	60bb      	str	r3, [r7, #8]

        sum += (int)(image_addr[((y + 1) * WIDTH + (x - 1)) * CHANNELS + c] * kernel[2][0]);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	019a      	lsls	r2, r3, #6
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	441a      	add	r2, r3
 8000c76:	4613      	mov	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	441a      	add	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	461a      	mov	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b32      	ldr	r3, [pc, #200]	@ (8000d54 <optimized_image_filter+0x220>)
 8000c8c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c90:	fb02 f303 	mul.w	r3, r2, r3
 8000c94:	68ba      	ldr	r2, [r7, #8]
 8000c96:	4413      	add	r3, r2
 8000c98:	60bb      	str	r3, [r7, #8]
        sum += (int)(image_addr[((y + 1) * WIDTH + (x)) * CHANNELS + c] * kernel[2][1]);
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	019a      	lsls	r2, r3, #6
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	441a      	add	r2, r3
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	441a      	add	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4413      	add	r3, r2
 8000cae:	461a      	mov	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b26      	ldr	r3, [pc, #152]	@ (8000d54 <optimized_image_filter+0x220>)
 8000cba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000cbe:	fb02 f303 	mul.w	r3, r2, r3
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
        sum += (int)(image_addr[((y + 1) * WIDTH + (x + 1)) * CHANNELS + c] * kernel[2][2]);
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	019a      	lsls	r2, r3, #6
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	441a      	add	r2, r3
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	441a      	add	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4413      	add	r3, r2
 8000cde:	461a      	mov	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <optimized_image_filter+0x220>)
 8000cea:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000cee:	fb02 f303 	mul.w	r3, r2, r3
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]

        // Clamp the result to the valid range [0, 255]
        if (sum < 0)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	da01      	bge.n	8000d02 <optimized_image_filter+0x1ce>
          sum = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
        if (sum > 255)
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	2bff      	cmp	r3, #255	@ 0xff
 8000d06:	dd01      	ble.n	8000d0c <optimized_image_filter+0x1d8>
          sum = 255;
 8000d08:	23ff      	movs	r3, #255	@ 0xff
 8000d0a:	60bb      	str	r3, [r7, #8]

        output_addr += 8;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	3308      	adds	r3, #8
 8000d10:	603b      	str	r3, [r7, #0]
        *output_addr = sum;
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	701a      	strb	r2, [r3, #0]
      for (int c = 0; c < CHANNELS; c++)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	f77f af14 	ble.w	8000b50 <optimized_image_filter+0x1c>
    for (int x = 1; x < WIDTH - 1; x++)
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	2b3e      	cmp	r3, #62	@ 0x3e
 8000d32:	f77f af0a 	ble.w	8000b4a <optimized_image_filter+0x16>
  for (int y = 1; y < HEIGHT - 1; y++)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8000d40:	f77f af00 	ble.w	8000b44 <optimized_image_filter+0x10>

      }
    }
  }
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	371c      	adds	r7, #28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008

08000d58 <_write>:

int _write(int file, char *ptr, int len)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	e009      	b.n	8000d7e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	60ba      	str	r2, [r7, #8]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fc1a 	bl	80005ac <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	dbf1      	blt.n	8000d6a <_write+0x12>
  }
  return len;
 8000d86:	687b      	ldr	r3, [r7, #4]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <Error_Handler+0x8>

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000daa:	4a0f      	ldr	r2, [pc, #60]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	4a08      	ldr	r2, [pc, #32]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dda:	2007      	movs	r0, #7
 8000ddc:	f000 fb7a 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a19      	ldr	r2, [pc, #100]	@ (8000e70 <HAL_I2C_MspInit+0x84>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d12c      	bne.n	8000e68 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <HAL_I2C_MspInit+0x88>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a17      	ldr	r2, [pc, #92]	@ (8000e74 <HAL_I2C_MspInit+0x88>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_I2C_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e2a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e30:	2312      	movs	r3, #18
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	480c      	ldr	r0, [pc, #48]	@ (8000e78 <HAL_I2C_MspInit+0x8c>)
 8000e48:	f000 fb78 	bl	800153c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <HAL_I2C_MspInit+0x88>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <HAL_I2C_MspInit+0x88>)
 8000e56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <HAL_I2C_MspInit+0x88>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	@ 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40005400 	.word	0x40005400
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020400 	.word	0x40020400

08000e7c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08e      	sub	sp, #56	@ 0x38
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a59      	ldr	r2, [pc, #356]	@ (8001000 <HAL_I2S_MspInit+0x184>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d15b      	bne.n	8000f56 <HAL_I2S_MspInit+0xda>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
 8000ea2:	4b58      	ldr	r3, [pc, #352]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	4a57      	ldr	r2, [pc, #348]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eae:	4b55      	ldr	r3, [pc, #340]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb6:	623b      	str	r3, [r7, #32]
 8000eb8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	4b51      	ldr	r3, [pc, #324]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a50      	ldr	r2, [pc, #320]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b4e      	ldr	r3, [pc, #312]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	4b4a      	ldr	r3, [pc, #296]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a49      	ldr	r2, [pc, #292]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b47      	ldr	r3, [pc, #284]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000f02:	2306      	movs	r3, #6
 8000f04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	483e      	ldr	r0, [pc, #248]	@ (8001008 <HAL_I2S_MspInit+0x18c>)
 8000f0e:	f000 fb15 	bl	800153c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f12:	2308      	movs	r3, #8
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f22:	2305      	movs	r3, #5
 8000f24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4836      	ldr	r0, [pc, #216]	@ (8001008 <HAL_I2S_MspInit+0x18c>)
 8000f2e:	f000 fb05 	bl	800153c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000f32:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f44:	2305      	movs	r3, #5
 8000f46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	482f      	ldr	r0, [pc, #188]	@ (800100c <HAL_I2S_MspInit+0x190>)
 8000f50:	f000 faf4 	bl	800153c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f54:	e04f      	b.n	8000ff6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001010 <HAL_I2S_MspInit+0x194>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d14a      	bne.n	8000ff6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	4a26      	ldr	r2, [pc, #152]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f70:	4b24      	ldr	r3, [pc, #144]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f84:	4a1f      	ldr	r2, [pc, #124]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa0:	4a18      	ldr	r2, [pc, #96]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa8:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <HAL_I2S_MspInit+0x188>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fc4:	2306      	movs	r3, #6
 8000fc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4811      	ldr	r0, [pc, #68]	@ (8001014 <HAL_I2S_MspInit+0x198>)
 8000fd0:	f000 fab4 	bl	800153c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000fd4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fe6:	2306      	movs	r3, #6
 8000fe8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	@ (8001008 <HAL_I2S_MspInit+0x18c>)
 8000ff2:	f000 faa3 	bl	800153c <HAL_GPIO_Init>
}
 8000ff6:	bf00      	nop
 8000ff8:	3738      	adds	r7, #56	@ 0x38
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40003800 	.word	0x40003800
 8001004:	40023800 	.word	0x40023800
 8001008:	40020800 	.word	0x40020800
 800100c:	40020400 	.word	0x40020400
 8001010:	40003c00 	.word	0x40003c00
 8001014:	40020000 	.word	0x40020000

08001018 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	@ 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a19      	ldr	r2, [pc, #100]	@ (800109c <HAL_SPI_MspInit+0x84>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d12b      	bne.n	8001092 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <HAL_SPI_MspInit+0x88>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001042:	4a17      	ldr	r2, [pc, #92]	@ (80010a0 <HAL_SPI_MspInit+0x88>)
 8001044:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001048:	6453      	str	r3, [r2, #68]	@ 0x44
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_SPI_MspInit+0x88>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <HAL_SPI_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a10      	ldr	r2, [pc, #64]	@ (80010a0 <HAL_SPI_MspInit+0x88>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <HAL_SPI_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001072:	23e0      	movs	r3, #224	@ 0xe0
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001082:	2305      	movs	r3, #5
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <HAL_SPI_MspInit+0x8c>)
 800108e:	f000 fa55 	bl	800153c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	@ 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40013000 	.word	0x40013000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000

080010a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <NMI_Handler+0x4>

080010b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <MemManage_Handler+0x4>

080010c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <UsageFault_Handler+0x4>

080010d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fe:	f000 f917 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}

08001106 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e00a      	b.n	800112e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001118:	f3af 8000 	nop.w
 800111c:	4601      	mov	r1, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	60ba      	str	r2, [r7, #8]
 8001124:	b2ca      	uxtb	r2, r1
 8001126:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3301      	adds	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	429a      	cmp	r2, r3
 8001134:	dbf0      	blt.n	8001118 <_read+0x12>
  }

  return len;
 8001136:	687b      	ldr	r3, [r7, #4]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001168:	605a      	str	r2, [r3, #4]
  return 0;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_isatty>:

int _isatty(int file)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001180:	2301      	movs	r3, #1
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800118e:	b480      	push	{r7}
 8001190:	b085      	sub	sp, #20
 8001192:	af00      	add	r7, sp, #0
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4a14      	ldr	r2, [pc, #80]	@ (8001204 <_sbrk+0x5c>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <_sbrk+0x60>)
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <_sbrk+0x64>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <_sbrk+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d207      	bcs.n	80011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d8:	f002 f8f8 	bl	80033cc <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	e009      	b.n	80011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a05      	ldr	r2, [pc, #20]	@ (800120c <_sbrk+0x64>)
 80011f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20020000 	.word	0x20020000
 8001208:	00000400 	.word	0x00000400
 800120c:	200001dc 	.word	0x200001dc
 8001210:	20000330 	.word	0x20000330

08001214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <SystemInit+0x20>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800121e:	4a05      	ldr	r2, [pc, #20]	@ (8001234 <SystemInit+0x20>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001238:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001270 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800123c:	f7ff ffea 	bl	8001214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001240:	480c      	ldr	r0, [pc, #48]	@ (8001274 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001242:	490d      	ldr	r1, [pc, #52]	@ (8001278 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001244:	4a0d      	ldr	r2, [pc, #52]	@ (800127c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001258:	4c0a      	ldr	r4, [pc, #40]	@ (8001284 <LoopFillZerobss+0x22>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001266:	f002 f8b7 	bl	80033d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126a:	f7ff f9c7 	bl	80005fc <main>
  bx  lr    
 800126e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001270:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800127c:	08003fd8 	.word	0x08003fd8
  ldr r2, =_sbss
 8001280:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001284:	20000330 	.word	0x20000330

08001288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC_IRQHandler>
	...

0800128c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001290:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <HAL_Init+0x40>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <HAL_Init+0x40>)
 8001296:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800129a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <HAL_Init+0x40>)
 80012a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <HAL_Init+0x40>)
 80012ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b4:	2003      	movs	r0, #3
 80012b6:	f000 f90d 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 f808 	bl	80012d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c0:	f7ff fd6c 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023c00 	.word	0x40023c00

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <HAL_InitTick+0x54>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <HAL_InitTick+0x58>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f917 	bl	8001522 <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00e      	b.n	800131c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d80a      	bhi.n	800131a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f000 f8ed 	bl	80014ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001310:	4a06      	ldr	r2, [pc, #24]	@ (800132c <HAL_InitTick+0x5c>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000001c 	.word	0x2000001c
 8001328:	20000024 	.word	0x20000024
 800132c:	20000020 	.word	0x20000020

08001330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_IncTick+0x20>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_IncTick+0x24>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <HAL_IncTick+0x24>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000024 	.word	0x20000024
 8001354:	200001e0 	.word	0x200001e0

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b03      	ldr	r3, [pc, #12]	@ (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	200001e0 	.word	0x200001e0

08001370 <__NVIC_SetPriorityGrouping>:
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800138c:	4013      	ands	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800139c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x44>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_GetPriorityGrouping>:
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <__NVIC_GetPriorityGrouping+0x18>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	0a1b      	lsrs	r3, r3, #8
 80013c2:	f003 0307 	and.w	r3, r3, #7
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_SetPriority>:
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db0a      	blt.n	80013fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	490c      	ldr	r1, [pc, #48]	@ (8001420 <__NVIC_SetPriority+0x4c>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	440b      	add	r3, r1
 80013f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80013fc:	e00a      	b.n	8001414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	@ (8001424 <__NVIC_SetPriority+0x50>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	3b04      	subs	r3, #4
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	440b      	add	r3, r1
 8001412:	761a      	strb	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <NVIC_EncodePriority>:
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	@ 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f1c3 0307 	rsb	r3, r3, #7
 8001442:	2b04      	cmp	r3, #4
 8001444:	bf28      	it	cs
 8001446:	2304      	movcs	r3, #4
 8001448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3304      	adds	r3, #4
 800144e:	2b06      	cmp	r3, #6
 8001450:	d902      	bls.n	8001458 <NVIC_EncodePriority+0x30>
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3b03      	subs	r3, #3
 8001456:	e000      	b.n	800145a <NVIC_EncodePriority+0x32>
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	f04f 32ff 	mov.w	r2, #4294967295
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001470:	f04f 31ff 	mov.w	r1, #4294967295
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43d9      	mvns	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	4313      	orrs	r3, r2
}
 8001482:	4618      	mov	r0, r3
 8001484:	3724      	adds	r7, #36	@ 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <SysTick_Config>:
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f7ff ff8e 	bl	80013d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff47 	bl	8001370 <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff5c 	bl	80013b8 <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff8e 	bl	8001428 <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5d 	bl	80013d4 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffb0 	bl	8001490 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	@ 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	e159      	b.n	800180c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001558:	2201      	movs	r2, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	f040 8148 	bne.w	8001806 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0303 	and.w	r3, r3, #3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d005      	beq.n	800158e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158a:	2b02      	cmp	r3, #2
 800158c:	d130      	bne.n	80015f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2203      	movs	r2, #3
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 0201 	and.w	r2, r3, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d017      	beq.n	800162c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d123      	bne.n	8001680 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	08da      	lsrs	r2, r3, #3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3208      	adds	r2, #8
 8001640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	220f      	movs	r2, #15
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	08da      	lsrs	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3208      	adds	r2, #8
 800167a:	69b9      	ldr	r1, [r7, #24]
 800167c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0203 	and.w	r2, r3, #3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80a2 	beq.w	8001806 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b57      	ldr	r3, [pc, #348]	@ (8001824 <HAL_GPIO_Init+0x2e8>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	4a56      	ldr	r2, [pc, #344]	@ (8001824 <HAL_GPIO_Init+0x2e8>)
 80016cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016d2:	4b54      	ldr	r3, [pc, #336]	@ (8001824 <HAL_GPIO_Init+0x2e8>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016de:	4a52      	ldr	r2, [pc, #328]	@ (8001828 <HAL_GPIO_Init+0x2ec>)
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	3302      	adds	r3, #2
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	220f      	movs	r2, #15
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a49      	ldr	r2, [pc, #292]	@ (800182c <HAL_GPIO_Init+0x2f0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d019      	beq.n	800173e <HAL_GPIO_Init+0x202>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a48      	ldr	r2, [pc, #288]	@ (8001830 <HAL_GPIO_Init+0x2f4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0x1fe>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a47      	ldr	r2, [pc, #284]	@ (8001834 <HAL_GPIO_Init+0x2f8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00d      	beq.n	8001736 <HAL_GPIO_Init+0x1fa>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a46      	ldr	r2, [pc, #280]	@ (8001838 <HAL_GPIO_Init+0x2fc>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d007      	beq.n	8001732 <HAL_GPIO_Init+0x1f6>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a45      	ldr	r2, [pc, #276]	@ (800183c <HAL_GPIO_Init+0x300>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d101      	bne.n	800172e <HAL_GPIO_Init+0x1f2>
 800172a:	2304      	movs	r3, #4
 800172c:	e008      	b.n	8001740 <HAL_GPIO_Init+0x204>
 800172e:	2307      	movs	r3, #7
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x204>
 8001732:	2303      	movs	r3, #3
 8001734:	e004      	b.n	8001740 <HAL_GPIO_Init+0x204>
 8001736:	2302      	movs	r3, #2
 8001738:	e002      	b.n	8001740 <HAL_GPIO_Init+0x204>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_GPIO_Init+0x204>
 800173e:	2300      	movs	r3, #0
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	f002 0203 	and.w	r2, r2, #3
 8001746:	0092      	lsls	r2, r2, #2
 8001748:	4093      	lsls	r3, r2
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001750:	4935      	ldr	r1, [pc, #212]	@ (8001828 <HAL_GPIO_Init+0x2ec>)
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3302      	adds	r3, #2
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175e:	4b38      	ldr	r3, [pc, #224]	@ (8001840 <HAL_GPIO_Init+0x304>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001782:	4a2f      	ldr	r2, [pc, #188]	@ (8001840 <HAL_GPIO_Init+0x304>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001788:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <HAL_GPIO_Init+0x304>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017ac:	4a24      	ldr	r2, [pc, #144]	@ (8001840 <HAL_GPIO_Init+0x304>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017b2:	4b23      	ldr	r3, [pc, #140]	@ (8001840 <HAL_GPIO_Init+0x304>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001840 <HAL_GPIO_Init+0x304>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017dc:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <HAL_GPIO_Init+0x304>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001800:	4a0f      	ldr	r2, [pc, #60]	@ (8001840 <HAL_GPIO_Init+0x304>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3301      	adds	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	2b0f      	cmp	r3, #15
 8001810:	f67f aea2 	bls.w	8001558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3724      	adds	r7, #36	@ 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40013800 	.word	0x40013800
 800182c:	40020000 	.word	0x40020000
 8001830:	40020400 	.word	0x40020400
 8001834:	40020800 	.word	0x40020800
 8001838:	40020c00 	.word	0x40020c00
 800183c:	40021000 	.word	0x40021000
 8001840:	40013c00 	.word	0x40013c00

08001844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
 8001850:	4613      	mov	r3, r2
 8001852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001860:	e003      	b.n	800186a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	041a      	lsls	r2, r3, #16
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	619a      	str	r2, [r3, #24]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e12b      	b.n	8001ae2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff faa4 	bl	8000dec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2224      	movs	r2, #36	@ 0x24
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018dc:	f001 fa20 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 80018e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4a81      	ldr	r2, [pc, #516]	@ (8001aec <HAL_I2C_Init+0x274>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d807      	bhi.n	80018fc <HAL_I2C_Init+0x84>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4a80      	ldr	r2, [pc, #512]	@ (8001af0 <HAL_I2C_Init+0x278>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	bf94      	ite	ls
 80018f4:	2301      	movls	r3, #1
 80018f6:	2300      	movhi	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	e006      	b.n	800190a <HAL_I2C_Init+0x92>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4a7d      	ldr	r2, [pc, #500]	@ (8001af4 <HAL_I2C_Init+0x27c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	bf94      	ite	ls
 8001904:	2301      	movls	r3, #1
 8001906:	2300      	movhi	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e0e7      	b.n	8001ae2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4a78      	ldr	r2, [pc, #480]	@ (8001af8 <HAL_I2C_Init+0x280>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	0c9b      	lsrs	r3, r3, #18
 800191c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	430a      	orrs	r2, r1
 8001930:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a6a      	ldr	r2, [pc, #424]	@ (8001aec <HAL_I2C_Init+0x274>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d802      	bhi.n	800194c <HAL_I2C_Init+0xd4>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3301      	adds	r3, #1
 800194a:	e009      	b.n	8001960 <HAL_I2C_Init+0xe8>
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	4a69      	ldr	r2, [pc, #420]	@ (8001afc <HAL_I2C_Init+0x284>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	099b      	lsrs	r3, r3, #6
 800195e:	3301      	adds	r3, #1
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	430b      	orrs	r3, r1
 8001966:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001972:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	495c      	ldr	r1, [pc, #368]	@ (8001aec <HAL_I2C_Init+0x274>)
 800197c:	428b      	cmp	r3, r1
 800197e:	d819      	bhi.n	80019b4 <HAL_I2C_Init+0x13c>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	1e59      	subs	r1, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fbb1 f3f3 	udiv	r3, r1, r3
 800198e:	1c59      	adds	r1, r3, #1
 8001990:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001994:	400b      	ands	r3, r1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00a      	beq.n	80019b0 <HAL_I2C_Init+0x138>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1e59      	subs	r1, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a8:	3301      	adds	r3, #1
 80019aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ae:	e051      	b.n	8001a54 <HAL_I2C_Init+0x1dc>
 80019b0:	2304      	movs	r3, #4
 80019b2:	e04f      	b.n	8001a54 <HAL_I2C_Init+0x1dc>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d111      	bne.n	80019e0 <HAL_I2C_Init+0x168>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1e58      	subs	r0, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	440b      	add	r3, r1
 80019ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ce:	3301      	adds	r3, #1
 80019d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bf0c      	ite	eq
 80019d8:	2301      	moveq	r3, #1
 80019da:	2300      	movne	r3, #0
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	e012      	b.n	8001a06 <HAL_I2C_Init+0x18e>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1e58      	subs	r0, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	0099      	lsls	r1, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f6:	3301      	adds	r3, #1
 80019f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_Init+0x196>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e022      	b.n	8001a54 <HAL_I2C_Init+0x1dc>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10e      	bne.n	8001a34 <HAL_I2C_Init+0x1bc>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1e58      	subs	r0, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6859      	ldr	r1, [r3, #4]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	440b      	add	r3, r1
 8001a24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a28:	3301      	adds	r3, #1
 8001a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a32:	e00f      	b.n	8001a54 <HAL_I2C_Init+0x1dc>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1e58      	subs	r0, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6859      	ldr	r1, [r3, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	0099      	lsls	r1, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	6809      	ldr	r1, [r1, #0]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69da      	ldr	r2, [r3, #28]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6911      	ldr	r1, [r2, #16]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68d2      	ldr	r2, [r2, #12]
 8001a8e:	4311      	orrs	r1, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	430b      	orrs	r3, r1
 8001a96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2220      	movs	r2, #32
 8001ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	000186a0 	.word	0x000186a0
 8001af0:	001e847f 	.word	0x001e847f
 8001af4:	003d08ff 	.word	0x003d08ff
 8001af8:	431bde83 	.word	0x431bde83
 8001afc:	10624dd3 	.word	0x10624dd3

08001b00 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e128      	b.n	8001d64 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a90      	ldr	r2, [pc, #576]	@ (8001d6c <HAL_I2S_Init+0x26c>)
 8001b2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff f9a5 	bl	8000e7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2202      	movs	r2, #2
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001b48:	f023 030f 	bic.w	r3, r3, #15
 8001b4c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2202      	movs	r2, #2
 8001b54:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d060      	beq.n	8001c20 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d102      	bne.n	8001b6c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001b66:	2310      	movs	r3, #16
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e001      	b.n	8001b70 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b20      	cmp	r3, #32
 8001b76:	d802      	bhi.n	8001b7e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001b7e:	2001      	movs	r0, #1
 8001b80:	f001 f9d2 	bl	8002f28 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b84:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b8e:	d125      	bne.n	8001bdc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d010      	beq.n	8001bba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	3305      	adds	r3, #5
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	e01f      	b.n	8001bfa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	461a      	mov	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd6:	3305      	adds	r3, #5
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	e00e      	b.n	8001bfa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	3305      	adds	r3, #5
 8001bf8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4a5c      	ldr	r2, [pc, #368]	@ (8001d70 <HAL_I2S_Init+0x270>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	08db      	lsrs	r3, r3, #3
 8001c04:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	085b      	lsrs	r3, r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	e003      	b.n	8001c28 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001c20:	2302      	movs	r3, #2
 8001c22:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d902      	bls.n	8001c34 <HAL_I2S_Init+0x134>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	2bff      	cmp	r3, #255	@ 0xff
 8001c32:	d907      	bls.n	8001c44 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c38:	f043 0210 	orr.w	r2, r3, #16
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e08f      	b.n	8001d64 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	ea42 0103 	orr.w	r1, r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69fa      	ldr	r2, [r7, #28]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001c62:	f023 030f 	bic.w	r3, r3, #15
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6851      	ldr	r1, [r2, #4]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6892      	ldr	r2, [r2, #8]
 8001c6e:	4311      	orrs	r1, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	68d2      	ldr	r2, [r2, #12]
 8001c74:	4311      	orrs	r1, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6992      	ldr	r2, [r2, #24]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c86:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d161      	bne.n	8001d54 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a38      	ldr	r2, [pc, #224]	@ (8001d74 <HAL_I2S_Init+0x274>)
 8001c94:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a37      	ldr	r2, [pc, #220]	@ (8001d78 <HAL_I2S_Init+0x278>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_I2S_Init+0x1a4>
 8001ca0:	4b36      	ldr	r3, [pc, #216]	@ (8001d7c <HAL_I2S_Init+0x27c>)
 8001ca2:	e001      	b.n	8001ca8 <HAL_I2S_Init+0x1a8>
 8001ca4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	4932      	ldr	r1, [pc, #200]	@ (8001d78 <HAL_I2S_Init+0x278>)
 8001cb0:	428a      	cmp	r2, r1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_I2S_Init+0x1b8>
 8001cb4:	4a31      	ldr	r2, [pc, #196]	@ (8001d7c <HAL_I2S_Init+0x27c>)
 8001cb6:	e001      	b.n	8001cbc <HAL_I2S_Init+0x1bc>
 8001cb8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001cbc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001cc0:	f023 030f 	bic.w	r3, r3, #15
 8001cc4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a2b      	ldr	r2, [pc, #172]	@ (8001d78 <HAL_I2S_Init+0x278>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d101      	bne.n	8001cd4 <HAL_I2S_Init+0x1d4>
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <HAL_I2S_Init+0x27c>)
 8001cd2:	e001      	b.n	8001cd8 <HAL_I2S_Init+0x1d8>
 8001cd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001cd8:	2202      	movs	r2, #2
 8001cda:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a25      	ldr	r2, [pc, #148]	@ (8001d78 <HAL_I2S_Init+0x278>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d101      	bne.n	8001cea <HAL_I2S_Init+0x1ea>
 8001ce6:	4b25      	ldr	r3, [pc, #148]	@ (8001d7c <HAL_I2S_Init+0x27c>)
 8001ce8:	e001      	b.n	8001cee <HAL_I2S_Init+0x1ee>
 8001cea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cfa:	d003      	beq.n	8001d04 <HAL_I2S_Init+0x204>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d103      	bne.n	8001d0c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001d04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	e001      	b.n	8001d10 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	897b      	ldrh	r3, [r7, #10]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d3c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <HAL_I2S_Init+0x278>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_I2S_Init+0x24c>
 8001d48:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <HAL_I2S_Init+0x27c>)
 8001d4a:	e001      	b.n	8001d50 <HAL_I2S_Init+0x250>
 8001d4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d50:	897a      	ldrh	r2, [r7, #10]
 8001d52:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	08001e77 	.word	0x08001e77
 8001d70:	cccccccd 	.word	0xcccccccd
 8001d74:	08001f8d 	.word	0x08001f8d
 8001d78:	40003800 	.word	0x40003800
 8001d7c:	40003400 	.word	0x40003400

08001d80 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc8:	881a      	ldrh	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	1c9a      	adds	r2, r3, #2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10e      	bne.n	8001e10 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e00:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffb8 	bl	8001d80 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2a:	b292      	uxth	r2, r2
 8001e2c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e32:	1c9a      	adds	r2, r3, #2
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10e      	bne.n	8001e6e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff93 	bl	8001d94 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d13a      	bne.n	8001f08 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d109      	bne.n	8001eb0 <I2S_IRQHandler+0x3a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea6:	2b40      	cmp	r3, #64	@ 0x40
 8001ea8:	d102      	bne.n	8001eb0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffb4 	bl	8001e18 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb6:	2b40      	cmp	r3, #64	@ 0x40
 8001eb8:	d126      	bne.n	8001f08 <I2S_IRQHandler+0x92>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0320 	and.w	r3, r3, #32
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	d11f      	bne.n	8001f08 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001ed6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efa:	f043 0202 	orr.w	r2, r3, #2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ff50 	bl	8001da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d136      	bne.n	8001f82 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d109      	bne.n	8001f32 <I2S_IRQHandler+0xbc>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f28:	2b80      	cmp	r3, #128	@ 0x80
 8001f2a:	d102      	bne.n	8001f32 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff45 	bl	8001dbc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d122      	bne.n	8001f82 <I2S_IRQHandler+0x10c>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d11b      	bne.n	8001f82 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f58:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f74:	f043 0204 	orr.w	r2, r3, #4
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff13 	bl	8001da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a92      	ldr	r2, [pc, #584]	@ (80021ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001fa6:	4b92      	ldr	r3, [pc, #584]	@ (80021f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fa8:	e001      	b.n	8001fae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001faa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a8b      	ldr	r2, [pc, #556]	@ (80021ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001fc4:	4b8a      	ldr	r3, [pc, #552]	@ (80021f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fc6:	e001      	b.n	8001fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001fc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fd8:	d004      	beq.n	8001fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 8099 	bne.w	8002116 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d107      	bne.n	8001ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d002      	beq.n	8001ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f925 	bl	8002248 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f9c8 	bl	80023a8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800201e:	2b40      	cmp	r3, #64	@ 0x40
 8002020:	d13a      	bne.n	8002098 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f003 0320 	and.w	r3, r3, #32
 8002028:	2b00      	cmp	r3, #0
 800202a:	d035      	beq.n	8002098 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a6e      	ldr	r2, [pc, #440]	@ (80021ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002036:	4b6e      	ldr	r3, [pc, #440]	@ (80021f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002038:	e001      	b.n	800203e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800203a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4969      	ldr	r1, [pc, #420]	@ (80021ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002046:	428b      	cmp	r3, r1
 8002048:	d101      	bne.n	800204e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800204a:	4b69      	ldr	r3, [pc, #420]	@ (80021f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800204c:	e001      	b.n	8002052 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800204e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002052:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002056:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002066:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f043 0202 	orr.w	r2, r3, #2
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff fe88 	bl	8001da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b08      	cmp	r3, #8
 80020a0:	f040 80c3 	bne.w	800222a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80bd 	beq.w	800222a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80020be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a49      	ldr	r2, [pc, #292]	@ (80021ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80020ca:	4b49      	ldr	r3, [pc, #292]	@ (80021f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020cc:	e001      	b.n	80020d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80020ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4944      	ldr	r1, [pc, #272]	@ (80021ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020da:	428b      	cmp	r3, r1
 80020dc:	d101      	bne.n	80020e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80020de:	4b44      	ldr	r3, [pc, #272]	@ (80021f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020e0:	e001      	b.n	80020e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80020e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020ea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80020ec:	2300      	movs	r3, #0
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	f043 0204 	orr.w	r2, r3, #4
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fe4a 	bl	8001da8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002114:	e089      	b.n	800222a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b02      	cmp	r3, #2
 800211e:	d107      	bne.n	8002130 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f8be 	bl	80022ac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b01      	cmp	r3, #1
 8002138:	d107      	bne.n	800214a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f8fd 	bl	8002344 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002150:	2b40      	cmp	r3, #64	@ 0x40
 8002152:	d12f      	bne.n	80021b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b00      	cmp	r3, #0
 800215c:	d02a      	beq.n	80021b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800216c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1e      	ldr	r2, [pc, #120]	@ (80021ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d101      	bne.n	800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002178:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800217a:	e001      	b.n	8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800217c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4919      	ldr	r1, [pc, #100]	@ (80021ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002188:	428b      	cmp	r3, r1
 800218a:	d101      	bne.n	8002190 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800218c:	4b18      	ldr	r3, [pc, #96]	@ (80021f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800218e:	e001      	b.n	8002194 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002190:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002194:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002198:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	f043 0202 	orr.w	r2, r3, #2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fdfa 	bl	8001da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d136      	bne.n	800222c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d031      	beq.n	800222c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	@ (80021ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d101      	bne.n	80021d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80021d2:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021d4:	e001      	b.n	80021da <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80021d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4902      	ldr	r1, [pc, #8]	@ (80021ec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021e2:	428b      	cmp	r3, r1
 80021e4:	d106      	bne.n	80021f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80021e6:	4b02      	ldr	r3, [pc, #8]	@ (80021f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021e8:	e006      	b.n	80021f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80021ea:	bf00      	nop
 80021ec:	40003800 	.word	0x40003800
 80021f0:	40003400 	.word	0x40003400
 80021f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80021fc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800220c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f043 0204 	orr.w	r2, r3, #4
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fdc0 	bl	8001da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002228:	e000      	b.n	800222c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800222a:	bf00      	nop
}
 800222c:	bf00      	nop
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002254:	1c99      	adds	r1, r3, #2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6251      	str	r1, [r2, #36]	@ 0x24
 800225a:	881a      	ldrh	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d113      	bne.n	80022a2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002288:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800228e:	b29b      	uxth	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d106      	bne.n	80022a2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ffc9 	bl	8002234 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b8:	1c99      	adds	r1, r3, #2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6251      	str	r1, [r2, #36]	@ 0x24
 80022be:	8819      	ldrh	r1, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1d      	ldr	r2, [pc, #116]	@ (800233c <I2SEx_TxISR_I2SExt+0x90>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <I2SEx_TxISR_I2SExt+0x22>
 80022ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <I2SEx_TxISR_I2SExt+0x94>)
 80022cc:	e001      	b.n	80022d2 <I2SEx_TxISR_I2SExt+0x26>
 80022ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022d2:	460a      	mov	r2, r1
 80022d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d121      	bne.n	8002332 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a12      	ldr	r2, [pc, #72]	@ (800233c <I2SEx_TxISR_I2SExt+0x90>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <I2SEx_TxISR_I2SExt+0x50>
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <I2SEx_TxISR_I2SExt+0x94>)
 80022fa:	e001      	b.n	8002300 <I2SEx_TxISR_I2SExt+0x54>
 80022fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	490d      	ldr	r1, [pc, #52]	@ (800233c <I2SEx_TxISR_I2SExt+0x90>)
 8002308:	428b      	cmp	r3, r1
 800230a:	d101      	bne.n	8002310 <I2SEx_TxISR_I2SExt+0x64>
 800230c:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <I2SEx_TxISR_I2SExt+0x94>)
 800230e:	e001      	b.n	8002314 <I2SEx_TxISR_I2SExt+0x68>
 8002310:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002314:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002318:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800231e:	b29b      	uxth	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d106      	bne.n	8002332 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ff81 	bl	8002234 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40003800 	.word	0x40003800
 8002340:	40003400 	.word	0x40003400

08002344 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68d8      	ldr	r0, [r3, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	1c99      	adds	r1, r3, #2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800235c:	b282      	uxth	r2, r0
 800235e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d113      	bne.n	80023a0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002386:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ff4a 	bl	8002234 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a20      	ldr	r2, [pc, #128]	@ (8002438 <I2SEx_RxISR_I2SExt+0x90>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d101      	bne.n	80023be <I2SEx_RxISR_I2SExt+0x16>
 80023ba:	4b20      	ldr	r3, [pc, #128]	@ (800243c <I2SEx_RxISR_I2SExt+0x94>)
 80023bc:	e001      	b.n	80023c2 <I2SEx_RxISR_I2SExt+0x1a>
 80023be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023c2:	68d8      	ldr	r0, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c8:	1c99      	adds	r1, r3, #2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80023ce:	b282      	uxth	r2, r0
 80023d0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d121      	bne.n	800242e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a12      	ldr	r2, [pc, #72]	@ (8002438 <I2SEx_RxISR_I2SExt+0x90>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d101      	bne.n	80023f8 <I2SEx_RxISR_I2SExt+0x50>
 80023f4:	4b11      	ldr	r3, [pc, #68]	@ (800243c <I2SEx_RxISR_I2SExt+0x94>)
 80023f6:	e001      	b.n	80023fc <I2SEx_RxISR_I2SExt+0x54>
 80023f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	490d      	ldr	r1, [pc, #52]	@ (8002438 <I2SEx_RxISR_I2SExt+0x90>)
 8002404:	428b      	cmp	r3, r1
 8002406:	d101      	bne.n	800240c <I2SEx_RxISR_I2SExt+0x64>
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <I2SEx_RxISR_I2SExt+0x94>)
 800240a:	e001      	b.n	8002410 <I2SEx_RxISR_I2SExt+0x68>
 800240c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002410:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002414:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d106      	bne.n	800242e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff03 	bl	8002234 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40003800 	.word	0x40003800
 800243c:	40003400 	.word	0x40003400

08002440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e267      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d075      	beq.n	800254a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800245e:	4b88      	ldr	r3, [pc, #544]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b04      	cmp	r3, #4
 8002468:	d00c      	beq.n	8002484 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246a:	4b85      	ldr	r3, [pc, #532]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002472:	2b08      	cmp	r3, #8
 8002474:	d112      	bne.n	800249c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002476:	4b82      	ldr	r3, [pc, #520]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800247e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002482:	d10b      	bne.n	800249c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	4b7e      	ldr	r3, [pc, #504]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d05b      	beq.n	8002548 <HAL_RCC_OscConfig+0x108>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d157      	bne.n	8002548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e242      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a4:	d106      	bne.n	80024b4 <HAL_RCC_OscConfig+0x74>
 80024a6:	4b76      	ldr	r3, [pc, #472]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a75      	ldr	r2, [pc, #468]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e01d      	b.n	80024f0 <HAL_RCC_OscConfig+0xb0>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x98>
 80024be:	4b70      	ldr	r3, [pc, #448]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6f      	ldr	r2, [pc, #444]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6c      	ldr	r2, [pc, #432]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0xb0>
 80024d8:	4b69      	ldr	r3, [pc, #420]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a68      	ldr	r2, [pc, #416]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b66      	ldr	r3, [pc, #408]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a65      	ldr	r2, [pc, #404]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d013      	beq.n	8002520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe ff2e 	bl	8001358 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe ff2a 	bl	8001358 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	@ 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e207      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b5b      	ldr	r3, [pc, #364]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0xc0>
 800251e:	e014      	b.n	800254a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe ff1a 	bl	8001358 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002528:	f7fe ff16 	bl	8001358 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e1f3      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	4b51      	ldr	r3, [pc, #324]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0xe8>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d063      	beq.n	800261e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002556:	4b4a      	ldr	r3, [pc, #296]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b47      	ldr	r3, [pc, #284]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800256a:	2b08      	cmp	r3, #8
 800256c:	d11c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256e:	4b44      	ldr	r3, [pc, #272]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d116      	bne.n	80025a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	4b41      	ldr	r3, [pc, #260]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_RCC_OscConfig+0x152>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e1c7      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b3b      	ldr	r3, [pc, #236]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4937      	ldr	r1, [pc, #220]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	e03a      	b.n	800261e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b0:	4b34      	ldr	r3, [pc, #208]	@ (8002684 <HAL_RCC_OscConfig+0x244>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7fe fecf 	bl	8001358 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025be:	f7fe fecb 	bl	8001358 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1a8      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b28      	ldr	r3, [pc, #160]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4925      	ldr	r1, [pc, #148]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f2:	4b24      	ldr	r3, [pc, #144]	@ (8002684 <HAL_RCC_OscConfig+0x244>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe feae 	bl	8001358 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002600:	f7fe feaa 	bl	8001358 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e187      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d036      	beq.n	8002698 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <HAL_RCC_OscConfig+0x248>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7fe fe8e 	bl	8001358 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002640:	f7fe fe8a 	bl	8001358 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e167      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <HAL_RCC_OscConfig+0x240>)
 8002654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x200>
 800265e:	e01b      	b.n	8002698 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002660:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <HAL_RCC_OscConfig+0x248>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002666:	f7fe fe77 	bl	8001358 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	e00e      	b.n	800268c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266e:	f7fe fe73 	bl	8001358 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d907      	bls.n	800268c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e150      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
 8002680:	40023800 	.word	0x40023800
 8002684:	42470000 	.word	0x42470000
 8002688:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	4b88      	ldr	r3, [pc, #544]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 800268e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ea      	bne.n	800266e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8097 	beq.w	80027d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026aa:	4b81      	ldr	r3, [pc, #516]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b7d      	ldr	r3, [pc, #500]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	4a7c      	ldr	r2, [pc, #496]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026c6:	4b7a      	ldr	r3, [pc, #488]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	4b77      	ldr	r3, [pc, #476]	@ (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d118      	bne.n	8002714 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e2:	4b74      	ldr	r3, [pc, #464]	@ (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a73      	ldr	r2, [pc, #460]	@ (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ee:	f7fe fe33 	bl	8001358 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f6:	f7fe fe2f 	bl	8001358 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e10c      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	4b6a      	ldr	r3, [pc, #424]	@ (80028b4 <HAL_RCC_OscConfig+0x474>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x2ea>
 800271c:	4b64      	ldr	r3, [pc, #400]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002720:	4a63      	ldr	r2, [pc, #396]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6713      	str	r3, [r2, #112]	@ 0x70
 8002728:	e01c      	b.n	8002764 <HAL_RCC_OscConfig+0x324>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b05      	cmp	r3, #5
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x30c>
 8002732:	4b5f      	ldr	r3, [pc, #380]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002736:	4a5e      	ldr	r2, [pc, #376]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6713      	str	r3, [r2, #112]	@ 0x70
 800273e:	4b5c      	ldr	r3, [pc, #368]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002742:	4a5b      	ldr	r2, [pc, #364]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6713      	str	r3, [r2, #112]	@ 0x70
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0x324>
 800274c:	4b58      	ldr	r3, [pc, #352]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002750:	4a57      	ldr	r2, [pc, #348]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	6713      	str	r3, [r2, #112]	@ 0x70
 8002758:	4b55      	ldr	r3, [pc, #340]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275c:	4a54      	ldr	r2, [pc, #336]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 800275e:	f023 0304 	bic.w	r3, r3, #4
 8002762:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d015      	beq.n	8002798 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7fe fdf4 	bl	8001358 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002772:	e00a      	b.n	800278a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7fe fdf0 	bl	8001358 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0cb      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	4b49      	ldr	r3, [pc, #292]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0ee      	beq.n	8002774 <HAL_RCC_OscConfig+0x334>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002798:	f7fe fdde 	bl	8001358 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7fe fdda 	bl	8001358 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e0b5      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b6:	4b3e      	ldr	r3, [pc, #248]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1ee      	bne.n	80027a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c8:	4b39      	ldr	r3, [pc, #228]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	4a38      	ldr	r2, [pc, #224]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80a1 	beq.w	8002920 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027de:	4b34      	ldr	r3, [pc, #208]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d05c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d141      	bne.n	8002876 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f2:	4b31      	ldr	r3, [pc, #196]	@ (80028b8 <HAL_RCC_OscConfig+0x478>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fdae 	bl	8001358 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002800:	f7fe fdaa 	bl	8001358 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e087      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	4b27      	ldr	r3, [pc, #156]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	019b      	lsls	r3, r3, #6
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	041b      	lsls	r3, r3, #16
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	491b      	ldr	r1, [pc, #108]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002848:	4b1b      	ldr	r3, [pc, #108]	@ (80028b8 <HAL_RCC_OscConfig+0x478>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7fe fd83 	bl	8001358 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002856:	f7fe fd7f 	bl	8001358 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e05c      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002868:	4b11      	ldr	r3, [pc, #68]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x416>
 8002874:	e054      	b.n	8002920 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002876:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <HAL_RCC_OscConfig+0x478>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe fd6c 	bl	8001358 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002884:	f7fe fd68 	bl	8001358 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e045      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x444>
 80028a2:	e03d      	b.n	8002920 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e038      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40007000 	.word	0x40007000
 80028b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <HAL_RCC_OscConfig+0x4ec>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d028      	beq.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d121      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d11a      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d111      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002902:	085b      	lsrs	r3, r3, #1
 8002904:	3b01      	subs	r3, #1
 8002906:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d107      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002916:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800

08002930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0cc      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002944:	4b68      	ldr	r3, [pc, #416]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d90c      	bls.n	800296c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b65      	ldr	r3, [pc, #404]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b63      	ldr	r3, [pc, #396]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0b8      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002984:	4b59      	ldr	r3, [pc, #356]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a58      	ldr	r2, [pc, #352]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800298e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800299c:	4b53      	ldr	r3, [pc, #332]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a52      	ldr	r2, [pc, #328]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b50      	ldr	r3, [pc, #320]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	494d      	ldr	r1, [pc, #308]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d044      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b47      	ldr	r3, [pc, #284]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d119      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ee:	4b3f      	ldr	r3, [pc, #252]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e06f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	4b3b      	ldr	r3, [pc, #236]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e067      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a0e:	4b37      	ldr	r3, [pc, #220]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f023 0203 	bic.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4934      	ldr	r1, [pc, #208]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a20:	f7fe fc9a 	bl	8001358 <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a28:	f7fe fc96 	bl	8001358 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e04f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 020c 	and.w	r2, r3, #12
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d1eb      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a50:	4b25      	ldr	r3, [pc, #148]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d20c      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e032      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4b19      	ldr	r3, [pc, #100]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4916      	ldr	r1, [pc, #88]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa2:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	490e      	ldr	r1, [pc, #56]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ab6:	f000 f821 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	490a      	ldr	r1, [pc, #40]	@ (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	5ccb      	ldrb	r3, [r1, r3]
 8002aca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ace:	4a09      	ldr	r2, [pc, #36]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ad2:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fbfa 	bl	80012d0 <HAL_InitTick>

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00
 8002aec:	40023800 	.word	0x40023800
 8002af0:	08003f7c 	.word	0x08003f7c
 8002af4:	2000001c 	.word	0x2000001c
 8002af8:	20000020 	.word	0x20000020

08002afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b00:	b094      	sub	sp, #80	@ 0x50
 8002b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b14:	4b79      	ldr	r3, [pc, #484]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d00d      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x40>
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	f200 80e1 	bhi.w	8002ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x34>
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b2e:	e0db      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b73      	ldr	r3, [pc, #460]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b34:	e0db      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b36:	4b73      	ldr	r3, [pc, #460]	@ (8002d04 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b3a:	e0d8      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b46:	4b6d      	ldr	r3, [pc, #436]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d063      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b52:	4b6a      	ldr	r3, [pc, #424]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	099b      	lsrs	r3, r3, #6
 8002b58:	2200      	movs	r2, #0
 8002b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b66:	2300      	movs	r3, #0
 8002b68:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b6e:	4622      	mov	r2, r4
 8002b70:	462b      	mov	r3, r5
 8002b72:	f04f 0000 	mov.w	r0, #0
 8002b76:	f04f 0100 	mov.w	r1, #0
 8002b7a:	0159      	lsls	r1, r3, #5
 8002b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b80:	0150      	lsls	r0, r2, #5
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4621      	mov	r1, r4
 8002b88:	1a51      	subs	r1, r2, r1
 8002b8a:	6139      	str	r1, [r7, #16]
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ba0:	4659      	mov	r1, fp
 8002ba2:	018b      	lsls	r3, r1, #6
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002baa:	4651      	mov	r1, sl
 8002bac:	018a      	lsls	r2, r1, #6
 8002bae:	4651      	mov	r1, sl
 8002bb0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bb4:	4659      	mov	r1, fp
 8002bb6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bce:	4690      	mov	r8, r2
 8002bd0:	4699      	mov	r9, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	eb18 0303 	adds.w	r3, r8, r3
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	462b      	mov	r3, r5
 8002bdc:	eb49 0303 	adc.w	r3, r9, r3
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bee:	4629      	mov	r1, r5
 8002bf0:	024b      	lsls	r3, r1, #9
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	024a      	lsls	r2, r1, #9
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c02:	2200      	movs	r2, #0
 8002c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c0c:	f7fd fb38 	bl	8000280 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c18:	e058      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b38      	ldr	r3, [pc, #224]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	2200      	movs	r2, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	4611      	mov	r1, r2
 8002c26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c34:	4642      	mov	r2, r8
 8002c36:	464b      	mov	r3, r9
 8002c38:	f04f 0000 	mov.w	r0, #0
 8002c3c:	f04f 0100 	mov.w	r1, #0
 8002c40:	0159      	lsls	r1, r3, #5
 8002c42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c46:	0150      	lsls	r0, r2, #5
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c52:	4649      	mov	r1, r9
 8002c54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c70:	eb63 050b 	sbc.w	r5, r3, fp
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	00eb      	lsls	r3, r5, #3
 8002c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c82:	00e2      	lsls	r2, r4, #3
 8002c84:	4614      	mov	r4, r2
 8002c86:	461d      	mov	r5, r3
 8002c88:	4643      	mov	r3, r8
 8002c8a:	18e3      	adds	r3, r4, r3
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	464b      	mov	r3, r9
 8002c90:	eb45 0303 	adc.w	r3, r5, r3
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	028b      	lsls	r3, r1, #10
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cac:	4621      	mov	r1, r4
 8002cae:	028a      	lsls	r2, r1, #10
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	61fa      	str	r2, [r7, #28]
 8002cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc0:	f7fd fade 	bl	8000280 <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002cdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3750      	adds	r7, #80	@ 0x50
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	007a1200 	.word	0x007a1200

08002d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	@ (8002d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	2000001c 	.word	0x2000001c

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d24:	f7ff fff0 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0a9b      	lsrs	r3, r3, #10
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	@ (8002d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	08003f8c 	.word	0x08003f8c

08002d48 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d038      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d70:	4b68      	ldr	r3, [pc, #416]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d76:	f7fe faef 	bl	8001358 <HAL_GetTick>
 8002d7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d7e:	f7fe faeb 	bl	8001358 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e0bd      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d90:	4b61      	ldr	r3, [pc, #388]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	019b      	lsls	r3, r3, #6
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	071b      	lsls	r3, r3, #28
 8002dae:	495a      	ldr	r1, [pc, #360]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002db6:	4b57      	ldr	r3, [pc, #348]	@ (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dbc:	f7fe facc 	bl	8001358 <HAL_GetTick>
 8002dc0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dc4:	f7fe fac8 	bl	8001358 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e09a      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dd6:	4b50      	ldr	r3, [pc, #320]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8083 	beq.w	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	4b48      	ldr	r3, [pc, #288]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	4a47      	ldr	r2, [pc, #284]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e00:	4b45      	ldr	r3, [pc, #276]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e0c:	4b43      	ldr	r3, [pc, #268]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a42      	ldr	r2, [pc, #264]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e16:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e18:	f7fe fa9e 	bl	8001358 <HAL_GetTick>
 8002e1c:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e20:	f7fe fa9a 	bl	8001358 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e06c      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002e32:	4b3a      	ldr	r3, [pc, #232]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e3e:	4b36      	ldr	r3, [pc, #216]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e46:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d02f      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d028      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e64:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e66:	4b2e      	ldr	r3, [pc, #184]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e72:	4a29      	ldr	r2, [pc, #164]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e78:	4b27      	ldr	r3, [pc, #156]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d114      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e84:	f7fe fa68 	bl	8001358 <HAL_GetTick>
 8002e88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fa64 	bl	8001358 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e034      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0ee      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002eba:	d10d      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002ebc:	4b16      	ldr	r3, [pc, #88]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ed0:	4911      	ldr	r1, [pc, #68]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
 8002ed6:	e005      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a0e      	ldr	r2, [pc, #56]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ede:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ee2:	6093      	str	r3, [r2, #8]
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef0:	4909      	ldr	r1, [pc, #36]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	7d1a      	ldrb	r2, [r3, #20]
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002f08:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	42470068 	.word	0x42470068
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	42470e40 	.word	0x42470e40
 8002f24:	424711e0 	.word	0x424711e0

08002f28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d141      	bne.n	8002fca <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002f46:	4b25      	ldr	r3, [pc, #148]	@ (8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f4e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f5c:	d131      	bne.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002f5e:	4b20      	ldr	r3, [pc, #128]	@ (8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002f60:	617b      	str	r3, [r7, #20]
          break;
 8002f62:	e031      	b.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f64:	4b1d      	ldr	r3, [pc, #116]	@ (8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f70:	d109      	bne.n	8002f86 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002f72:	4b1a      	ldr	r3, [pc, #104]	@ (8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f7c:	4a19      	ldr	r2, [pc, #100]	@ (8002fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	e008      	b.n	8002f98 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002f86:	4b15      	ldr	r3, [pc, #84]	@ (8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f90:	4a15      	ldr	r2, [pc, #84]	@ (8002fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002f98:	4b10      	ldr	r3, [pc, #64]	@ (8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f9e:	099b      	lsrs	r3, r3, #6
 8002fa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002fac:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fb2:	0f1b      	lsrs	r3, r3, #28
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	617b      	str	r3, [r7, #20]
          break;
 8002fc0:	e002      	b.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
          break;
 8002fc6:	bf00      	nop
        }
      }
      break;
 8002fc8:	e000      	b.n	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
    default:
    {
      break;
 8002fca:	bf00      	nop
    }
  }
  return frequency;
 8002fcc:	697b      	ldr	r3, [r7, #20]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	00bb8000 	.word	0x00bb8000
 8002fe4:	007a1200 	.word	0x007a1200
 8002fe8:	00f42400 	.word	0x00f42400

08002fec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e07b      	b.n	80030f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	2b00      	cmp	r3, #0
 8003004:	d108      	bne.n	8003018 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800300e:	d009      	beq.n	8003024 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	61da      	str	r2, [r3, #28]
 8003016:	e005      	b.n	8003024 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd ffea 	bl	8001018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800305a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a8:	ea42 0103 	orr.w	r1, r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	f003 0104 	and.w	r1, r3, #4
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	f003 0210 	and.w	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <std>:
 8003100:	2300      	movs	r3, #0
 8003102:	b510      	push	{r4, lr}
 8003104:	4604      	mov	r4, r0
 8003106:	e9c0 3300 	strd	r3, r3, [r0]
 800310a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800310e:	6083      	str	r3, [r0, #8]
 8003110:	8181      	strh	r1, [r0, #12]
 8003112:	6643      	str	r3, [r0, #100]	@ 0x64
 8003114:	81c2      	strh	r2, [r0, #14]
 8003116:	6183      	str	r3, [r0, #24]
 8003118:	4619      	mov	r1, r3
 800311a:	2208      	movs	r2, #8
 800311c:	305c      	adds	r0, #92	@ 0x5c
 800311e:	f000 f906 	bl	800332e <memset>
 8003122:	4b0d      	ldr	r3, [pc, #52]	@ (8003158 <std+0x58>)
 8003124:	6263      	str	r3, [r4, #36]	@ 0x24
 8003126:	4b0d      	ldr	r3, [pc, #52]	@ (800315c <std+0x5c>)
 8003128:	62a3      	str	r3, [r4, #40]	@ 0x28
 800312a:	4b0d      	ldr	r3, [pc, #52]	@ (8003160 <std+0x60>)
 800312c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800312e:	4b0d      	ldr	r3, [pc, #52]	@ (8003164 <std+0x64>)
 8003130:	6323      	str	r3, [r4, #48]	@ 0x30
 8003132:	4b0d      	ldr	r3, [pc, #52]	@ (8003168 <std+0x68>)
 8003134:	6224      	str	r4, [r4, #32]
 8003136:	429c      	cmp	r4, r3
 8003138:	d006      	beq.n	8003148 <std+0x48>
 800313a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800313e:	4294      	cmp	r4, r2
 8003140:	d002      	beq.n	8003148 <std+0x48>
 8003142:	33d0      	adds	r3, #208	@ 0xd0
 8003144:	429c      	cmp	r4, r3
 8003146:	d105      	bne.n	8003154 <std+0x54>
 8003148:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800314c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003150:	f000 b966 	b.w	8003420 <__retarget_lock_init_recursive>
 8003154:	bd10      	pop	{r4, pc}
 8003156:	bf00      	nop
 8003158:	080032a9 	.word	0x080032a9
 800315c:	080032cb 	.word	0x080032cb
 8003160:	08003303 	.word	0x08003303
 8003164:	08003327 	.word	0x08003327
 8003168:	200001e4 	.word	0x200001e4

0800316c <stdio_exit_handler>:
 800316c:	4a02      	ldr	r2, [pc, #8]	@ (8003178 <stdio_exit_handler+0xc>)
 800316e:	4903      	ldr	r1, [pc, #12]	@ (800317c <stdio_exit_handler+0x10>)
 8003170:	4803      	ldr	r0, [pc, #12]	@ (8003180 <stdio_exit_handler+0x14>)
 8003172:	f000 b869 	b.w	8003248 <_fwalk_sglue>
 8003176:	bf00      	nop
 8003178:	20000028 	.word	0x20000028
 800317c:	08003cbd 	.word	0x08003cbd
 8003180:	20000038 	.word	0x20000038

08003184 <cleanup_stdio>:
 8003184:	6841      	ldr	r1, [r0, #4]
 8003186:	4b0c      	ldr	r3, [pc, #48]	@ (80031b8 <cleanup_stdio+0x34>)
 8003188:	4299      	cmp	r1, r3
 800318a:	b510      	push	{r4, lr}
 800318c:	4604      	mov	r4, r0
 800318e:	d001      	beq.n	8003194 <cleanup_stdio+0x10>
 8003190:	f000 fd94 	bl	8003cbc <_fflush_r>
 8003194:	68a1      	ldr	r1, [r4, #8]
 8003196:	4b09      	ldr	r3, [pc, #36]	@ (80031bc <cleanup_stdio+0x38>)
 8003198:	4299      	cmp	r1, r3
 800319a:	d002      	beq.n	80031a2 <cleanup_stdio+0x1e>
 800319c:	4620      	mov	r0, r4
 800319e:	f000 fd8d 	bl	8003cbc <_fflush_r>
 80031a2:	68e1      	ldr	r1, [r4, #12]
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <cleanup_stdio+0x3c>)
 80031a6:	4299      	cmp	r1, r3
 80031a8:	d004      	beq.n	80031b4 <cleanup_stdio+0x30>
 80031aa:	4620      	mov	r0, r4
 80031ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031b0:	f000 bd84 	b.w	8003cbc <_fflush_r>
 80031b4:	bd10      	pop	{r4, pc}
 80031b6:	bf00      	nop
 80031b8:	200001e4 	.word	0x200001e4
 80031bc:	2000024c 	.word	0x2000024c
 80031c0:	200002b4 	.word	0x200002b4

080031c4 <global_stdio_init.part.0>:
 80031c4:	b510      	push	{r4, lr}
 80031c6:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <global_stdio_init.part.0+0x30>)
 80031c8:	4c0b      	ldr	r4, [pc, #44]	@ (80031f8 <global_stdio_init.part.0+0x34>)
 80031ca:	4a0c      	ldr	r2, [pc, #48]	@ (80031fc <global_stdio_init.part.0+0x38>)
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	4620      	mov	r0, r4
 80031d0:	2200      	movs	r2, #0
 80031d2:	2104      	movs	r1, #4
 80031d4:	f7ff ff94 	bl	8003100 <std>
 80031d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80031dc:	2201      	movs	r2, #1
 80031de:	2109      	movs	r1, #9
 80031e0:	f7ff ff8e 	bl	8003100 <std>
 80031e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80031e8:	2202      	movs	r2, #2
 80031ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031ee:	2112      	movs	r1, #18
 80031f0:	f7ff bf86 	b.w	8003100 <std>
 80031f4:	2000031c 	.word	0x2000031c
 80031f8:	200001e4 	.word	0x200001e4
 80031fc:	0800316d 	.word	0x0800316d

08003200 <__sfp_lock_acquire>:
 8003200:	4801      	ldr	r0, [pc, #4]	@ (8003208 <__sfp_lock_acquire+0x8>)
 8003202:	f000 b90e 	b.w	8003422 <__retarget_lock_acquire_recursive>
 8003206:	bf00      	nop
 8003208:	20000325 	.word	0x20000325

0800320c <__sfp_lock_release>:
 800320c:	4801      	ldr	r0, [pc, #4]	@ (8003214 <__sfp_lock_release+0x8>)
 800320e:	f000 b909 	b.w	8003424 <__retarget_lock_release_recursive>
 8003212:	bf00      	nop
 8003214:	20000325 	.word	0x20000325

08003218 <__sinit>:
 8003218:	b510      	push	{r4, lr}
 800321a:	4604      	mov	r4, r0
 800321c:	f7ff fff0 	bl	8003200 <__sfp_lock_acquire>
 8003220:	6a23      	ldr	r3, [r4, #32]
 8003222:	b11b      	cbz	r3, 800322c <__sinit+0x14>
 8003224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003228:	f7ff bff0 	b.w	800320c <__sfp_lock_release>
 800322c:	4b04      	ldr	r3, [pc, #16]	@ (8003240 <__sinit+0x28>)
 800322e:	6223      	str	r3, [r4, #32]
 8003230:	4b04      	ldr	r3, [pc, #16]	@ (8003244 <__sinit+0x2c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1f5      	bne.n	8003224 <__sinit+0xc>
 8003238:	f7ff ffc4 	bl	80031c4 <global_stdio_init.part.0>
 800323c:	e7f2      	b.n	8003224 <__sinit+0xc>
 800323e:	bf00      	nop
 8003240:	08003185 	.word	0x08003185
 8003244:	2000031c 	.word	0x2000031c

08003248 <_fwalk_sglue>:
 8003248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800324c:	4607      	mov	r7, r0
 800324e:	4688      	mov	r8, r1
 8003250:	4614      	mov	r4, r2
 8003252:	2600      	movs	r6, #0
 8003254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003258:	f1b9 0901 	subs.w	r9, r9, #1
 800325c:	d505      	bpl.n	800326a <_fwalk_sglue+0x22>
 800325e:	6824      	ldr	r4, [r4, #0]
 8003260:	2c00      	cmp	r4, #0
 8003262:	d1f7      	bne.n	8003254 <_fwalk_sglue+0xc>
 8003264:	4630      	mov	r0, r6
 8003266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800326a:	89ab      	ldrh	r3, [r5, #12]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d907      	bls.n	8003280 <_fwalk_sglue+0x38>
 8003270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003274:	3301      	adds	r3, #1
 8003276:	d003      	beq.n	8003280 <_fwalk_sglue+0x38>
 8003278:	4629      	mov	r1, r5
 800327a:	4638      	mov	r0, r7
 800327c:	47c0      	blx	r8
 800327e:	4306      	orrs	r6, r0
 8003280:	3568      	adds	r5, #104	@ 0x68
 8003282:	e7e9      	b.n	8003258 <_fwalk_sglue+0x10>

08003284 <iprintf>:
 8003284:	b40f      	push	{r0, r1, r2, r3}
 8003286:	b507      	push	{r0, r1, r2, lr}
 8003288:	4906      	ldr	r1, [pc, #24]	@ (80032a4 <iprintf+0x20>)
 800328a:	ab04      	add	r3, sp, #16
 800328c:	6808      	ldr	r0, [r1, #0]
 800328e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003292:	6881      	ldr	r1, [r0, #8]
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	f000 f9e9 	bl	800366c <_vfiprintf_r>
 800329a:	b003      	add	sp, #12
 800329c:	f85d eb04 	ldr.w	lr, [sp], #4
 80032a0:	b004      	add	sp, #16
 80032a2:	4770      	bx	lr
 80032a4:	20000034 	.word	0x20000034

080032a8 <__sread>:
 80032a8:	b510      	push	{r4, lr}
 80032aa:	460c      	mov	r4, r1
 80032ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032b0:	f000 f868 	bl	8003384 <_read_r>
 80032b4:	2800      	cmp	r0, #0
 80032b6:	bfab      	itete	ge
 80032b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80032ba:	89a3      	ldrhlt	r3, [r4, #12]
 80032bc:	181b      	addge	r3, r3, r0
 80032be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80032c2:	bfac      	ite	ge
 80032c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80032c6:	81a3      	strhlt	r3, [r4, #12]
 80032c8:	bd10      	pop	{r4, pc}

080032ca <__swrite>:
 80032ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ce:	461f      	mov	r7, r3
 80032d0:	898b      	ldrh	r3, [r1, #12]
 80032d2:	05db      	lsls	r3, r3, #23
 80032d4:	4605      	mov	r5, r0
 80032d6:	460c      	mov	r4, r1
 80032d8:	4616      	mov	r6, r2
 80032da:	d505      	bpl.n	80032e8 <__swrite+0x1e>
 80032dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032e0:	2302      	movs	r3, #2
 80032e2:	2200      	movs	r2, #0
 80032e4:	f000 f83c 	bl	8003360 <_lseek_r>
 80032e8:	89a3      	ldrh	r3, [r4, #12]
 80032ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032f2:	81a3      	strh	r3, [r4, #12]
 80032f4:	4632      	mov	r2, r6
 80032f6:	463b      	mov	r3, r7
 80032f8:	4628      	mov	r0, r5
 80032fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032fe:	f000 b853 	b.w	80033a8 <_write_r>

08003302 <__sseek>:
 8003302:	b510      	push	{r4, lr}
 8003304:	460c      	mov	r4, r1
 8003306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800330a:	f000 f829 	bl	8003360 <_lseek_r>
 800330e:	1c43      	adds	r3, r0, #1
 8003310:	89a3      	ldrh	r3, [r4, #12]
 8003312:	bf15      	itete	ne
 8003314:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003316:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800331a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800331e:	81a3      	strheq	r3, [r4, #12]
 8003320:	bf18      	it	ne
 8003322:	81a3      	strhne	r3, [r4, #12]
 8003324:	bd10      	pop	{r4, pc}

08003326 <__sclose>:
 8003326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800332a:	f000 b809 	b.w	8003340 <_close_r>

0800332e <memset>:
 800332e:	4402      	add	r2, r0
 8003330:	4603      	mov	r3, r0
 8003332:	4293      	cmp	r3, r2
 8003334:	d100      	bne.n	8003338 <memset+0xa>
 8003336:	4770      	bx	lr
 8003338:	f803 1b01 	strb.w	r1, [r3], #1
 800333c:	e7f9      	b.n	8003332 <memset+0x4>
	...

08003340 <_close_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	4d06      	ldr	r5, [pc, #24]	@ (800335c <_close_r+0x1c>)
 8003344:	2300      	movs	r3, #0
 8003346:	4604      	mov	r4, r0
 8003348:	4608      	mov	r0, r1
 800334a:	602b      	str	r3, [r5, #0]
 800334c:	f7fd fef8 	bl	8001140 <_close>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d102      	bne.n	800335a <_close_r+0x1a>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	b103      	cbz	r3, 800335a <_close_r+0x1a>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	20000320 	.word	0x20000320

08003360 <_lseek_r>:
 8003360:	b538      	push	{r3, r4, r5, lr}
 8003362:	4d07      	ldr	r5, [pc, #28]	@ (8003380 <_lseek_r+0x20>)
 8003364:	4604      	mov	r4, r0
 8003366:	4608      	mov	r0, r1
 8003368:	4611      	mov	r1, r2
 800336a:	2200      	movs	r2, #0
 800336c:	602a      	str	r2, [r5, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	f7fd ff0d 	bl	800118e <_lseek>
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	d102      	bne.n	800337e <_lseek_r+0x1e>
 8003378:	682b      	ldr	r3, [r5, #0]
 800337a:	b103      	cbz	r3, 800337e <_lseek_r+0x1e>
 800337c:	6023      	str	r3, [r4, #0]
 800337e:	bd38      	pop	{r3, r4, r5, pc}
 8003380:	20000320 	.word	0x20000320

08003384 <_read_r>:
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	4d07      	ldr	r5, [pc, #28]	@ (80033a4 <_read_r+0x20>)
 8003388:	4604      	mov	r4, r0
 800338a:	4608      	mov	r0, r1
 800338c:	4611      	mov	r1, r2
 800338e:	2200      	movs	r2, #0
 8003390:	602a      	str	r2, [r5, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	f7fd feb7 	bl	8001106 <_read>
 8003398:	1c43      	adds	r3, r0, #1
 800339a:	d102      	bne.n	80033a2 <_read_r+0x1e>
 800339c:	682b      	ldr	r3, [r5, #0]
 800339e:	b103      	cbz	r3, 80033a2 <_read_r+0x1e>
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	bd38      	pop	{r3, r4, r5, pc}
 80033a4:	20000320 	.word	0x20000320

080033a8 <_write_r>:
 80033a8:	b538      	push	{r3, r4, r5, lr}
 80033aa:	4d07      	ldr	r5, [pc, #28]	@ (80033c8 <_write_r+0x20>)
 80033ac:	4604      	mov	r4, r0
 80033ae:	4608      	mov	r0, r1
 80033b0:	4611      	mov	r1, r2
 80033b2:	2200      	movs	r2, #0
 80033b4:	602a      	str	r2, [r5, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f7fd fcce 	bl	8000d58 <_write>
 80033bc:	1c43      	adds	r3, r0, #1
 80033be:	d102      	bne.n	80033c6 <_write_r+0x1e>
 80033c0:	682b      	ldr	r3, [r5, #0]
 80033c2:	b103      	cbz	r3, 80033c6 <_write_r+0x1e>
 80033c4:	6023      	str	r3, [r4, #0]
 80033c6:	bd38      	pop	{r3, r4, r5, pc}
 80033c8:	20000320 	.word	0x20000320

080033cc <__errno>:
 80033cc:	4b01      	ldr	r3, [pc, #4]	@ (80033d4 <__errno+0x8>)
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000034 	.word	0x20000034

080033d8 <__libc_init_array>:
 80033d8:	b570      	push	{r4, r5, r6, lr}
 80033da:	4d0d      	ldr	r5, [pc, #52]	@ (8003410 <__libc_init_array+0x38>)
 80033dc:	4c0d      	ldr	r4, [pc, #52]	@ (8003414 <__libc_init_array+0x3c>)
 80033de:	1b64      	subs	r4, r4, r5
 80033e0:	10a4      	asrs	r4, r4, #2
 80033e2:	2600      	movs	r6, #0
 80033e4:	42a6      	cmp	r6, r4
 80033e6:	d109      	bne.n	80033fc <__libc_init_array+0x24>
 80033e8:	4d0b      	ldr	r5, [pc, #44]	@ (8003418 <__libc_init_array+0x40>)
 80033ea:	4c0c      	ldr	r4, [pc, #48]	@ (800341c <__libc_init_array+0x44>)
 80033ec:	f000 fdb6 	bl	8003f5c <_init>
 80033f0:	1b64      	subs	r4, r4, r5
 80033f2:	10a4      	asrs	r4, r4, #2
 80033f4:	2600      	movs	r6, #0
 80033f6:	42a6      	cmp	r6, r4
 80033f8:	d105      	bne.n	8003406 <__libc_init_array+0x2e>
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003400:	4798      	blx	r3
 8003402:	3601      	adds	r6, #1
 8003404:	e7ee      	b.n	80033e4 <__libc_init_array+0xc>
 8003406:	f855 3b04 	ldr.w	r3, [r5], #4
 800340a:	4798      	blx	r3
 800340c:	3601      	adds	r6, #1
 800340e:	e7f2      	b.n	80033f6 <__libc_init_array+0x1e>
 8003410:	08003fd0 	.word	0x08003fd0
 8003414:	08003fd0 	.word	0x08003fd0
 8003418:	08003fd0 	.word	0x08003fd0
 800341c:	08003fd4 	.word	0x08003fd4

08003420 <__retarget_lock_init_recursive>:
 8003420:	4770      	bx	lr

08003422 <__retarget_lock_acquire_recursive>:
 8003422:	4770      	bx	lr

08003424 <__retarget_lock_release_recursive>:
 8003424:	4770      	bx	lr
	...

08003428 <_free_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	4605      	mov	r5, r0
 800342c:	2900      	cmp	r1, #0
 800342e:	d041      	beq.n	80034b4 <_free_r+0x8c>
 8003430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003434:	1f0c      	subs	r4, r1, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	bfb8      	it	lt
 800343a:	18e4      	addlt	r4, r4, r3
 800343c:	f000 f8e0 	bl	8003600 <__malloc_lock>
 8003440:	4a1d      	ldr	r2, [pc, #116]	@ (80034b8 <_free_r+0x90>)
 8003442:	6813      	ldr	r3, [r2, #0]
 8003444:	b933      	cbnz	r3, 8003454 <_free_r+0x2c>
 8003446:	6063      	str	r3, [r4, #4]
 8003448:	6014      	str	r4, [r2, #0]
 800344a:	4628      	mov	r0, r5
 800344c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003450:	f000 b8dc 	b.w	800360c <__malloc_unlock>
 8003454:	42a3      	cmp	r3, r4
 8003456:	d908      	bls.n	800346a <_free_r+0x42>
 8003458:	6820      	ldr	r0, [r4, #0]
 800345a:	1821      	adds	r1, r4, r0
 800345c:	428b      	cmp	r3, r1
 800345e:	bf01      	itttt	eq
 8003460:	6819      	ldreq	r1, [r3, #0]
 8003462:	685b      	ldreq	r3, [r3, #4]
 8003464:	1809      	addeq	r1, r1, r0
 8003466:	6021      	streq	r1, [r4, #0]
 8003468:	e7ed      	b.n	8003446 <_free_r+0x1e>
 800346a:	461a      	mov	r2, r3
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	b10b      	cbz	r3, 8003474 <_free_r+0x4c>
 8003470:	42a3      	cmp	r3, r4
 8003472:	d9fa      	bls.n	800346a <_free_r+0x42>
 8003474:	6811      	ldr	r1, [r2, #0]
 8003476:	1850      	adds	r0, r2, r1
 8003478:	42a0      	cmp	r0, r4
 800347a:	d10b      	bne.n	8003494 <_free_r+0x6c>
 800347c:	6820      	ldr	r0, [r4, #0]
 800347e:	4401      	add	r1, r0
 8003480:	1850      	adds	r0, r2, r1
 8003482:	4283      	cmp	r3, r0
 8003484:	6011      	str	r1, [r2, #0]
 8003486:	d1e0      	bne.n	800344a <_free_r+0x22>
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	6053      	str	r3, [r2, #4]
 800348e:	4408      	add	r0, r1
 8003490:	6010      	str	r0, [r2, #0]
 8003492:	e7da      	b.n	800344a <_free_r+0x22>
 8003494:	d902      	bls.n	800349c <_free_r+0x74>
 8003496:	230c      	movs	r3, #12
 8003498:	602b      	str	r3, [r5, #0]
 800349a:	e7d6      	b.n	800344a <_free_r+0x22>
 800349c:	6820      	ldr	r0, [r4, #0]
 800349e:	1821      	adds	r1, r4, r0
 80034a0:	428b      	cmp	r3, r1
 80034a2:	bf04      	itt	eq
 80034a4:	6819      	ldreq	r1, [r3, #0]
 80034a6:	685b      	ldreq	r3, [r3, #4]
 80034a8:	6063      	str	r3, [r4, #4]
 80034aa:	bf04      	itt	eq
 80034ac:	1809      	addeq	r1, r1, r0
 80034ae:	6021      	streq	r1, [r4, #0]
 80034b0:	6054      	str	r4, [r2, #4]
 80034b2:	e7ca      	b.n	800344a <_free_r+0x22>
 80034b4:	bd38      	pop	{r3, r4, r5, pc}
 80034b6:	bf00      	nop
 80034b8:	2000032c 	.word	0x2000032c

080034bc <sbrk_aligned>:
 80034bc:	b570      	push	{r4, r5, r6, lr}
 80034be:	4e0f      	ldr	r6, [pc, #60]	@ (80034fc <sbrk_aligned+0x40>)
 80034c0:	460c      	mov	r4, r1
 80034c2:	6831      	ldr	r1, [r6, #0]
 80034c4:	4605      	mov	r5, r0
 80034c6:	b911      	cbnz	r1, 80034ce <sbrk_aligned+0x12>
 80034c8:	f000 fcb4 	bl	8003e34 <_sbrk_r>
 80034cc:	6030      	str	r0, [r6, #0]
 80034ce:	4621      	mov	r1, r4
 80034d0:	4628      	mov	r0, r5
 80034d2:	f000 fcaf 	bl	8003e34 <_sbrk_r>
 80034d6:	1c43      	adds	r3, r0, #1
 80034d8:	d103      	bne.n	80034e2 <sbrk_aligned+0x26>
 80034da:	f04f 34ff 	mov.w	r4, #4294967295
 80034de:	4620      	mov	r0, r4
 80034e0:	bd70      	pop	{r4, r5, r6, pc}
 80034e2:	1cc4      	adds	r4, r0, #3
 80034e4:	f024 0403 	bic.w	r4, r4, #3
 80034e8:	42a0      	cmp	r0, r4
 80034ea:	d0f8      	beq.n	80034de <sbrk_aligned+0x22>
 80034ec:	1a21      	subs	r1, r4, r0
 80034ee:	4628      	mov	r0, r5
 80034f0:	f000 fca0 	bl	8003e34 <_sbrk_r>
 80034f4:	3001      	adds	r0, #1
 80034f6:	d1f2      	bne.n	80034de <sbrk_aligned+0x22>
 80034f8:	e7ef      	b.n	80034da <sbrk_aligned+0x1e>
 80034fa:	bf00      	nop
 80034fc:	20000328 	.word	0x20000328

08003500 <_malloc_r>:
 8003500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003504:	1ccd      	adds	r5, r1, #3
 8003506:	f025 0503 	bic.w	r5, r5, #3
 800350a:	3508      	adds	r5, #8
 800350c:	2d0c      	cmp	r5, #12
 800350e:	bf38      	it	cc
 8003510:	250c      	movcc	r5, #12
 8003512:	2d00      	cmp	r5, #0
 8003514:	4606      	mov	r6, r0
 8003516:	db01      	blt.n	800351c <_malloc_r+0x1c>
 8003518:	42a9      	cmp	r1, r5
 800351a:	d904      	bls.n	8003526 <_malloc_r+0x26>
 800351c:	230c      	movs	r3, #12
 800351e:	6033      	str	r3, [r6, #0]
 8003520:	2000      	movs	r0, #0
 8003522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003526:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80035fc <_malloc_r+0xfc>
 800352a:	f000 f869 	bl	8003600 <__malloc_lock>
 800352e:	f8d8 3000 	ldr.w	r3, [r8]
 8003532:	461c      	mov	r4, r3
 8003534:	bb44      	cbnz	r4, 8003588 <_malloc_r+0x88>
 8003536:	4629      	mov	r1, r5
 8003538:	4630      	mov	r0, r6
 800353a:	f7ff ffbf 	bl	80034bc <sbrk_aligned>
 800353e:	1c43      	adds	r3, r0, #1
 8003540:	4604      	mov	r4, r0
 8003542:	d158      	bne.n	80035f6 <_malloc_r+0xf6>
 8003544:	f8d8 4000 	ldr.w	r4, [r8]
 8003548:	4627      	mov	r7, r4
 800354a:	2f00      	cmp	r7, #0
 800354c:	d143      	bne.n	80035d6 <_malloc_r+0xd6>
 800354e:	2c00      	cmp	r4, #0
 8003550:	d04b      	beq.n	80035ea <_malloc_r+0xea>
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	4639      	mov	r1, r7
 8003556:	4630      	mov	r0, r6
 8003558:	eb04 0903 	add.w	r9, r4, r3
 800355c:	f000 fc6a 	bl	8003e34 <_sbrk_r>
 8003560:	4581      	cmp	r9, r0
 8003562:	d142      	bne.n	80035ea <_malloc_r+0xea>
 8003564:	6821      	ldr	r1, [r4, #0]
 8003566:	1a6d      	subs	r5, r5, r1
 8003568:	4629      	mov	r1, r5
 800356a:	4630      	mov	r0, r6
 800356c:	f7ff ffa6 	bl	80034bc <sbrk_aligned>
 8003570:	3001      	adds	r0, #1
 8003572:	d03a      	beq.n	80035ea <_malloc_r+0xea>
 8003574:	6823      	ldr	r3, [r4, #0]
 8003576:	442b      	add	r3, r5
 8003578:	6023      	str	r3, [r4, #0]
 800357a:	f8d8 3000 	ldr.w	r3, [r8]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	bb62      	cbnz	r2, 80035dc <_malloc_r+0xdc>
 8003582:	f8c8 7000 	str.w	r7, [r8]
 8003586:	e00f      	b.n	80035a8 <_malloc_r+0xa8>
 8003588:	6822      	ldr	r2, [r4, #0]
 800358a:	1b52      	subs	r2, r2, r5
 800358c:	d420      	bmi.n	80035d0 <_malloc_r+0xd0>
 800358e:	2a0b      	cmp	r2, #11
 8003590:	d917      	bls.n	80035c2 <_malloc_r+0xc2>
 8003592:	1961      	adds	r1, r4, r5
 8003594:	42a3      	cmp	r3, r4
 8003596:	6025      	str	r5, [r4, #0]
 8003598:	bf18      	it	ne
 800359a:	6059      	strne	r1, [r3, #4]
 800359c:	6863      	ldr	r3, [r4, #4]
 800359e:	bf08      	it	eq
 80035a0:	f8c8 1000 	streq.w	r1, [r8]
 80035a4:	5162      	str	r2, [r4, r5]
 80035a6:	604b      	str	r3, [r1, #4]
 80035a8:	4630      	mov	r0, r6
 80035aa:	f000 f82f 	bl	800360c <__malloc_unlock>
 80035ae:	f104 000b 	add.w	r0, r4, #11
 80035b2:	1d23      	adds	r3, r4, #4
 80035b4:	f020 0007 	bic.w	r0, r0, #7
 80035b8:	1ac2      	subs	r2, r0, r3
 80035ba:	bf1c      	itt	ne
 80035bc:	1a1b      	subne	r3, r3, r0
 80035be:	50a3      	strne	r3, [r4, r2]
 80035c0:	e7af      	b.n	8003522 <_malloc_r+0x22>
 80035c2:	6862      	ldr	r2, [r4, #4]
 80035c4:	42a3      	cmp	r3, r4
 80035c6:	bf0c      	ite	eq
 80035c8:	f8c8 2000 	streq.w	r2, [r8]
 80035cc:	605a      	strne	r2, [r3, #4]
 80035ce:	e7eb      	b.n	80035a8 <_malloc_r+0xa8>
 80035d0:	4623      	mov	r3, r4
 80035d2:	6864      	ldr	r4, [r4, #4]
 80035d4:	e7ae      	b.n	8003534 <_malloc_r+0x34>
 80035d6:	463c      	mov	r4, r7
 80035d8:	687f      	ldr	r7, [r7, #4]
 80035da:	e7b6      	b.n	800354a <_malloc_r+0x4a>
 80035dc:	461a      	mov	r2, r3
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	42a3      	cmp	r3, r4
 80035e2:	d1fb      	bne.n	80035dc <_malloc_r+0xdc>
 80035e4:	2300      	movs	r3, #0
 80035e6:	6053      	str	r3, [r2, #4]
 80035e8:	e7de      	b.n	80035a8 <_malloc_r+0xa8>
 80035ea:	230c      	movs	r3, #12
 80035ec:	6033      	str	r3, [r6, #0]
 80035ee:	4630      	mov	r0, r6
 80035f0:	f000 f80c 	bl	800360c <__malloc_unlock>
 80035f4:	e794      	b.n	8003520 <_malloc_r+0x20>
 80035f6:	6005      	str	r5, [r0, #0]
 80035f8:	e7d6      	b.n	80035a8 <_malloc_r+0xa8>
 80035fa:	bf00      	nop
 80035fc:	2000032c 	.word	0x2000032c

08003600 <__malloc_lock>:
 8003600:	4801      	ldr	r0, [pc, #4]	@ (8003608 <__malloc_lock+0x8>)
 8003602:	f7ff bf0e 	b.w	8003422 <__retarget_lock_acquire_recursive>
 8003606:	bf00      	nop
 8003608:	20000324 	.word	0x20000324

0800360c <__malloc_unlock>:
 800360c:	4801      	ldr	r0, [pc, #4]	@ (8003614 <__malloc_unlock+0x8>)
 800360e:	f7ff bf09 	b.w	8003424 <__retarget_lock_release_recursive>
 8003612:	bf00      	nop
 8003614:	20000324 	.word	0x20000324

08003618 <__sfputc_r>:
 8003618:	6893      	ldr	r3, [r2, #8]
 800361a:	3b01      	subs	r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	b410      	push	{r4}
 8003620:	6093      	str	r3, [r2, #8]
 8003622:	da08      	bge.n	8003636 <__sfputc_r+0x1e>
 8003624:	6994      	ldr	r4, [r2, #24]
 8003626:	42a3      	cmp	r3, r4
 8003628:	db01      	blt.n	800362e <__sfputc_r+0x16>
 800362a:	290a      	cmp	r1, #10
 800362c:	d103      	bne.n	8003636 <__sfputc_r+0x1e>
 800362e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003632:	f000 bb6b 	b.w	8003d0c <__swbuf_r>
 8003636:	6813      	ldr	r3, [r2, #0]
 8003638:	1c58      	adds	r0, r3, #1
 800363a:	6010      	str	r0, [r2, #0]
 800363c:	7019      	strb	r1, [r3, #0]
 800363e:	4608      	mov	r0, r1
 8003640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003644:	4770      	bx	lr

08003646 <__sfputs_r>:
 8003646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003648:	4606      	mov	r6, r0
 800364a:	460f      	mov	r7, r1
 800364c:	4614      	mov	r4, r2
 800364e:	18d5      	adds	r5, r2, r3
 8003650:	42ac      	cmp	r4, r5
 8003652:	d101      	bne.n	8003658 <__sfputs_r+0x12>
 8003654:	2000      	movs	r0, #0
 8003656:	e007      	b.n	8003668 <__sfputs_r+0x22>
 8003658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800365c:	463a      	mov	r2, r7
 800365e:	4630      	mov	r0, r6
 8003660:	f7ff ffda 	bl	8003618 <__sfputc_r>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	d1f3      	bne.n	8003650 <__sfputs_r+0xa>
 8003668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800366c <_vfiprintf_r>:
 800366c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003670:	460d      	mov	r5, r1
 8003672:	b09d      	sub	sp, #116	@ 0x74
 8003674:	4614      	mov	r4, r2
 8003676:	4698      	mov	r8, r3
 8003678:	4606      	mov	r6, r0
 800367a:	b118      	cbz	r0, 8003684 <_vfiprintf_r+0x18>
 800367c:	6a03      	ldr	r3, [r0, #32]
 800367e:	b90b      	cbnz	r3, 8003684 <_vfiprintf_r+0x18>
 8003680:	f7ff fdca 	bl	8003218 <__sinit>
 8003684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003686:	07d9      	lsls	r1, r3, #31
 8003688:	d405      	bmi.n	8003696 <_vfiprintf_r+0x2a>
 800368a:	89ab      	ldrh	r3, [r5, #12]
 800368c:	059a      	lsls	r2, r3, #22
 800368e:	d402      	bmi.n	8003696 <_vfiprintf_r+0x2a>
 8003690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003692:	f7ff fec6 	bl	8003422 <__retarget_lock_acquire_recursive>
 8003696:	89ab      	ldrh	r3, [r5, #12]
 8003698:	071b      	lsls	r3, r3, #28
 800369a:	d501      	bpl.n	80036a0 <_vfiprintf_r+0x34>
 800369c:	692b      	ldr	r3, [r5, #16]
 800369e:	b99b      	cbnz	r3, 80036c8 <_vfiprintf_r+0x5c>
 80036a0:	4629      	mov	r1, r5
 80036a2:	4630      	mov	r0, r6
 80036a4:	f000 fb70 	bl	8003d88 <__swsetup_r>
 80036a8:	b170      	cbz	r0, 80036c8 <_vfiprintf_r+0x5c>
 80036aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80036ac:	07dc      	lsls	r4, r3, #31
 80036ae:	d504      	bpl.n	80036ba <_vfiprintf_r+0x4e>
 80036b0:	f04f 30ff 	mov.w	r0, #4294967295
 80036b4:	b01d      	add	sp, #116	@ 0x74
 80036b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ba:	89ab      	ldrh	r3, [r5, #12]
 80036bc:	0598      	lsls	r0, r3, #22
 80036be:	d4f7      	bmi.n	80036b0 <_vfiprintf_r+0x44>
 80036c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80036c2:	f7ff feaf 	bl	8003424 <__retarget_lock_release_recursive>
 80036c6:	e7f3      	b.n	80036b0 <_vfiprintf_r+0x44>
 80036c8:	2300      	movs	r3, #0
 80036ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80036cc:	2320      	movs	r3, #32
 80036ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80036d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80036d6:	2330      	movs	r3, #48	@ 0x30
 80036d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003888 <_vfiprintf_r+0x21c>
 80036dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80036e0:	f04f 0901 	mov.w	r9, #1
 80036e4:	4623      	mov	r3, r4
 80036e6:	469a      	mov	sl, r3
 80036e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036ec:	b10a      	cbz	r2, 80036f2 <_vfiprintf_r+0x86>
 80036ee:	2a25      	cmp	r2, #37	@ 0x25
 80036f0:	d1f9      	bne.n	80036e6 <_vfiprintf_r+0x7a>
 80036f2:	ebba 0b04 	subs.w	fp, sl, r4
 80036f6:	d00b      	beq.n	8003710 <_vfiprintf_r+0xa4>
 80036f8:	465b      	mov	r3, fp
 80036fa:	4622      	mov	r2, r4
 80036fc:	4629      	mov	r1, r5
 80036fe:	4630      	mov	r0, r6
 8003700:	f7ff ffa1 	bl	8003646 <__sfputs_r>
 8003704:	3001      	adds	r0, #1
 8003706:	f000 80a7 	beq.w	8003858 <_vfiprintf_r+0x1ec>
 800370a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800370c:	445a      	add	r2, fp
 800370e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003710:	f89a 3000 	ldrb.w	r3, [sl]
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 809f 	beq.w	8003858 <_vfiprintf_r+0x1ec>
 800371a:	2300      	movs	r3, #0
 800371c:	f04f 32ff 	mov.w	r2, #4294967295
 8003720:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003724:	f10a 0a01 	add.w	sl, sl, #1
 8003728:	9304      	str	r3, [sp, #16]
 800372a:	9307      	str	r3, [sp, #28]
 800372c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003730:	931a      	str	r3, [sp, #104]	@ 0x68
 8003732:	4654      	mov	r4, sl
 8003734:	2205      	movs	r2, #5
 8003736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800373a:	4853      	ldr	r0, [pc, #332]	@ (8003888 <_vfiprintf_r+0x21c>)
 800373c:	f7fc fd50 	bl	80001e0 <memchr>
 8003740:	9a04      	ldr	r2, [sp, #16]
 8003742:	b9d8      	cbnz	r0, 800377c <_vfiprintf_r+0x110>
 8003744:	06d1      	lsls	r1, r2, #27
 8003746:	bf44      	itt	mi
 8003748:	2320      	movmi	r3, #32
 800374a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800374e:	0713      	lsls	r3, r2, #28
 8003750:	bf44      	itt	mi
 8003752:	232b      	movmi	r3, #43	@ 0x2b
 8003754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003758:	f89a 3000 	ldrb.w	r3, [sl]
 800375c:	2b2a      	cmp	r3, #42	@ 0x2a
 800375e:	d015      	beq.n	800378c <_vfiprintf_r+0x120>
 8003760:	9a07      	ldr	r2, [sp, #28]
 8003762:	4654      	mov	r4, sl
 8003764:	2000      	movs	r0, #0
 8003766:	f04f 0c0a 	mov.w	ip, #10
 800376a:	4621      	mov	r1, r4
 800376c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003770:	3b30      	subs	r3, #48	@ 0x30
 8003772:	2b09      	cmp	r3, #9
 8003774:	d94b      	bls.n	800380e <_vfiprintf_r+0x1a2>
 8003776:	b1b0      	cbz	r0, 80037a6 <_vfiprintf_r+0x13a>
 8003778:	9207      	str	r2, [sp, #28]
 800377a:	e014      	b.n	80037a6 <_vfiprintf_r+0x13a>
 800377c:	eba0 0308 	sub.w	r3, r0, r8
 8003780:	fa09 f303 	lsl.w	r3, r9, r3
 8003784:	4313      	orrs	r3, r2
 8003786:	9304      	str	r3, [sp, #16]
 8003788:	46a2      	mov	sl, r4
 800378a:	e7d2      	b.n	8003732 <_vfiprintf_r+0xc6>
 800378c:	9b03      	ldr	r3, [sp, #12]
 800378e:	1d19      	adds	r1, r3, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	9103      	str	r1, [sp, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	bfbb      	ittet	lt
 8003798:	425b      	neglt	r3, r3
 800379a:	f042 0202 	orrlt.w	r2, r2, #2
 800379e:	9307      	strge	r3, [sp, #28]
 80037a0:	9307      	strlt	r3, [sp, #28]
 80037a2:	bfb8      	it	lt
 80037a4:	9204      	strlt	r2, [sp, #16]
 80037a6:	7823      	ldrb	r3, [r4, #0]
 80037a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80037aa:	d10a      	bne.n	80037c2 <_vfiprintf_r+0x156>
 80037ac:	7863      	ldrb	r3, [r4, #1]
 80037ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80037b0:	d132      	bne.n	8003818 <_vfiprintf_r+0x1ac>
 80037b2:	9b03      	ldr	r3, [sp, #12]
 80037b4:	1d1a      	adds	r2, r3, #4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	9203      	str	r2, [sp, #12]
 80037ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80037be:	3402      	adds	r4, #2
 80037c0:	9305      	str	r3, [sp, #20]
 80037c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003898 <_vfiprintf_r+0x22c>
 80037c6:	7821      	ldrb	r1, [r4, #0]
 80037c8:	2203      	movs	r2, #3
 80037ca:	4650      	mov	r0, sl
 80037cc:	f7fc fd08 	bl	80001e0 <memchr>
 80037d0:	b138      	cbz	r0, 80037e2 <_vfiprintf_r+0x176>
 80037d2:	9b04      	ldr	r3, [sp, #16]
 80037d4:	eba0 000a 	sub.w	r0, r0, sl
 80037d8:	2240      	movs	r2, #64	@ 0x40
 80037da:	4082      	lsls	r2, r0
 80037dc:	4313      	orrs	r3, r2
 80037de:	3401      	adds	r4, #1
 80037e0:	9304      	str	r3, [sp, #16]
 80037e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037e6:	4829      	ldr	r0, [pc, #164]	@ (800388c <_vfiprintf_r+0x220>)
 80037e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037ec:	2206      	movs	r2, #6
 80037ee:	f7fc fcf7 	bl	80001e0 <memchr>
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d03f      	beq.n	8003876 <_vfiprintf_r+0x20a>
 80037f6:	4b26      	ldr	r3, [pc, #152]	@ (8003890 <_vfiprintf_r+0x224>)
 80037f8:	bb1b      	cbnz	r3, 8003842 <_vfiprintf_r+0x1d6>
 80037fa:	9b03      	ldr	r3, [sp, #12]
 80037fc:	3307      	adds	r3, #7
 80037fe:	f023 0307 	bic.w	r3, r3, #7
 8003802:	3308      	adds	r3, #8
 8003804:	9303      	str	r3, [sp, #12]
 8003806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003808:	443b      	add	r3, r7
 800380a:	9309      	str	r3, [sp, #36]	@ 0x24
 800380c:	e76a      	b.n	80036e4 <_vfiprintf_r+0x78>
 800380e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003812:	460c      	mov	r4, r1
 8003814:	2001      	movs	r0, #1
 8003816:	e7a8      	b.n	800376a <_vfiprintf_r+0xfe>
 8003818:	2300      	movs	r3, #0
 800381a:	3401      	adds	r4, #1
 800381c:	9305      	str	r3, [sp, #20]
 800381e:	4619      	mov	r1, r3
 8003820:	f04f 0c0a 	mov.w	ip, #10
 8003824:	4620      	mov	r0, r4
 8003826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800382a:	3a30      	subs	r2, #48	@ 0x30
 800382c:	2a09      	cmp	r2, #9
 800382e:	d903      	bls.n	8003838 <_vfiprintf_r+0x1cc>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0c6      	beq.n	80037c2 <_vfiprintf_r+0x156>
 8003834:	9105      	str	r1, [sp, #20]
 8003836:	e7c4      	b.n	80037c2 <_vfiprintf_r+0x156>
 8003838:	fb0c 2101 	mla	r1, ip, r1, r2
 800383c:	4604      	mov	r4, r0
 800383e:	2301      	movs	r3, #1
 8003840:	e7f0      	b.n	8003824 <_vfiprintf_r+0x1b8>
 8003842:	ab03      	add	r3, sp, #12
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	462a      	mov	r2, r5
 8003848:	4b12      	ldr	r3, [pc, #72]	@ (8003894 <_vfiprintf_r+0x228>)
 800384a:	a904      	add	r1, sp, #16
 800384c:	4630      	mov	r0, r6
 800384e:	f3af 8000 	nop.w
 8003852:	4607      	mov	r7, r0
 8003854:	1c78      	adds	r0, r7, #1
 8003856:	d1d6      	bne.n	8003806 <_vfiprintf_r+0x19a>
 8003858:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800385a:	07d9      	lsls	r1, r3, #31
 800385c:	d405      	bmi.n	800386a <_vfiprintf_r+0x1fe>
 800385e:	89ab      	ldrh	r3, [r5, #12]
 8003860:	059a      	lsls	r2, r3, #22
 8003862:	d402      	bmi.n	800386a <_vfiprintf_r+0x1fe>
 8003864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003866:	f7ff fddd 	bl	8003424 <__retarget_lock_release_recursive>
 800386a:	89ab      	ldrh	r3, [r5, #12]
 800386c:	065b      	lsls	r3, r3, #25
 800386e:	f53f af1f 	bmi.w	80036b0 <_vfiprintf_r+0x44>
 8003872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003874:	e71e      	b.n	80036b4 <_vfiprintf_r+0x48>
 8003876:	ab03      	add	r3, sp, #12
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	462a      	mov	r2, r5
 800387c:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <_vfiprintf_r+0x228>)
 800387e:	a904      	add	r1, sp, #16
 8003880:	4630      	mov	r0, r6
 8003882:	f000 f879 	bl	8003978 <_printf_i>
 8003886:	e7e4      	b.n	8003852 <_vfiprintf_r+0x1e6>
 8003888:	08003f94 	.word	0x08003f94
 800388c:	08003f9e 	.word	0x08003f9e
 8003890:	00000000 	.word	0x00000000
 8003894:	08003647 	.word	0x08003647
 8003898:	08003f9a 	.word	0x08003f9a

0800389c <_printf_common>:
 800389c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038a0:	4616      	mov	r6, r2
 80038a2:	4698      	mov	r8, r3
 80038a4:	688a      	ldr	r2, [r1, #8]
 80038a6:	690b      	ldr	r3, [r1, #16]
 80038a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038ac:	4293      	cmp	r3, r2
 80038ae:	bfb8      	it	lt
 80038b0:	4613      	movlt	r3, r2
 80038b2:	6033      	str	r3, [r6, #0]
 80038b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038b8:	4607      	mov	r7, r0
 80038ba:	460c      	mov	r4, r1
 80038bc:	b10a      	cbz	r2, 80038c2 <_printf_common+0x26>
 80038be:	3301      	adds	r3, #1
 80038c0:	6033      	str	r3, [r6, #0]
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	0699      	lsls	r1, r3, #26
 80038c6:	bf42      	ittt	mi
 80038c8:	6833      	ldrmi	r3, [r6, #0]
 80038ca:	3302      	addmi	r3, #2
 80038cc:	6033      	strmi	r3, [r6, #0]
 80038ce:	6825      	ldr	r5, [r4, #0]
 80038d0:	f015 0506 	ands.w	r5, r5, #6
 80038d4:	d106      	bne.n	80038e4 <_printf_common+0x48>
 80038d6:	f104 0a19 	add.w	sl, r4, #25
 80038da:	68e3      	ldr	r3, [r4, #12]
 80038dc:	6832      	ldr	r2, [r6, #0]
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	42ab      	cmp	r3, r5
 80038e2:	dc26      	bgt.n	8003932 <_printf_common+0x96>
 80038e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80038e8:	6822      	ldr	r2, [r4, #0]
 80038ea:	3b00      	subs	r3, #0
 80038ec:	bf18      	it	ne
 80038ee:	2301      	movne	r3, #1
 80038f0:	0692      	lsls	r2, r2, #26
 80038f2:	d42b      	bmi.n	800394c <_printf_common+0xb0>
 80038f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80038f8:	4641      	mov	r1, r8
 80038fa:	4638      	mov	r0, r7
 80038fc:	47c8      	blx	r9
 80038fe:	3001      	adds	r0, #1
 8003900:	d01e      	beq.n	8003940 <_printf_common+0xa4>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	6922      	ldr	r2, [r4, #16]
 8003906:	f003 0306 	and.w	r3, r3, #6
 800390a:	2b04      	cmp	r3, #4
 800390c:	bf02      	ittt	eq
 800390e:	68e5      	ldreq	r5, [r4, #12]
 8003910:	6833      	ldreq	r3, [r6, #0]
 8003912:	1aed      	subeq	r5, r5, r3
 8003914:	68a3      	ldr	r3, [r4, #8]
 8003916:	bf0c      	ite	eq
 8003918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800391c:	2500      	movne	r5, #0
 800391e:	4293      	cmp	r3, r2
 8003920:	bfc4      	itt	gt
 8003922:	1a9b      	subgt	r3, r3, r2
 8003924:	18ed      	addgt	r5, r5, r3
 8003926:	2600      	movs	r6, #0
 8003928:	341a      	adds	r4, #26
 800392a:	42b5      	cmp	r5, r6
 800392c:	d11a      	bne.n	8003964 <_printf_common+0xc8>
 800392e:	2000      	movs	r0, #0
 8003930:	e008      	b.n	8003944 <_printf_common+0xa8>
 8003932:	2301      	movs	r3, #1
 8003934:	4652      	mov	r2, sl
 8003936:	4641      	mov	r1, r8
 8003938:	4638      	mov	r0, r7
 800393a:	47c8      	blx	r9
 800393c:	3001      	adds	r0, #1
 800393e:	d103      	bne.n	8003948 <_printf_common+0xac>
 8003940:	f04f 30ff 	mov.w	r0, #4294967295
 8003944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003948:	3501      	adds	r5, #1
 800394a:	e7c6      	b.n	80038da <_printf_common+0x3e>
 800394c:	18e1      	adds	r1, r4, r3
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	2030      	movs	r0, #48	@ 0x30
 8003952:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003956:	4422      	add	r2, r4
 8003958:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800395c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003960:	3302      	adds	r3, #2
 8003962:	e7c7      	b.n	80038f4 <_printf_common+0x58>
 8003964:	2301      	movs	r3, #1
 8003966:	4622      	mov	r2, r4
 8003968:	4641      	mov	r1, r8
 800396a:	4638      	mov	r0, r7
 800396c:	47c8      	blx	r9
 800396e:	3001      	adds	r0, #1
 8003970:	d0e6      	beq.n	8003940 <_printf_common+0xa4>
 8003972:	3601      	adds	r6, #1
 8003974:	e7d9      	b.n	800392a <_printf_common+0x8e>
	...

08003978 <_printf_i>:
 8003978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800397c:	7e0f      	ldrb	r7, [r1, #24]
 800397e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003980:	2f78      	cmp	r7, #120	@ 0x78
 8003982:	4691      	mov	r9, r2
 8003984:	4680      	mov	r8, r0
 8003986:	460c      	mov	r4, r1
 8003988:	469a      	mov	sl, r3
 800398a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800398e:	d807      	bhi.n	80039a0 <_printf_i+0x28>
 8003990:	2f62      	cmp	r7, #98	@ 0x62
 8003992:	d80a      	bhi.n	80039aa <_printf_i+0x32>
 8003994:	2f00      	cmp	r7, #0
 8003996:	f000 80d1 	beq.w	8003b3c <_printf_i+0x1c4>
 800399a:	2f58      	cmp	r7, #88	@ 0x58
 800399c:	f000 80b8 	beq.w	8003b10 <_printf_i+0x198>
 80039a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039a8:	e03a      	b.n	8003a20 <_printf_i+0xa8>
 80039aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039ae:	2b15      	cmp	r3, #21
 80039b0:	d8f6      	bhi.n	80039a0 <_printf_i+0x28>
 80039b2:	a101      	add	r1, pc, #4	@ (adr r1, 80039b8 <_printf_i+0x40>)
 80039b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039b8:	08003a11 	.word	0x08003a11
 80039bc:	08003a25 	.word	0x08003a25
 80039c0:	080039a1 	.word	0x080039a1
 80039c4:	080039a1 	.word	0x080039a1
 80039c8:	080039a1 	.word	0x080039a1
 80039cc:	080039a1 	.word	0x080039a1
 80039d0:	08003a25 	.word	0x08003a25
 80039d4:	080039a1 	.word	0x080039a1
 80039d8:	080039a1 	.word	0x080039a1
 80039dc:	080039a1 	.word	0x080039a1
 80039e0:	080039a1 	.word	0x080039a1
 80039e4:	08003b23 	.word	0x08003b23
 80039e8:	08003a4f 	.word	0x08003a4f
 80039ec:	08003add 	.word	0x08003add
 80039f0:	080039a1 	.word	0x080039a1
 80039f4:	080039a1 	.word	0x080039a1
 80039f8:	08003b45 	.word	0x08003b45
 80039fc:	080039a1 	.word	0x080039a1
 8003a00:	08003a4f 	.word	0x08003a4f
 8003a04:	080039a1 	.word	0x080039a1
 8003a08:	080039a1 	.word	0x080039a1
 8003a0c:	08003ae5 	.word	0x08003ae5
 8003a10:	6833      	ldr	r3, [r6, #0]
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6032      	str	r2, [r6, #0]
 8003a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a20:	2301      	movs	r3, #1
 8003a22:	e09c      	b.n	8003b5e <_printf_i+0x1e6>
 8003a24:	6833      	ldr	r3, [r6, #0]
 8003a26:	6820      	ldr	r0, [r4, #0]
 8003a28:	1d19      	adds	r1, r3, #4
 8003a2a:	6031      	str	r1, [r6, #0]
 8003a2c:	0606      	lsls	r6, r0, #24
 8003a2e:	d501      	bpl.n	8003a34 <_printf_i+0xbc>
 8003a30:	681d      	ldr	r5, [r3, #0]
 8003a32:	e003      	b.n	8003a3c <_printf_i+0xc4>
 8003a34:	0645      	lsls	r5, r0, #25
 8003a36:	d5fb      	bpl.n	8003a30 <_printf_i+0xb8>
 8003a38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a3c:	2d00      	cmp	r5, #0
 8003a3e:	da03      	bge.n	8003a48 <_printf_i+0xd0>
 8003a40:	232d      	movs	r3, #45	@ 0x2d
 8003a42:	426d      	negs	r5, r5
 8003a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a48:	4858      	ldr	r0, [pc, #352]	@ (8003bac <_printf_i+0x234>)
 8003a4a:	230a      	movs	r3, #10
 8003a4c:	e011      	b.n	8003a72 <_printf_i+0xfa>
 8003a4e:	6821      	ldr	r1, [r4, #0]
 8003a50:	6833      	ldr	r3, [r6, #0]
 8003a52:	0608      	lsls	r0, r1, #24
 8003a54:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a58:	d402      	bmi.n	8003a60 <_printf_i+0xe8>
 8003a5a:	0649      	lsls	r1, r1, #25
 8003a5c:	bf48      	it	mi
 8003a5e:	b2ad      	uxthmi	r5, r5
 8003a60:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a62:	4852      	ldr	r0, [pc, #328]	@ (8003bac <_printf_i+0x234>)
 8003a64:	6033      	str	r3, [r6, #0]
 8003a66:	bf14      	ite	ne
 8003a68:	230a      	movne	r3, #10
 8003a6a:	2308      	moveq	r3, #8
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a72:	6866      	ldr	r6, [r4, #4]
 8003a74:	60a6      	str	r6, [r4, #8]
 8003a76:	2e00      	cmp	r6, #0
 8003a78:	db05      	blt.n	8003a86 <_printf_i+0x10e>
 8003a7a:	6821      	ldr	r1, [r4, #0]
 8003a7c:	432e      	orrs	r6, r5
 8003a7e:	f021 0104 	bic.w	r1, r1, #4
 8003a82:	6021      	str	r1, [r4, #0]
 8003a84:	d04b      	beq.n	8003b1e <_printf_i+0x1a6>
 8003a86:	4616      	mov	r6, r2
 8003a88:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a8c:	fb03 5711 	mls	r7, r3, r1, r5
 8003a90:	5dc7      	ldrb	r7, [r0, r7]
 8003a92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a96:	462f      	mov	r7, r5
 8003a98:	42bb      	cmp	r3, r7
 8003a9a:	460d      	mov	r5, r1
 8003a9c:	d9f4      	bls.n	8003a88 <_printf_i+0x110>
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d10b      	bne.n	8003aba <_printf_i+0x142>
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	07df      	lsls	r7, r3, #31
 8003aa6:	d508      	bpl.n	8003aba <_printf_i+0x142>
 8003aa8:	6923      	ldr	r3, [r4, #16]
 8003aaa:	6861      	ldr	r1, [r4, #4]
 8003aac:	4299      	cmp	r1, r3
 8003aae:	bfde      	ittt	le
 8003ab0:	2330      	movle	r3, #48	@ 0x30
 8003ab2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ab6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003aba:	1b92      	subs	r2, r2, r6
 8003abc:	6122      	str	r2, [r4, #16]
 8003abe:	f8cd a000 	str.w	sl, [sp]
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	aa03      	add	r2, sp, #12
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4640      	mov	r0, r8
 8003aca:	f7ff fee7 	bl	800389c <_printf_common>
 8003ace:	3001      	adds	r0, #1
 8003ad0:	d14a      	bne.n	8003b68 <_printf_i+0x1f0>
 8003ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad6:	b004      	add	sp, #16
 8003ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	f043 0320 	orr.w	r3, r3, #32
 8003ae2:	6023      	str	r3, [r4, #0]
 8003ae4:	4832      	ldr	r0, [pc, #200]	@ (8003bb0 <_printf_i+0x238>)
 8003ae6:	2778      	movs	r7, #120	@ 0x78
 8003ae8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	6831      	ldr	r1, [r6, #0]
 8003af0:	061f      	lsls	r7, r3, #24
 8003af2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003af6:	d402      	bmi.n	8003afe <_printf_i+0x186>
 8003af8:	065f      	lsls	r7, r3, #25
 8003afa:	bf48      	it	mi
 8003afc:	b2ad      	uxthmi	r5, r5
 8003afe:	6031      	str	r1, [r6, #0]
 8003b00:	07d9      	lsls	r1, r3, #31
 8003b02:	bf44      	itt	mi
 8003b04:	f043 0320 	orrmi.w	r3, r3, #32
 8003b08:	6023      	strmi	r3, [r4, #0]
 8003b0a:	b11d      	cbz	r5, 8003b14 <_printf_i+0x19c>
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	e7ad      	b.n	8003a6c <_printf_i+0xf4>
 8003b10:	4826      	ldr	r0, [pc, #152]	@ (8003bac <_printf_i+0x234>)
 8003b12:	e7e9      	b.n	8003ae8 <_printf_i+0x170>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	f023 0320 	bic.w	r3, r3, #32
 8003b1a:	6023      	str	r3, [r4, #0]
 8003b1c:	e7f6      	b.n	8003b0c <_printf_i+0x194>
 8003b1e:	4616      	mov	r6, r2
 8003b20:	e7bd      	b.n	8003a9e <_printf_i+0x126>
 8003b22:	6833      	ldr	r3, [r6, #0]
 8003b24:	6825      	ldr	r5, [r4, #0]
 8003b26:	6961      	ldr	r1, [r4, #20]
 8003b28:	1d18      	adds	r0, r3, #4
 8003b2a:	6030      	str	r0, [r6, #0]
 8003b2c:	062e      	lsls	r6, r5, #24
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	d501      	bpl.n	8003b36 <_printf_i+0x1be>
 8003b32:	6019      	str	r1, [r3, #0]
 8003b34:	e002      	b.n	8003b3c <_printf_i+0x1c4>
 8003b36:	0668      	lsls	r0, r5, #25
 8003b38:	d5fb      	bpl.n	8003b32 <_printf_i+0x1ba>
 8003b3a:	8019      	strh	r1, [r3, #0]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	6123      	str	r3, [r4, #16]
 8003b40:	4616      	mov	r6, r2
 8003b42:	e7bc      	b.n	8003abe <_printf_i+0x146>
 8003b44:	6833      	ldr	r3, [r6, #0]
 8003b46:	1d1a      	adds	r2, r3, #4
 8003b48:	6032      	str	r2, [r6, #0]
 8003b4a:	681e      	ldr	r6, [r3, #0]
 8003b4c:	6862      	ldr	r2, [r4, #4]
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4630      	mov	r0, r6
 8003b52:	f7fc fb45 	bl	80001e0 <memchr>
 8003b56:	b108      	cbz	r0, 8003b5c <_printf_i+0x1e4>
 8003b58:	1b80      	subs	r0, r0, r6
 8003b5a:	6060      	str	r0, [r4, #4]
 8003b5c:	6863      	ldr	r3, [r4, #4]
 8003b5e:	6123      	str	r3, [r4, #16]
 8003b60:	2300      	movs	r3, #0
 8003b62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b66:	e7aa      	b.n	8003abe <_printf_i+0x146>
 8003b68:	6923      	ldr	r3, [r4, #16]
 8003b6a:	4632      	mov	r2, r6
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	4640      	mov	r0, r8
 8003b70:	47d0      	blx	sl
 8003b72:	3001      	adds	r0, #1
 8003b74:	d0ad      	beq.n	8003ad2 <_printf_i+0x15a>
 8003b76:	6823      	ldr	r3, [r4, #0]
 8003b78:	079b      	lsls	r3, r3, #30
 8003b7a:	d413      	bmi.n	8003ba4 <_printf_i+0x22c>
 8003b7c:	68e0      	ldr	r0, [r4, #12]
 8003b7e:	9b03      	ldr	r3, [sp, #12]
 8003b80:	4298      	cmp	r0, r3
 8003b82:	bfb8      	it	lt
 8003b84:	4618      	movlt	r0, r3
 8003b86:	e7a6      	b.n	8003ad6 <_printf_i+0x15e>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	4632      	mov	r2, r6
 8003b8c:	4649      	mov	r1, r9
 8003b8e:	4640      	mov	r0, r8
 8003b90:	47d0      	blx	sl
 8003b92:	3001      	adds	r0, #1
 8003b94:	d09d      	beq.n	8003ad2 <_printf_i+0x15a>
 8003b96:	3501      	adds	r5, #1
 8003b98:	68e3      	ldr	r3, [r4, #12]
 8003b9a:	9903      	ldr	r1, [sp, #12]
 8003b9c:	1a5b      	subs	r3, r3, r1
 8003b9e:	42ab      	cmp	r3, r5
 8003ba0:	dcf2      	bgt.n	8003b88 <_printf_i+0x210>
 8003ba2:	e7eb      	b.n	8003b7c <_printf_i+0x204>
 8003ba4:	2500      	movs	r5, #0
 8003ba6:	f104 0619 	add.w	r6, r4, #25
 8003baa:	e7f5      	b.n	8003b98 <_printf_i+0x220>
 8003bac:	08003fa5 	.word	0x08003fa5
 8003bb0:	08003fb6 	.word	0x08003fb6

08003bb4 <__sflush_r>:
 8003bb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bbc:	0716      	lsls	r6, r2, #28
 8003bbe:	4605      	mov	r5, r0
 8003bc0:	460c      	mov	r4, r1
 8003bc2:	d454      	bmi.n	8003c6e <__sflush_r+0xba>
 8003bc4:	684b      	ldr	r3, [r1, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	dc02      	bgt.n	8003bd0 <__sflush_r+0x1c>
 8003bca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	dd48      	ble.n	8003c62 <__sflush_r+0xae>
 8003bd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003bd2:	2e00      	cmp	r6, #0
 8003bd4:	d045      	beq.n	8003c62 <__sflush_r+0xae>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003bdc:	682f      	ldr	r7, [r5, #0]
 8003bde:	6a21      	ldr	r1, [r4, #32]
 8003be0:	602b      	str	r3, [r5, #0]
 8003be2:	d030      	beq.n	8003c46 <__sflush_r+0x92>
 8003be4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003be6:	89a3      	ldrh	r3, [r4, #12]
 8003be8:	0759      	lsls	r1, r3, #29
 8003bea:	d505      	bpl.n	8003bf8 <__sflush_r+0x44>
 8003bec:	6863      	ldr	r3, [r4, #4]
 8003bee:	1ad2      	subs	r2, r2, r3
 8003bf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003bf2:	b10b      	cbz	r3, 8003bf8 <__sflush_r+0x44>
 8003bf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bf6:	1ad2      	subs	r2, r2, r3
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003bfc:	6a21      	ldr	r1, [r4, #32]
 8003bfe:	4628      	mov	r0, r5
 8003c00:	47b0      	blx	r6
 8003c02:	1c43      	adds	r3, r0, #1
 8003c04:	89a3      	ldrh	r3, [r4, #12]
 8003c06:	d106      	bne.n	8003c16 <__sflush_r+0x62>
 8003c08:	6829      	ldr	r1, [r5, #0]
 8003c0a:	291d      	cmp	r1, #29
 8003c0c:	d82b      	bhi.n	8003c66 <__sflush_r+0xb2>
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cb8 <__sflush_r+0x104>)
 8003c10:	40ca      	lsrs	r2, r1
 8003c12:	07d6      	lsls	r6, r2, #31
 8003c14:	d527      	bpl.n	8003c66 <__sflush_r+0xb2>
 8003c16:	2200      	movs	r2, #0
 8003c18:	6062      	str	r2, [r4, #4]
 8003c1a:	04d9      	lsls	r1, r3, #19
 8003c1c:	6922      	ldr	r2, [r4, #16]
 8003c1e:	6022      	str	r2, [r4, #0]
 8003c20:	d504      	bpl.n	8003c2c <__sflush_r+0x78>
 8003c22:	1c42      	adds	r2, r0, #1
 8003c24:	d101      	bne.n	8003c2a <__sflush_r+0x76>
 8003c26:	682b      	ldr	r3, [r5, #0]
 8003c28:	b903      	cbnz	r3, 8003c2c <__sflush_r+0x78>
 8003c2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003c2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c2e:	602f      	str	r7, [r5, #0]
 8003c30:	b1b9      	cbz	r1, 8003c62 <__sflush_r+0xae>
 8003c32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c36:	4299      	cmp	r1, r3
 8003c38:	d002      	beq.n	8003c40 <__sflush_r+0x8c>
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	f7ff fbf4 	bl	8003428 <_free_r>
 8003c40:	2300      	movs	r3, #0
 8003c42:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c44:	e00d      	b.n	8003c62 <__sflush_r+0xae>
 8003c46:	2301      	movs	r3, #1
 8003c48:	4628      	mov	r0, r5
 8003c4a:	47b0      	blx	r6
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	1c50      	adds	r0, r2, #1
 8003c50:	d1c9      	bne.n	8003be6 <__sflush_r+0x32>
 8003c52:	682b      	ldr	r3, [r5, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0c6      	beq.n	8003be6 <__sflush_r+0x32>
 8003c58:	2b1d      	cmp	r3, #29
 8003c5a:	d001      	beq.n	8003c60 <__sflush_r+0xac>
 8003c5c:	2b16      	cmp	r3, #22
 8003c5e:	d11e      	bne.n	8003c9e <__sflush_r+0xea>
 8003c60:	602f      	str	r7, [r5, #0]
 8003c62:	2000      	movs	r0, #0
 8003c64:	e022      	b.n	8003cac <__sflush_r+0xf8>
 8003c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c6a:	b21b      	sxth	r3, r3
 8003c6c:	e01b      	b.n	8003ca6 <__sflush_r+0xf2>
 8003c6e:	690f      	ldr	r7, [r1, #16]
 8003c70:	2f00      	cmp	r7, #0
 8003c72:	d0f6      	beq.n	8003c62 <__sflush_r+0xae>
 8003c74:	0793      	lsls	r3, r2, #30
 8003c76:	680e      	ldr	r6, [r1, #0]
 8003c78:	bf08      	it	eq
 8003c7a:	694b      	ldreq	r3, [r1, #20]
 8003c7c:	600f      	str	r7, [r1, #0]
 8003c7e:	bf18      	it	ne
 8003c80:	2300      	movne	r3, #0
 8003c82:	eba6 0807 	sub.w	r8, r6, r7
 8003c86:	608b      	str	r3, [r1, #8]
 8003c88:	f1b8 0f00 	cmp.w	r8, #0
 8003c8c:	dde9      	ble.n	8003c62 <__sflush_r+0xae>
 8003c8e:	6a21      	ldr	r1, [r4, #32]
 8003c90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003c92:	4643      	mov	r3, r8
 8003c94:	463a      	mov	r2, r7
 8003c96:	4628      	mov	r0, r5
 8003c98:	47b0      	blx	r6
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	dc08      	bgt.n	8003cb0 <__sflush_r+0xfc>
 8003c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ca6:	81a3      	strh	r3, [r4, #12]
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cb0:	4407      	add	r7, r0
 8003cb2:	eba8 0800 	sub.w	r8, r8, r0
 8003cb6:	e7e7      	b.n	8003c88 <__sflush_r+0xd4>
 8003cb8:	20400001 	.word	0x20400001

08003cbc <_fflush_r>:
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	690b      	ldr	r3, [r1, #16]
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	460c      	mov	r4, r1
 8003cc4:	b913      	cbnz	r3, 8003ccc <_fflush_r+0x10>
 8003cc6:	2500      	movs	r5, #0
 8003cc8:	4628      	mov	r0, r5
 8003cca:	bd38      	pop	{r3, r4, r5, pc}
 8003ccc:	b118      	cbz	r0, 8003cd6 <_fflush_r+0x1a>
 8003cce:	6a03      	ldr	r3, [r0, #32]
 8003cd0:	b90b      	cbnz	r3, 8003cd6 <_fflush_r+0x1a>
 8003cd2:	f7ff faa1 	bl	8003218 <__sinit>
 8003cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f3      	beq.n	8003cc6 <_fflush_r+0xa>
 8003cde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ce0:	07d0      	lsls	r0, r2, #31
 8003ce2:	d404      	bmi.n	8003cee <_fflush_r+0x32>
 8003ce4:	0599      	lsls	r1, r3, #22
 8003ce6:	d402      	bmi.n	8003cee <_fflush_r+0x32>
 8003ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003cea:	f7ff fb9a 	bl	8003422 <__retarget_lock_acquire_recursive>
 8003cee:	4628      	mov	r0, r5
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	f7ff ff5f 	bl	8003bb4 <__sflush_r>
 8003cf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cf8:	07da      	lsls	r2, r3, #31
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	d4e4      	bmi.n	8003cc8 <_fflush_r+0xc>
 8003cfe:	89a3      	ldrh	r3, [r4, #12]
 8003d00:	059b      	lsls	r3, r3, #22
 8003d02:	d4e1      	bmi.n	8003cc8 <_fflush_r+0xc>
 8003d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d06:	f7ff fb8d 	bl	8003424 <__retarget_lock_release_recursive>
 8003d0a:	e7dd      	b.n	8003cc8 <_fflush_r+0xc>

08003d0c <__swbuf_r>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	460e      	mov	r6, r1
 8003d10:	4614      	mov	r4, r2
 8003d12:	4605      	mov	r5, r0
 8003d14:	b118      	cbz	r0, 8003d1e <__swbuf_r+0x12>
 8003d16:	6a03      	ldr	r3, [r0, #32]
 8003d18:	b90b      	cbnz	r3, 8003d1e <__swbuf_r+0x12>
 8003d1a:	f7ff fa7d 	bl	8003218 <__sinit>
 8003d1e:	69a3      	ldr	r3, [r4, #24]
 8003d20:	60a3      	str	r3, [r4, #8]
 8003d22:	89a3      	ldrh	r3, [r4, #12]
 8003d24:	071a      	lsls	r2, r3, #28
 8003d26:	d501      	bpl.n	8003d2c <__swbuf_r+0x20>
 8003d28:	6923      	ldr	r3, [r4, #16]
 8003d2a:	b943      	cbnz	r3, 8003d3e <__swbuf_r+0x32>
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	4628      	mov	r0, r5
 8003d30:	f000 f82a 	bl	8003d88 <__swsetup_r>
 8003d34:	b118      	cbz	r0, 8003d3e <__swbuf_r+0x32>
 8003d36:	f04f 37ff 	mov.w	r7, #4294967295
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	6922      	ldr	r2, [r4, #16]
 8003d42:	1a98      	subs	r0, r3, r2
 8003d44:	6963      	ldr	r3, [r4, #20]
 8003d46:	b2f6      	uxtb	r6, r6
 8003d48:	4283      	cmp	r3, r0
 8003d4a:	4637      	mov	r7, r6
 8003d4c:	dc05      	bgt.n	8003d5a <__swbuf_r+0x4e>
 8003d4e:	4621      	mov	r1, r4
 8003d50:	4628      	mov	r0, r5
 8003d52:	f7ff ffb3 	bl	8003cbc <_fflush_r>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d1ed      	bne.n	8003d36 <__swbuf_r+0x2a>
 8003d5a:	68a3      	ldr	r3, [r4, #8]
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	60a3      	str	r3, [r4, #8]
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	6022      	str	r2, [r4, #0]
 8003d66:	701e      	strb	r6, [r3, #0]
 8003d68:	6962      	ldr	r2, [r4, #20]
 8003d6a:	1c43      	adds	r3, r0, #1
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d004      	beq.n	8003d7a <__swbuf_r+0x6e>
 8003d70:	89a3      	ldrh	r3, [r4, #12]
 8003d72:	07db      	lsls	r3, r3, #31
 8003d74:	d5e1      	bpl.n	8003d3a <__swbuf_r+0x2e>
 8003d76:	2e0a      	cmp	r6, #10
 8003d78:	d1df      	bne.n	8003d3a <__swbuf_r+0x2e>
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f7ff ff9d 	bl	8003cbc <_fflush_r>
 8003d82:	2800      	cmp	r0, #0
 8003d84:	d0d9      	beq.n	8003d3a <__swbuf_r+0x2e>
 8003d86:	e7d6      	b.n	8003d36 <__swbuf_r+0x2a>

08003d88 <__swsetup_r>:
 8003d88:	b538      	push	{r3, r4, r5, lr}
 8003d8a:	4b29      	ldr	r3, [pc, #164]	@ (8003e30 <__swsetup_r+0xa8>)
 8003d8c:	4605      	mov	r5, r0
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	460c      	mov	r4, r1
 8003d92:	b118      	cbz	r0, 8003d9c <__swsetup_r+0x14>
 8003d94:	6a03      	ldr	r3, [r0, #32]
 8003d96:	b90b      	cbnz	r3, 8003d9c <__swsetup_r+0x14>
 8003d98:	f7ff fa3e 	bl	8003218 <__sinit>
 8003d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003da0:	0719      	lsls	r1, r3, #28
 8003da2:	d422      	bmi.n	8003dea <__swsetup_r+0x62>
 8003da4:	06da      	lsls	r2, r3, #27
 8003da6:	d407      	bmi.n	8003db8 <__swsetup_r+0x30>
 8003da8:	2209      	movs	r2, #9
 8003daa:	602a      	str	r2, [r5, #0]
 8003dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003db0:	81a3      	strh	r3, [r4, #12]
 8003db2:	f04f 30ff 	mov.w	r0, #4294967295
 8003db6:	e033      	b.n	8003e20 <__swsetup_r+0x98>
 8003db8:	0758      	lsls	r0, r3, #29
 8003dba:	d512      	bpl.n	8003de2 <__swsetup_r+0x5a>
 8003dbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003dbe:	b141      	cbz	r1, 8003dd2 <__swsetup_r+0x4a>
 8003dc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003dc4:	4299      	cmp	r1, r3
 8003dc6:	d002      	beq.n	8003dce <__swsetup_r+0x46>
 8003dc8:	4628      	mov	r0, r5
 8003dca:	f7ff fb2d 	bl	8003428 <_free_r>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003dd2:	89a3      	ldrh	r3, [r4, #12]
 8003dd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003dd8:	81a3      	strh	r3, [r4, #12]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	6063      	str	r3, [r4, #4]
 8003dde:	6923      	ldr	r3, [r4, #16]
 8003de0:	6023      	str	r3, [r4, #0]
 8003de2:	89a3      	ldrh	r3, [r4, #12]
 8003de4:	f043 0308 	orr.w	r3, r3, #8
 8003de8:	81a3      	strh	r3, [r4, #12]
 8003dea:	6923      	ldr	r3, [r4, #16]
 8003dec:	b94b      	cbnz	r3, 8003e02 <__swsetup_r+0x7a>
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003df8:	d003      	beq.n	8003e02 <__swsetup_r+0x7a>
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	f000 f84f 	bl	8003ea0 <__smakebuf_r>
 8003e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e06:	f013 0201 	ands.w	r2, r3, #1
 8003e0a:	d00a      	beq.n	8003e22 <__swsetup_r+0x9a>
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	60a2      	str	r2, [r4, #8]
 8003e10:	6962      	ldr	r2, [r4, #20]
 8003e12:	4252      	negs	r2, r2
 8003e14:	61a2      	str	r2, [r4, #24]
 8003e16:	6922      	ldr	r2, [r4, #16]
 8003e18:	b942      	cbnz	r2, 8003e2c <__swsetup_r+0xa4>
 8003e1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003e1e:	d1c5      	bne.n	8003dac <__swsetup_r+0x24>
 8003e20:	bd38      	pop	{r3, r4, r5, pc}
 8003e22:	0799      	lsls	r1, r3, #30
 8003e24:	bf58      	it	pl
 8003e26:	6962      	ldrpl	r2, [r4, #20]
 8003e28:	60a2      	str	r2, [r4, #8]
 8003e2a:	e7f4      	b.n	8003e16 <__swsetup_r+0x8e>
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	e7f7      	b.n	8003e20 <__swsetup_r+0x98>
 8003e30:	20000034 	.word	0x20000034

08003e34 <_sbrk_r>:
 8003e34:	b538      	push	{r3, r4, r5, lr}
 8003e36:	4d06      	ldr	r5, [pc, #24]	@ (8003e50 <_sbrk_r+0x1c>)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	602b      	str	r3, [r5, #0]
 8003e40:	f7fd f9b2 	bl	80011a8 <_sbrk>
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	d102      	bne.n	8003e4e <_sbrk_r+0x1a>
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	b103      	cbz	r3, 8003e4e <_sbrk_r+0x1a>
 8003e4c:	6023      	str	r3, [r4, #0]
 8003e4e:	bd38      	pop	{r3, r4, r5, pc}
 8003e50:	20000320 	.word	0x20000320

08003e54 <__swhatbuf_r>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	460c      	mov	r4, r1
 8003e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e5c:	2900      	cmp	r1, #0
 8003e5e:	b096      	sub	sp, #88	@ 0x58
 8003e60:	4615      	mov	r5, r2
 8003e62:	461e      	mov	r6, r3
 8003e64:	da0d      	bge.n	8003e82 <__swhatbuf_r+0x2e>
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e6c:	f04f 0100 	mov.w	r1, #0
 8003e70:	bf14      	ite	ne
 8003e72:	2340      	movne	r3, #64	@ 0x40
 8003e74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e78:	2000      	movs	r0, #0
 8003e7a:	6031      	str	r1, [r6, #0]
 8003e7c:	602b      	str	r3, [r5, #0]
 8003e7e:	b016      	add	sp, #88	@ 0x58
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
 8003e82:	466a      	mov	r2, sp
 8003e84:	f000 f848 	bl	8003f18 <_fstat_r>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	dbec      	blt.n	8003e66 <__swhatbuf_r+0x12>
 8003e8c:	9901      	ldr	r1, [sp, #4]
 8003e8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e96:	4259      	negs	r1, r3
 8003e98:	4159      	adcs	r1, r3
 8003e9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e9e:	e7eb      	b.n	8003e78 <__swhatbuf_r+0x24>

08003ea0 <__smakebuf_r>:
 8003ea0:	898b      	ldrh	r3, [r1, #12]
 8003ea2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ea4:	079d      	lsls	r5, r3, #30
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	d507      	bpl.n	8003ebc <__smakebuf_r+0x1c>
 8003eac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	6123      	str	r3, [r4, #16]
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	6163      	str	r3, [r4, #20]
 8003eb8:	b003      	add	sp, #12
 8003eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ebc:	ab01      	add	r3, sp, #4
 8003ebe:	466a      	mov	r2, sp
 8003ec0:	f7ff ffc8 	bl	8003e54 <__swhatbuf_r>
 8003ec4:	9f00      	ldr	r7, [sp, #0]
 8003ec6:	4605      	mov	r5, r0
 8003ec8:	4639      	mov	r1, r7
 8003eca:	4630      	mov	r0, r6
 8003ecc:	f7ff fb18 	bl	8003500 <_malloc_r>
 8003ed0:	b948      	cbnz	r0, 8003ee6 <__smakebuf_r+0x46>
 8003ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ed6:	059a      	lsls	r2, r3, #22
 8003ed8:	d4ee      	bmi.n	8003eb8 <__smakebuf_r+0x18>
 8003eda:	f023 0303 	bic.w	r3, r3, #3
 8003ede:	f043 0302 	orr.w	r3, r3, #2
 8003ee2:	81a3      	strh	r3, [r4, #12]
 8003ee4:	e7e2      	b.n	8003eac <__smakebuf_r+0xc>
 8003ee6:	89a3      	ldrh	r3, [r4, #12]
 8003ee8:	6020      	str	r0, [r4, #0]
 8003eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eee:	81a3      	strh	r3, [r4, #12]
 8003ef0:	9b01      	ldr	r3, [sp, #4]
 8003ef2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ef6:	b15b      	cbz	r3, 8003f10 <__smakebuf_r+0x70>
 8003ef8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003efc:	4630      	mov	r0, r6
 8003efe:	f000 f81d 	bl	8003f3c <_isatty_r>
 8003f02:	b128      	cbz	r0, 8003f10 <__smakebuf_r+0x70>
 8003f04:	89a3      	ldrh	r3, [r4, #12]
 8003f06:	f023 0303 	bic.w	r3, r3, #3
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	81a3      	strh	r3, [r4, #12]
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	431d      	orrs	r5, r3
 8003f14:	81a5      	strh	r5, [r4, #12]
 8003f16:	e7cf      	b.n	8003eb8 <__smakebuf_r+0x18>

08003f18 <_fstat_r>:
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	4d07      	ldr	r5, [pc, #28]	@ (8003f38 <_fstat_r+0x20>)
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	4604      	mov	r4, r0
 8003f20:	4608      	mov	r0, r1
 8003f22:	4611      	mov	r1, r2
 8003f24:	602b      	str	r3, [r5, #0]
 8003f26:	f7fd f917 	bl	8001158 <_fstat>
 8003f2a:	1c43      	adds	r3, r0, #1
 8003f2c:	d102      	bne.n	8003f34 <_fstat_r+0x1c>
 8003f2e:	682b      	ldr	r3, [r5, #0]
 8003f30:	b103      	cbz	r3, 8003f34 <_fstat_r+0x1c>
 8003f32:	6023      	str	r3, [r4, #0]
 8003f34:	bd38      	pop	{r3, r4, r5, pc}
 8003f36:	bf00      	nop
 8003f38:	20000320 	.word	0x20000320

08003f3c <_isatty_r>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4d06      	ldr	r5, [pc, #24]	@ (8003f58 <_isatty_r+0x1c>)
 8003f40:	2300      	movs	r3, #0
 8003f42:	4604      	mov	r4, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	602b      	str	r3, [r5, #0]
 8003f48:	f7fd f916 	bl	8001178 <_isatty>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d102      	bne.n	8003f56 <_isatty_r+0x1a>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	b103      	cbz	r3, 8003f56 <_isatty_r+0x1a>
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
 8003f58:	20000320 	.word	0x20000320

08003f5c <_init>:
 8003f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5e:	bf00      	nop
 8003f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f62:	bc08      	pop	{r3}
 8003f64:	469e      	mov	lr, r3
 8003f66:	4770      	bx	lr

08003f68 <_fini>:
 8003f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6a:	bf00      	nop
 8003f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6e:	bc08      	pop	{r3}
 8003f70:	469e      	mov	lr, r3
 8003f72:	4770      	bx	lr
